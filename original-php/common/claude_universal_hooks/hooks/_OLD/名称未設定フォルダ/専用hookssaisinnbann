# üîÑ Â∞ÇÁî®HooksÂãïÁöÑÁîüÊàê„Ç∑„Çπ„ÉÜ„É†„ÄêÂÆåÂÖ®Áâà„Äë

## üéØ **„Ç∑„Çπ„ÉÜ„É†Ê¶ÇË¶Å**

HTML„Å®ÈñãÁô∫ÊåáÁ§∫Êõ∏„Åã„Çâ**Ê±éÁî®HooksÔºà190Á®ÆÈ°ûÔºâ**„Å®**Â∞ÇÁî®Hooks**„ÇíÁµ±Âêà„Åó„ÄÅ1„Å§„ÅÆ**ÂÆåÂÖ®ÂÆüË°åË®àÁîª.md**„ÇíÂá∫Âäõ„Åô„ÇãÂãïÁöÑ„Ç∑„Çπ„ÉÜ„É†„ÄÇ

### **üöÄ ÊúÄÁµÇÁõÆÊ®ô**
- **ÂÆåÂÖ®ÈÅ©Âøú**: HTMLË¶ÅÁ¥†Êï∞„ÉªÂÜÖÂÆπ„Å´ÂãïÁöÑÂØæÂøú
- **Ê±éÁî®Áµ±Âêà**: 190Á®ÆÈ°û„ÅÆÊ±éÁî®Hooks„Å®„ÅÆÂÆåÂÖ®Áµ±Âêà  
- **AIÂæ©Ê¥ª**: AIÈñ¢ÈÄ£Ë¶ÅÁ¥†„ÅÆÂæ©Ê¥ª„ÉªÁµ±Âêà
- **MDÂá∫Âäõ**: ‰ªñ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åßhooks„Ç∑„Çπ„ÉÜ„É†‰∏çË¶Å„Å™ÂÆåÂÖ®ÊåáÁ§∫Êõ∏ÁîüÊàê

---

## üìä **„Ç∑„Çπ„ÉÜ„É†„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£**

```python
class DynamicHooksGenerationSystem:
    """Â∞ÇÁî®HooksÂãïÁöÑÁîüÊàê„Ç∑„Çπ„ÉÜ„É†„ÄêÂÆåÂÖ®Áâà„Äë"""
    
    def __init__(self):
        # Ê±éÁî®Hooks„Ç´„Çø„É≠„Ç∞Ôºà190Á®ÆÈ°ûÔºâ
        self.universal_hooks_catalog = UniversalHooksCatalog()
        
        # ÂãïÁöÑËß£Êûê„Ç®„É≥„Ç∏„É≥
        self.dynamic_analyzer = DynamicHTMLAnalyzer()
        self.adaptive_questioner = AdaptiveQuestionGenerator()
        
        # Áµ±Âêà„Ç∑„Çπ„ÉÜ„É†
        self.hooks_integrator = HooksIntegrator()
        self.final_md_generator = FinalMDGenerator()
        
        # AIÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÔºàÂæ©Ê¥ªÔºâ
        self.ai_integration_system = AIIntegrationSystem()
        
    def generate_complete_execution_plan(self, 
                                       html_content: str, 
                                       development_instruction: str) -> str:
        """ÂÆåÂÖ®ÂÆüË°åË®àÁîª.mdÁîüÊàê"""
        
        # Step 1: ÂãïÁöÑHTMLËß£Êûê
        html_analysis = self.dynamic_analyzer.analyze_html_completely(html_content)
        
        # Step 2: Ê±éÁî®HooksÈÅ∏ÂÆöÔºà190Á®ÆÈ°û„Åã„ÇâÔºâ
        selected_universal_hooks = self.universal_hooks_catalog.auto_select(
            html_analysis, development_instruction
        )
        
        # Step 3: Â∞ÇÁî®HooksÂãïÁöÑÁîüÊàê
        dynamic_specific_hooks = self.adaptive_questioner.generate_adaptive_hooks(
            html_analysis, development_instruction
        )
        
        # Step 4: AIÈñ¢ÈÄ£HooksÂæ©Ê¥ª„ÉªÁµ±Âêà
        ai_integrated_hooks = self.ai_integration_system.restore_and_integrate(
            html_analysis, development_instruction
        )
        
        # Step 5: Áµ±Âêà„ÉªË≥™ÂïèÁîüÊàê
        integrated_hooks = self.hooks_integrator.integrate_all_hooks(
            selected_universal_hooks, 
            dynamic_specific_hooks,
            ai_integrated_hooks
        )
        
        # Step 6: ÂÆåÂÖ®ÂÆüË°åË®àÁîª.mdÁîüÊàê
        final_md = self.final_md_generator.generate_complete_plan(
            integrated_hooks, html_analysis, development_instruction
        )
        
        return final_md
```

---

## üîç **Phase 1: Ê±éÁî®HooksÂÆåÂÖ®„Ç´„Çø„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†**

### **üìö Ê±éÁî®Hooks190Á®ÆÈ°ûÂÆåÂÖ®„Ç´„Çø„É≠„Ç∞Ôºà„Éä„É¨„ÉÉ„Ç∏„Éô„Éº„ÇπÔºâ**

```python
class UniversalHooksCatalog:
    """„Éä„É¨„ÉÉ„Ç∏ÂÜÖ„ÅÆÊ±éÁî®Hooks190Á®ÆÈ°ûÂÆåÂÖ®ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†"""
    
    def __init__(self):
        self.hooks_database = self._build_complete_universal_hooks_database()
        
    def _build_complete_universal_hooks_database(self) -> Dict[str, Dict]:
        """„Éä„É¨„ÉÉ„Ç∏„Åã„Çâ190Á®ÆÈ°ûÊ±éÁî®HooksÂÆåÂÖ®„Éá„Éº„Çø„Éô„Éº„ÇπÊßãÁØâ"""
        
        # „Éä„É¨„ÉÉ„Ç∏ÂàÜÊûêÁµêÊûúÔºöÊ±éÁî®Hooks190Á®ÆÈ°û„ÅÆ‰ΩìÁ≥ª
        universal_hooks_190 = {
            # === Phase 1: Âü∫Áõ§ÊßãÁØâhooksÔºà40Á®ÆÈ°ûÔºâ===
            # CSS„ÉªJavaScript„ÉªPHPÂü∫Áõ§hooks
            'css_externalization_hooks': self._generate_css_hooks_variants(10),
            'js_externalization_hooks': self._generate_js_hooks_variants(10), 
            'php_conversion_hooks': self._generate_php_hooks_variants(10),
            'ajax_implementation_hooks': self._generate_ajax_hooks_variants(10),
            
            # === Phase 2: „ÉÜ„Çπ„Éà„Éª„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπhooksÔºà30Á®ÆÈ°ûÔºâ===
            # comprehensive_test_automation.pyÔºà15Á®ÆÈ°ûÔºâ
            'test_automation_hooks': {
                'pytest_auto_generation': {'phase_target': [2], 'priority': 'high'},
                'test_fixture_generation': {'phase_target': [2], 'priority': 'high'},
                'mock_object_generation': {'phase_target': [2], 'priority': 'medium'},
                'parametrized_test_generation': {'phase_target': [2], 'priority': 'medium'},
                'test_data_factory_generation': {'phase_target': [2], 'priority': 'medium'},
                'test_coverage_verification': {'phase_target': [2], 'priority': 'high'},
                'test_quality_evaluation': {'phase_target': [2], 'priority': 'high'},
                'test_isolation_verification': {'phase_target': [2], 'priority': 'medium'},
                'test_performance_verification': {'phase_target': [2], 'priority': 'medium'},
                'test_maintainability_check': {'phase_target': [2], 'priority': 'medium'},
                'integration_test_generation': {'phase_target': [3], 'priority': 'high'},
                'e2e_test_automation': {'phase_target': [3], 'priority': 'high'},
                'api_test_suite_generation': {'phase_target': [3], 'priority': 'high'},
                'database_test_verification': {'phase_target': [3], 'priority': 'medium'},
                'cicd_test_integration': {'phase_target': [3], 'priority': 'high'}
            },
            
            # performance_optimization_suite.pyÔºà15Á®ÆÈ°ûÔºâ
            'performance_measurement_hooks': {
                'response_time_measurement': {'phase_target': [3], 'priority': 'critical'},
                'throughput_measurement': {'phase_target': [3], 'priority': 'high'},
                'memory_usage_monitoring': {'phase_target': [3], 'priority': 'high'},
                'cpu_usage_monitoring': {'phase_target': [3], 'priority': 'high'},
                'concurrent_load_testing': {'phase_target': [3], 'priority': 'high'},
                'database_performance_optimization': {'phase_target': [3], 'priority': 'critical'},
                'api_performance_testing': {'phase_target': [3], 'priority': 'critical'},
                'frontend_performance_analysis': {'phase_target': [3], 'priority': 'medium'},
                'network_latency_measurement': {'phase_target': [3], 'priority': 'medium'},
                'cache_efficiency_evaluation': {'phase_target': [3], 'priority': 'medium'},
                'scalability_testing': {'phase_target': [4], 'priority': 'high'},
                'stress_testing': {'phase_target': [4], 'priority': 'high'},
                'bottleneck_identification': {'phase_target': [4], 'priority': 'critical'},
                'performance_baseline_establishment': {'phase_target': [2], 'priority': 'high'},
                'sla_compliance_verification': {'phase_target': [4], 'priority': 'critical'}
            },
            
            # === Phase 3: AI„ÉªÁµ±ÂêàhooksÔºà40Á®ÆÈ°ûÔºâ===
            # three_ai_enhanced_hooks.pyÔºà25Á®ÆÈ°ûÔºâ
            'ai_integration_hooks': {
                'deepseek_integration': {'phase_target': [1, 2], 'priority': 'critical'},
                'ollama_integration': {'phase_target': [1, 2], 'priority': 'high'},
                'openai_integration': {'phase_target': [1, 2], 'priority': 'high'},
                'ai_tool_selection_automation': {'phase_target': [0, 1], 'priority': 'critical'},
                'ai_learning_data_management': {'phase_target': [1, 2], 'priority': 'critical'},
                'ai_model_storage_management': {'phase_target': [1, 2], 'priority': 'high'},
                'ai_execution_method_optimization': {'phase_target': [2], 'priority': 'high'},
                'ai_resource_allocation': {'phase_target': [2], 'priority': 'medium'},
                'ai_performance_monitoring': {'phase_target': [3], 'priority': 'high'},
                'ai_quality_assurance': {'phase_target': [3], 'priority': 'high'},
                'ai_error_handling': {'phase_target': [2, 3], 'priority': 'critical'},
                'ai_fallback_system': {'phase_target': [2, 3], 'priority': 'high'},
                'ai_version_management': {'phase_target': [3], 'priority': 'medium'},
                'ai_security_compliance': {'phase_target': [2, 3], 'priority': 'critical'},
                'ai_data_privacy_protection': {'phase_target': [2, 3], 'priority': 'critical'},
                'ai_bias_detection': {'phase_target': [3], 'priority': 'medium'},
                'ai_explainability': {'phase_target': [3], 'priority': 'medium'},
                'ai_continuous_learning': {'phase_target': [4], 'priority': 'high'},
                'ai_model_comparison': {'phase_target': [3], 'priority': 'medium'},
                'ai_cost_optimization': {'phase_target': [3], 'priority': 'medium'},
                'ai_audit_trail': {'phase_target': [3, 4], 'priority': 'high'},
                'ai_deployment_automation': {'phase_target': [4], 'priority': 'high'},
                'ai_rollback_system': {'phase_target': [4], 'priority': 'high'},
                'ai_integration_testing': {'phase_target': [3], 'priority': 'high'},
                'ai_monitoring_dashboard': {'phase_target': [4], 'priority': 'medium'}
            },
            
            # integrated_development_suite.pyÔºà15Á®ÆÈ°ûÔºâ
            'development_integration_hooks': {
                'code_generation_automation': {'phase_target': [2], 'priority': 'high'},
                'error_tracking_system': {'phase_target': [3], 'priority': 'critical'},
                'deployment_automation': {'phase_target': [4], 'priority': 'critical'},
                'monitoring_integration': {'phase_target': [4], 'priority': 'critical'},
                'maintenance_automation': {'phase_target': [4], 'priority': 'high'},
                'version_control_integration': {'phase_target': [2], 'priority': 'high'},
                'dependency_management': {'phase_target': [2], 'priority': 'high'},
                'build_automation': {'phase_target': [3], 'priority': 'high'},
                'quality_gate_enforcement': {'phase_target': [3], 'priority': 'critical'},
                'security_scanning_integration': {'phase_target': [3], 'priority': 'critical'},
                'documentation_generation': {'phase_target': [3], 'priority': 'medium'},
                'configuration_management': {'phase_target': [2, 3], 'priority': 'high'},
                'environment_provisioning': {'phase_target': [2], 'priority': 'high'},
                'rollback_mechanism': {'phase_target': [4], 'priority': 'critical'},
                'health_check_automation': {'phase_target': [4], 'priority': 'critical'}
            },
            
            # === Phase 4: ÂõΩÈöõÂåñ„ÉªÈÅãÁî®hooksÔºà30Á®ÆÈ°ûÔºâ===
            # ÂõΩÈöõÂåñhooksÔºà15Á®ÆÈ°ûÔºâ
            'internationalization_hooks': {
                'translation_completeness_check': {'phase_target': [3], 'priority': 'high'},
                'locale_support_verification': {'phase_target': [3], 'priority': 'high'},
                'text_encoding_verification': {'phase_target': [3], 'priority': 'medium'},
                'plural_rules_verification': {'phase_target': [3], 'priority': 'medium'},
                'contextual_translation_verification': {'phase_target': [3], 'priority': 'medium'},
                'date_format_localization': {'phase_target': [3], 'priority': 'high'},
                'currency_format_localization': {'phase_target': [3], 'priority': 'high'},
                'number_format_localization': {'phase_target': [3], 'priority': 'medium'},
                'timezone_processing_verification': {'phase_target': [3], 'priority': 'medium'},
                'calendar_system_support': {'phase_target': [3], 'priority': 'low'},
                'rtl_language_support': {'phase_target': [3], 'priority': 'medium'},
                'ui_layout_adaptation': {'phase_target': [3], 'priority': 'medium'},
                'font_rendering_verification': {'phase_target': [3], 'priority': 'low'},
                'text_expansion_handling': {'phase_target': [3], 'priority': 'medium'},
                'cultural_adaptation_check': {'phase_target': [3], 'priority': 'low'}
            },
            
            # ÈÅãÁî®„ÉªÁõ£Ë¶ñhooksÔºà15Á®ÆÈ°ûÔºâ
            'operations_monitoring_hooks': {
                'system_health_monitoring': {'phase_target': [4], 'priority': 'critical'},
                'application_metrics_collection': {'phase_target': [4], 'priority': 'critical'},
                'error_tracking_system_ops': {'phase_target': [4], 'priority': 'critical'},
                'performance_metrics_analysis': {'phase_target': [4], 'priority': 'critical'},
                'uptime_monitoring': {'phase_target': [4], 'priority': 'critical'},
                'structured_logging_verification': {'phase_target': [3, 4], 'priority': 'high'},
                'log_rotation_management': {'phase_target': [4], 'priority': 'high'},
                'log_aggregation_system': {'phase_target': [4], 'priority': 'high'},
                'security_log_monitoring': {'phase_target': [4], 'priority': 'critical'},
                'audit_trail_verification': {'phase_target': [4], 'priority': 'critical'},
                'automated_deployment_verification': {'phase_target': [4], 'priority': 'critical'},
                'backup_system_verification': {'phase_target': [4], 'priority': 'critical'},
                'disaster_recovery_testing': {'phase_target': [4], 'priority': 'critical'},
                'security_incident_response': {'phase_target': [4], 'priority': 'critical'},
                'maintenance_automation_ops': {'phase_target': [4], 'priority': 'high'}
            },
            
            # === Phase 5: „Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÉªÊ§úË®ºhooksÔºà50Á®ÆÈ°ûÔºâ===
            # base_validation_hook.pyÊã°ÂºµÔºà25Á®ÆÈ°ûÔºâ
            'security_validation_hooks': {
                'csrf_protection_verification': {'phase_target': [1, 2, 3], 'priority': 'critical'},
                'xss_prevention_verification': {'phase_target': [1, 2, 3], 'priority': 'critical'},
                'sql_injection_prevention': {'phase_target': [1, 2, 3], 'priority': 'critical'},
                'authentication_verification': {'phase_target': [2, 3], 'priority': 'critical'},
                'authorization_verification': {'phase_target': [2, 3], 'priority': 'critical'},
                'session_management_security': {'phase_target': [2, 3], 'priority': 'critical'},
                'input_validation_security': {'phase_target': [1, 2, 3], 'priority': 'critical'},
                'output_encoding_verification': {'phase_target': [1, 2, 3], 'priority': 'critical'},
                'secure_communication_verification': {'phase_target': [2, 3], 'priority': 'critical'},
                'data_encryption_verification': {'phase_target': [2, 3], 'priority': 'critical'},
                'access_control_verification': {'phase_target': [2, 3], 'priority': 'critical'},
                'security_headers_verification': {'phase_target': [2, 3], 'priority': 'high'},
                'vulnerability_scanning': {'phase_target': [3, 4], 'priority': 'critical'},
                'penetration_testing_automation': {'phase_target': [4], 'priority': 'high'},
                'security_compliance_check': {'phase_target': [3, 4], 'priority': 'critical'},
                'gdpr_compliance_verification': {'phase_target': [3, 4], 'priority': 'high'},
                'pci_compliance_verification': {'phase_target': [3, 4], 'priority': 'high'},
                'security_audit_automation': {'phase_target': [4], 'priority': 'high'},
                'threat_modeling_verification': {'phase_target': [2, 3], 'priority': 'medium'},
                'security_training_verification': {'phase_target': [1], 'priority': 'medium'},
                'incident_response_testing': {'phase_target': [4], 'priority': 'high'},
                'security_monitoring_setup': {'phase_target': [3, 4], 'priority': 'critical'},
                'forensic_capability_verification': {'phase_target': [4], 'priority': 'medium'},
                'security_baseline_establishment': {'phase_target': [2], 'priority': 'high'},
                'continuous_security_testing': {'phase_target': [3, 4], 'priority': 'high'}
            },
            
            # ÂìÅË≥™‰øùË®ºhooksÔºà25Á®ÆÈ°ûÔºâ
            'quality_assurance_hooks': {
                'code_quality_verification': {'phase_target': [1, 2, 3], 'priority': 'high'},
                'coding_standards_enforcement': {'phase_target': [1, 2, 3], 'priority': 'high'},
                'architecture_compliance_check': {'phase_target': [2, 3], 'priority': 'high'},
                'design_pattern_verification': {'phase_target': [2, 3], 'priority': 'medium'},
                'documentation_quality_check': {'phase_target': [2, 3, 4], 'priority': 'medium'},
                'code_review_automation': {'phase_target': [2, 3], 'priority': 'high'},
                'static_code_analysis': {'phase_target': [2, 3], 'priority': 'high'},
                'dynamic_code_analysis': {'phase_target': [3], 'priority': 'high'},
                'complexity_analysis': {'phase_target': [2, 3], 'priority': 'medium'},
                'maintainability_assessment': {'phase_target': [3, 4], 'priority': 'medium'},
                'scalability_verification': {'phase_target': [3, 4], 'priority': 'high'},
                'reliability_testing': {'phase_target': [3, 4], 'priority': 'high'},
                'availability_verification': {'phase_target': [4], 'priority': 'critical'},
                'usability_testing_automation': {'phase_target': [3, 4], 'priority': 'medium'},
                'accessibility_verification': {'phase_target': [3], 'priority': 'medium'},
                'compatibility_testing': {'phase_target': [3], 'priority': 'medium'},
                'regression_testing_automation': {'phase_target': [3, 4], 'priority': 'high'},
                'smoke_testing_automation': {'phase_target': [3, 4], 'priority': 'high'},
                'sanity_testing_automation': {'phase_target': [3, 4], 'priority': 'medium'},
                'acceptance_testing_automation': {'phase_target': [4], 'priority': 'high'},
                'beta_testing_coordination': {'phase_target': [4], 'priority': 'medium'},
                'user_feedback_integration': {'phase_target': [4], 'priority': 'medium'},
                'quality_metrics_reporting': {'phase_target': [3, 4], 'priority': 'high'},
                'continuous_improvement_tracking': {'phase_target': [4], 'priority': 'medium'},
                'quality_gate_automation': {'phase_target': [3, 4], 'priority': 'critical'}
            }
        }
        
        # 190Á®ÆÈ°û„ÅÆÊ±éÁî®Hooks„ÇíÁµ±Âêà
        return self._flatten_and_enhance_hooks(universal_hooks_190)
            
            'phase0_python_api': {
                'category': 'api',
                'phase_target': [0],
                'priority': 'critical',
                'auto_selection_keywords': ['python', 'api', 'fastapi', 'ai', 'machine learning'],
                'questions': [
                    'Python API„Å®„ÅÆÂÆüÈÄ£Êê∫„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'callPythonAIService()Èñ¢Êï∞„Å®„ÅÆ‰∫íÊèõÊÄß„ÅØÁ¢∫‰øù„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'Ê®°Êì¨„É¨„Çπ„Éù„É≥„Çπ„Éª„É¢„ÉÉ„ÇØÂá¶ÁêÜ„ÅØÂÆåÂÖ®„Å´Á¶ÅÊ≠¢„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
                ],
                'error_prevention': [3, 15, 21],
                'implementation_template': '''
                // ÂÆüPython APIÈÄ£Êê∫ÔºàÊ®°Êì¨„É¨„Çπ„Éù„É≥„ÇπÁ¶ÅÊ≠¢Ôºâ
                async function callRealPythonAPI(data) {
                    return await callPythonAIService(data); // Êó¢Â≠ò„Ç∑„Çπ„ÉÜ„É†‰∫íÊèõ
                }
                '''
            },
            
            'phase0_csv_processing': {
                'category': 'file',
                'phase_target': [0],
                'priority': 'high',
                'auto_selection_keywords': ['csv', 'file', 'import', 'export', '„Éï„Ç°„Ç§„É´Âá¶ÁêÜ'],
                'questions': [
                    'ÂÆü„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    '„Éï„Ç°„Ç§„É´Â≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ„ÉªÊ®©ÈôêÁ¢∫Ë™ç„ÅØÂÆüË£Ö„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    '„Éú„Çø„É≥„ÅÆ„Åø„ÅÆÂÅΩË£ÖÊ©üËÉΩ„ÅØÂÆåÂÖ®„Å´Á¶ÅÊ≠¢„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
                ],
                'error_prevention': [18],
                'implementation_template': '''
                // ÂÆü„Éï„Ç°„Ç§„É´Âá¶ÁêÜÔºà„Éú„Çø„É≥„ÅÆ„ÅøÁ¶ÅÊ≠¢Ôºâ
                function processRealCSVFile(file) {
                    if (!fs.existsSync(file)) throw new Error('File not found');
                    return processCSV(file); // ÂÆüÂá¶ÁêÜÂøÖÈ†à
                }
                '''
            },
            
            # AIÈñ¢ÈÄ£HooksÔºàÂæ©Ê¥ªÁâàÔºâ
            'ai_operation_auto_question': {
                'category': 'ai',
                'phase_target': [0, 1],
                'priority': 'critical',
                'auto_selection_keywords': ['ai', 'learning', 'deepseek', 'ollama', 'Ê©üÊ¢∞Â≠¶Áøí', 'Ëá™Âãï'],
                'questions': [
                    '‰ΩøÁî®„Åô„ÇãAI„ÉÑ„Éº„É´„ÅØÔºüÔºàDEEPSEEK/Ollama/OpenAI/„Ç´„Çπ„Çø„É†Ôºâ',
                    'Â≠¶Áøí„Éá„Éº„Çø„ÅÆÂèñÂæóÂÖÉ„ÅØÔºüÔºàPostgreSQL/CSV/API/ÊâãÂãïÔºâ',
                    '„É¢„Éá„É´‰øùÂ≠òÂ†¥ÊâÄ„ÅØÔºüÔºàai_workspace/models/Êé®Â•®Ôºâ',
                    'AIÂ≠¶Áøí„ÅÆÂÆüË°åÊñπÊ≥ï„ÅØÔºüÔºà„É™„Ç¢„É´„Çø„Ç§„É†/„Éê„ÉÉ„ÉÅ/ÊâãÂãï/APIÔºâ',
                    'Ë®àÁÆó„É™„ÇΩ„Éº„ÇπÂà∂Èôê„ÅØÔºüÔºàGPU/CPU/„É°„É¢„É™/ÊôÇÈñìÂà∂ÈôêÔºâ'
                ],
                'error_prevention': [31],
                'implementation_template': '''
                // AIÊìç‰ΩúÊôÇËá™ÂãïË≥™Âïè„Ç∑„Çπ„ÉÜ„É†
                class AIOperationManager {
                    async detectAIOperation(buttonContext) {
                        const questions = this.generateAIQuestions(buttonContext);
                        return await this.executeAIQuestionnaire(questions);
                    }
                }
                '''
            },
            
            'deepseek_integration': {
                'category': 'ai',
                'phase_target': [2, 3],
                'priority': 'high',
                'auto_selection_keywords': ['deepseek', 'code generation', 'ai coding'],
                'questions': [
                    'DEEPSEEK API„Ç≠„Éº„ÅÆË®≠ÂÆö„ÅØÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    '„Ç≥„Éº„ÉâÁîüÊàê„ÅÆÂìÅË≥™Âü∫Ê∫ñ„ÅØÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'DEEPSEEKÁîüÊàê„Ç≥„Éº„Éâ„ÅÆÊ§úË®ºÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
                ],
                'error_prevention': [15, 31],
                'implementation_template': '''
                // DEEPSEEKÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†
                class DeepSeekIntegration {
                    async generateCode(prompt) {
                        const response = await this.deepseekAPI.generate(prompt);
                        return this.validateGeneratedCode(response);
                    }
                }
                '''
            },
            
            'ollama_integration': {
                'category': 'ai',
                'phase_target': [2, 3],
                'priority': 'high',
                'auto_selection_keywords': ['ollama', 'local ai', 'multi model'],
                'questions': [
                    'Ollama„ÅÆÂãï‰ΩúÁí∞Â¢ÉË®≠ÂÆö„ÅØÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    '‰ΩøÁî®„Åô„ÇãOllama„É¢„Éá„É´„ÅØÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'Ollama„É¢„Éá„É´„ÅÆÂàá„ÇäÊõø„ÅàÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
                ],
                'error_prevention': [15, 21],
                'implementation_template': '''
                // OllamaÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†
                class OllamaIntegration {
                    async switchModel(modelName) {
                        await this.ollamaClient.pull(modelName);
                        return this.ollamaClient.setActiveModel(modelName);
                    }
                }
                '''
            },
            
            # UI/UXÈñ¢ÈÄ£Hooks
            'html_to_php_conversion': {
                'category': 'conversion',
                'phase_target': [2],
                'priority': 'high',
                'auto_selection_keywords': ['html', 'php', 'conversion', 'Â§âÊèõ'],
                'questions': [
                    'HTML„Åã„ÇâPHP„Å∏„ÅÆÂ§âÊèõÊôÇ„ÄÅÂãïÁöÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑÂÆüË£ÖÊñπÈáù„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'PHPÂü∫Áõ§Ôºà„Çª„ÉÉ„Ç∑„Éß„É≥ÁÆ°ÁêÜ„ÄÅ„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÁ≠ñÔºâÂÆüË£Ö„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'Êó¢Â≠ò„ÅÆHTMLÊßãÈÄ†„Çí‰øùÊåÅ„Åó„Åü„Åæ„Åæ„ÅÆPHPÂåñ„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
                ],
                'error_prevention': [4, 5, 10],
                'implementation_template': '''
                // HTML to PHPÂ§âÊèõ
                function convertHTMLToPHP($htmlContent) {
                    $phpContent = $this->addPHPHeaders($htmlContent);
                    $phpContent = $this->addSecurityFeatures($phpContent);
                    return $this->preserveHTMLStructure($phpContent);
                }
                '''
            },
            
            'javascript_externalization': {
                'category': 'javascript',
                'phase_target': [3],
                'priority': 'high',
                'auto_selection_keywords': ['javascript', 'onclick', 'event', 'external'],
                'questions': [
                    'onclickÂ±ûÊÄß„ÅÆÂ§ñÈÉ®JavaScriptÂåñ„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    '„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„Åß„ÅÆÁµ±‰∏ÄÁöÑ„Ç§„Éô„É≥„ÉàÁÆ°ÁêÜ„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'JavaScriptÈñ¢Êï∞„ÅÆÁ´∂ÂêàÂõûÈÅø„Å®„Éç„Éº„É†„Çπ„Éö„Éº„ÇπÁÆ°ÁêÜ„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
                ],
                'error_prevention': [1, 6, 8],
                'implementation_template': '''
                // JavaScriptÂ§ñÈÉ®Âåñ
                class EventManager {
                    init() {
                        document.addEventListener('DOMContentLoaded', () => {
                            this.bindAllEvents();
                        });
                    }
                    
                    bindAllEvents() {
                        this.bindButtonEvents();
                        this.bindFormEvents();
                    }
                }
                '''
            },
            
            'ajax_implementation': {
                'category': 'ajax',
                'phase_target': [4],
                'priority': 'critical',
                'auto_selection_keywords': ['ajax', 'async', 'fetch', 'api'],
                'questions': [
                    'PHPÂÅ¥„Åß„ÅÆAjax„Éè„É≥„Éâ„É©„ÉºÂÆüË£Ö„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'JavaScriptÂÅ¥„Åß„ÅÆAjaxÈÄö‰ø°„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'CSRF„Éà„Éº„ÇØ„É≥„ÇíÂê´„ÇÄ„Çª„Ç≠„É•„Ç¢„Å™AjaxÈÄö‰ø°„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
                ],
                'error_prevention': [3, 5, 25],
                'implementation_template': '''
                // AjaxÂÆüË£Ö
                class AjaxManager {
                    async sendRequest(action, data) {
                        const csrfToken = this.getCSRFToken();
                        const response = await fetch('/ajax_handler.php', {
                            method: 'POST',
                            headers: { 'X-CSRF-Token': csrfToken },
                            body: JSON.stringify({ action, data })
                        });
                        return response.json();
                    }
                }
                '''
            },
            
            # „Çª„Ç≠„É•„É™„ÉÜ„Ç£Èñ¢ÈÄ£Hooks
            'csrf_protection': {
                'category': 'security',
                'phase_target': [1, 2, 3, 4],
                'priority': 'critical',
                'auto_selection_keywords': ['csrf', 'security', 'token', 'protection'],
                'questions': [
                    'CSRF„Éà„Éº„ÇØ„É≥„ÅÆÁîüÊàê„ÉªÈÄÅ‰ø°„ÉªÊ§úË®º„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'CSRF„Éü„Éâ„É´„Ç¶„Çß„Ç¢„ÅÆÂÆüË£Ö„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'CSRFÊîªÊíÉ„ÅÆÈò≤Âæ°ÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
                ],
                'error_prevention': [5, 25],
                'implementation_template': '''
                // CSRF‰øùË≠∑
                class CSRFProtection {
                    generateToken() {
                        return bin2hex(random_bytes(32));
                    }
                    
                    validateToken($token) {
                        return hash_equals($_SESSION['csrf_token'], $token);
                    }
                }
                '''
            },
            
            'xss_prevention': {
                'category': 'security',
                'phase_target': [2, 3, 4],
                'priority': 'critical',
                'auto_selection_keywords': ['xss', 'security', 'escape', 'sanitize'],
                'questions': [
                    'HTML„Ç®„Çπ„Ç±„Éº„ÉóÂÆüË£Ö„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'ÂÖ•ÂäõÂÄ§Ê§úË®º„Éª„Çµ„Éã„Çø„Ç§„Ç∫„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                    'XSSÊîªÊíÉ„ÅÆÈò≤Âæ°ÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
                ],
                'error_prevention': [26],
                'implementation_template': '''
                // XSSÈò≤Âæ°
                class XSSPrevention {
                    escapeHTML($input) {
                        return htmlspecialchars($input, ENT_QUOTES, 'UTF-8');
                    }
                    
                    sanitizeInput($input) {
                        return filter_var($input, FILTER_SANITIZE_STRING);
                    }
                }
                '''
            },
    def _flatten_and_enhance_hooks(self, hooks_categories: Dict) -> Dict[str, Dict]:
        """190Á®ÆÈ°û„ÅÆÊ±éÁî®Hooks„ÇíÁµ±Âêà„ÉªÂº∑Âåñ"""
        
        flattened_hooks = {}
        hook_counter = 1
        
        for category_name, category_hooks in hooks_categories.items():
            if isinstance(category_hooks, dict):
                # ÂÄãÂà•hooksÂá¶ÁêÜ
                for hook_name, hook_config in category_hooks.items():
                    enhanced_hook_id = f"universal_hook_{hook_counter:03d}_{hook_name}"
                    
                    flattened_hooks[enhanced_hook_id] = {
                        'hook_id': hook_counter,
                        'hook_name': hook_name,
                        'category': category_name,
                        'phase_target': hook_config.get('phase_target', [3]),
                        'priority': hook_config.get('priority', 'medium'),
                        'auto_selection_keywords': self._generate_keywords(hook_name, category_name),
                        'questions': self._generate_hook_questions(hook_name, category_name),
                        'implementation_guide': self._generate_implementation_guide(hook_name, category_name),
                        'error_prevention': self._map_to_phase1_errors(hook_name, category_name),
                        'universal_hook': True,
                        'source_category': category_name
                    }
                    hook_counter += 1
            else:
                # „Ç´„ÉÜ„Ç¥„É™hooksÂá¶ÁêÜÔºàCSS„ÄÅJSÁ≠âÔºâ
                for variant_hooks in category_hooks:
                    if isinstance(variant_hooks, dict):
                        for hook_name, hook_config in variant_hooks.items():
                            enhanced_hook_id = f"universal_hook_{hook_counter:03d}_{hook_name}"
                            
                            flattened_hooks[enhanced_hook_id] = {
                                'hook_id': hook_counter,
                                'hook_name': hook_name,
                                'category': category_name,
                                'phase_target': hook_config.get('phase_target', [1]),
                                'priority': hook_config.get('priority', 'medium'),
                                'auto_selection_keywords': self._generate_keywords(hook_name, category_name),
                                'questions': self._generate_hook_questions(hook_name, category_name),
                                'implementation_guide': self._generate_implementation_guide(hook_name, category_name),
                                'error_prevention': self._map_to_phase1_errors(hook_name, category_name),
                                'universal_hook': True,
                                'source_category': category_name
                            }
                            hook_counter += 1
        
        print(f"üìä Ê±éÁî®HooksÁµ±ÂêàÂÆå‰∫Ü: {len(flattened_hooks)}Á®ÆÈ°û")
        return flattened_hooks
    
    def _generate_css_hooks_variants(self, count: int) -> List[Dict]:
        """CSSÈñ¢ÈÄ£Ê±éÁî®hooksÁîüÊàê"""
        css_variants = {}
        css_hooks = [
            'inline_style_extraction', 'css_externalization', 'bem_naming_conversion',
            'css_optimization', 'responsive_design_check', 'css_validation',
            'cross_browser_compatibility', 'css_performance_optimization',
            'css_maintainability_check', 'css_accessibility_verification'
        ]
        
        for i, hook_name in enumerate(css_hooks[:count]):
            css_variants[hook_name] = {
                'phase_target': [1],
                'priority': 'high' if i < 3 else 'medium'
            }
        
        return css_variants
    
    def _generate_js_hooks_variants(self, count: int) -> List[Dict]:
        """JavaScriptÈñ¢ÈÄ£Ê±éÁî®hooksÁîüÊàê"""
        js_variants = {}
        js_hooks = [
            'onclick_externalization', 'event_listener_setup', 'namespace_management',
            'js_optimization', 'error_handling_setup', 'async_processing_check',
            'dom_manipulation_verification', 'js_performance_optimization',
            'js_security_verification', 'js_accessibility_check'
        ]
        
        for i, hook_name in enumerate(js_hooks[:count]):
            js_variants[hook_name] = {
                'phase_target': [3],
                'priority': 'high' if i < 4 else 'medium'
            }
        
        return js_variants
    
    def _generate_php_hooks_variants(self, count: int) -> List[Dict]:
        """PHPÈñ¢ÈÄ£Ê±éÁî®hooksÁîüÊàê"""
        php_variants = {}
        php_hooks = [
            'html_to_php_conversion', 'php_security_setup', 'session_management',
            'csrf_token_implementation', 'input_validation', 'output_sanitization',
            'database_integration', 'error_handling_setup', 'php_performance_optimization',
            'php_best_practices_check'
        ]
        
        for i, hook_name in enumerate(php_hooks[:count]):
            php_variants[hook_name] = {
                'phase_target': [2],
                'priority': 'critical' if i < 6 else 'high'
            }
        
        return php_variants
    
    def _generate_ajax_hooks_variants(self, count: int) -> List[Dict]:
        """AjaxÈñ¢ÈÄ£Ê±éÁî®hooksÁîüÊàê"""
        ajax_variants = {}
        ajax_hooks = [
            'ajax_handler_implementation', 'ajax_client_setup', 'csrf_ajax_integration',
            'ajax_error_handling', 'ajax_performance_optimization', 'ajax_security_verification',
            'ajax_data_validation', 'ajax_response_formatting', 'ajax_retry_mechanism',
            'ajax_monitoring_setup'
        ]
        
        for i, hook_name in enumerate(ajax_hooks[:count]):
            ajax_variants[hook_name] = {
                'phase_target': [4],
                'priority': 'critical' if i < 4 else 'high'
            }
        
        return ajax_variants
    
    def _generate_keywords(self, hook_name: str, category: str) -> List[str]:
        """HookÂêç„Å®„Ç´„ÉÜ„Ç¥„É™„Åã„ÇâËá™ÂãïÈÅ∏ÂÆö„Ç≠„Éº„ÉØ„Éº„ÉâÁîüÊàê"""
        
        keyword_mapping = {
            'css': ['css', 'style', '„Éá„Ç∂„Ç§„É≥', '„Çπ„Çø„Ç§„É´', '„É¨„Çπ„Éù„É≥„Ç∑„Éñ'],
            'js': ['javascript', 'js', '„Çπ„ÇØ„É™„Éó„Éà', '„Ç§„Éô„É≥„Éà', 'dom'],
            'php': ['php', '„Çµ„Éº„Éê„Éº', '„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ', '„Çª„Ç≠„É•„É™„ÉÜ„Ç£'],
            'ajax': ['ajax', 'async', 'ÈùûÂêåÊúü', 'api', 'ÈÄö‰ø°'],
            'test': ['test', 'testing', '„ÉÜ„Çπ„Éà', 'Ê§úË®º', 'ÂìÅË≥™'],
            'performance': ['performance', '„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ', 'ÊúÄÈÅ©Âåñ', 'ÈÄüÂ∫¶'],
            'ai': ['ai', '‰∫∫Â∑•Áü•ËÉΩ', 'Ê©üÊ¢∞Â≠¶Áøí', 'deepseek', 'ollama'],
            'security': ['security', '„Çª„Ç≠„É•„É™„ÉÜ„Ç£', 'csrf', 'xss', 'Ë™çË®º']
        }
        
        base_keywords = []
        for key, keywords in keyword_mapping.items():
            if key in category.lower() or key in hook_name.lower():
                base_keywords.extend(keywords)
        
        # hookÂêç„Åã„ÇâËøΩÂä†„Ç≠„Éº„ÉØ„Éº„Éâ
        hook_words = hook_name.replace('_', ' ').split()
        base_keywords.extend(hook_words)
        
        return list(set(base_keywords))
    
    def _generate_hook_questions(self, hook_name: str, category: str) -> List[str]:
        """HookÂõ∫Êúâ„ÅÆË≥™ÂïèÁîüÊàê"""
        
        question_templates = {
            'css': [
                f'{hook_name}„ÅÆÂÆüË£ÖÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                'CSSÂ§ñÈÉ®Âåñ„Å´„Çà„ÇãÊó¢Â≠ò„Éá„Ç∂„Ç§„É≥„ÅÆ‰øùÊåÅ„ÅØÁ¢∫ÂÆü„Åß„Åô„ÅãÔºü',
                'BEMÂëΩÂêçË¶èÂâá„Åß„ÅÆÁµ±‰∏ÄÁöÑ„Å™„ÇØ„É©„ÇπÂêç‰ªò„Åë„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
            ],
            'test': [
                f'{hook_name}„ÅÆ„ÉÜ„Çπ„ÉàÁØÑÂõ≤„ÉªÂØæË±°„ÅØÊòéÁ¢∫„Å´ÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                '„ÉÜ„Çπ„Éà„Éá„Éº„Çø„ÅÆÊ∫ñÂÇô„ÉªÁÆ°ÁêÜÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                '„ÉÜ„Çπ„ÉàÂÆüË°å„ÅÆËá™ÂãïÂåñÁí∞Â¢É„ÅØÊï¥ÂÇô„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
            ],
            'ai': [
                f'{hook_name}„ÅÆAIÁµ±ÂêàË®≠ÂÆö„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                'AIÂ≠¶Áøí„Éá„Éº„Çø„ÅÆÂìÅË≥™ÁÆ°ÁêÜÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                'AIÂá¶ÁêÜÂ§±ÊïóÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üËÉΩ„ÅØÊ∫ñÂÇô„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
            ],
            'security': [
                f'{hook_name}„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂÆüË£Ö„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                '„Çª„Ç≠„É•„É™„ÉÜ„Ç£ËÑÜÂº±ÊÄß„ÅÆ‰∫àÈò≤ÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
                '„Çª„Ç≠„É•„É™„ÉÜ„Ç£Áõ£Êüª„ÉªÊ§úË®º„ÅÆÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
            ]
        }
        
        for key, questions in question_templates.items():
            if key in category.lower() or key in hook_name.lower():
                return questions
        
        # „Éá„Éï„Ç©„É´„ÉàË≥™Âïè
        return [
            f'{hook_name}„ÅÆÂÆüË£ÖÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
            f'{hook_name}„ÅÆÂìÅË≥™Âü∫Ê∫ñ„ÅØÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü',
            f'{hook_name}„ÅÆ„ÉÜ„Çπ„Éà„ÉªÊ§úË®ºÊñπÊ≥ï„ÅØÁêÜËß£„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü'
        ]
    
    def auto_select(self, html_analysis: Dict, development_instruction: str) -> List[Dict]:
        """HTMLËß£Êûê„ÉªÈñãÁô∫ÊåáÁ§∫Êõ∏„Åã„ÇâÊ±éÁî®Hooks190Á®ÆÈ°ûËá™ÂãïÈÅ∏ÂÆö"""
        
        selected_hooks = []
        instruction_lower = development_instruction.lower()
        
        # 190Á®ÆÈ°û„ÅÆÊ±éÁî®Hooks„Åã„ÇâÊúÄÈÅ©ÈÅ∏ÂÆö
        for hook_id, hook_data in self.hooks_database.items():
            selection_score = 0
            
            # „Ç≠„Éº„ÉØ„Éº„Éâ„Éû„ÉÉ„ÉÅ„É≥„Ç∞ÔºàÈáçË¶ÅÂ∫¶Ôºö40ÁÇπÔºâ
            keyword_matches = 0
            for keyword in hook_data['auto_selection_keywords']:
                if keyword.lower() in instruction_lower:
                    keyword_matches += 1
            selection_score += min(keyword_matches * 8, 40)
            
            # HTMLË¶ÅÁ¥†ÈÅ©ÂêàÊÄßÔºàÈáçË¶ÅÂ∫¶Ôºö30ÁÇπÔºâ
            category = hook_data.get('category', '')
            
            if 'css' in category:
                # CSSÈñ¢ÈÄ£Ôºö„Ç§„É≥„É©„Ç§„É≥„Çπ„Çø„Ç§„É´„Éª„Éá„Ç∂„Ç§„É≥Ë¶ÅÁ¥†Ê§úÂá∫
                if 'style=' in str(html_analysis):
                    selection_score += 25
                if len(html_analysis.get('forms', [])) > 0:
                    selection_score += 10
                    
            elif 'test' in category:
                # „ÉÜ„Çπ„ÉàÈñ¢ÈÄ£Ôºö„Ç∑„Çπ„ÉÜ„É†Ë§áÈõëÂ∫¶„ÅßÈáçË¶ÅÂ∫¶Âà§ÂÆö
                total_elements = (len(html_analysis.get('buttons', [])) + 
                                len(html_analysis.get('forms', [])) + 
                                len(html_analysis.get('inputs', [])))
                if total_elements > 5:
                    selection_score += 30
                elif total_elements > 2:
                    selection_score += 20
                    
            elif 'ai' in category:
                # AIÈñ¢ÈÄ£ÔºöAIÈñ¢ÈÄ£Ë¶ÅÁ¥†„Éª„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÂá∫
                ai_elements = [btn for btn in html_analysis.get('buttons', []) 
                             if any(kw in btn.get('text', '').lower() 
                                   for kw in ['ai', 'Ëá™Âãï', 'auto', 'ÂàÜÊûê', '‰∫àÊ∏¨'])]
                if ai_elements:
                    selection_score += 30
                if any(kw in instruction_lower for kw in ['ai', 'Ê©üÊ¢∞Â≠¶Áøí', 'Ëá™ÂãïÂåñ']):
                    selection_score += 20
                    
            elif 'performance' in category:
                # „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÈñ¢ÈÄ£ÔºöÂ§ßË¶èÊ®°„Ç∑„Çπ„ÉÜ„É†„ÉªÈÄüÂ∫¶Ë¶ÅÊ±ÇÊ§úÂá∫
                if len(html_analysis.get('buttons', [])) > 3:
                    selection_score += 20
                if any(kw in instruction_lower for kw in ['ÈÄüÂ∫¶', 'ÊúÄÈÅ©Âåñ', 'performance', 'È´òÈÄü']):
                    selection_score += 25
                    
            elif 'security' in category:
                # „Çª„Ç≠„É•„É™„ÉÜ„Ç£Èñ¢ÈÄ£Ôºö„Éï„Ç©„Éº„É†„ÉªË™çË®ºË¶ÅÁ¥†Ê§úÂá∫
                if len(html_analysis.get('forms', [])) > 0:
                    selection_score += 25
                if any(kw in instruction_lower for kw in ['„Çª„Ç≠„É•„É™„ÉÜ„Ç£', 'Ë™çË®º', 'login', 'auth']):
                    selection_score += 20
                    
            elif 'ajax' in category:
                # AjaxÈñ¢ÈÄ£Ôºö„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñË¶ÅÁ¥†Ê§úÂá∫
                if len(html_analysis.get('buttons', [])) > 1:
                    selection_score += 20
                if any(kw in instruction_lower for kw in ['ajax', 'ÈùûÂêåÊúü', 'api']):
                    selection_score += 25
            
            # „Éï„Çß„Éº„Ç∫ÈÅ©ÂêàÊÄßÔºàÈáçË¶ÅÂ∫¶Ôºö20ÁÇπÔºâ
            phase_targets = hook_data.get('phase_target', [])
            if 1 in phase_targets or 2 in phase_targets:  # Âü∫Áõ§ÊßãÁØâ„Éï„Çß„Éº„Ç∫
                selection_score += 15
            elif 3 in phase_targets or 4 in phase_targets:  # È´òÂ∫¶Ê©üËÉΩ„Éï„Çß„Éº„Ç∫
                selection_score += 10
            
            # ÂÑ™ÂÖàÂ∫¶„Éú„Éº„Éä„ÇπÔºàÈáçË¶ÅÂ∫¶Ôºö10ÁÇπÔºâ
            priority = hook_data.get('priority', 'medium')
            if priority == 'critical':
                selection_score += 10
            elif priority == 'high':
                selection_score += 7
            elif priority == 'medium':
                selection_score += 4
            
            # ÈÅ∏ÂÆöÂü∫Ê∫ñÔºàPhase„ÉªÂÑ™ÂÖàÂ∫¶ÈÅ©ÂøúÔºâ
            min_threshold = 25  # Âü∫Êú¨ÈñæÂÄ§
            if priority == 'critical':
                min_threshold = 15  # CriticalÂÑ™ÂÖàÂ∫¶„ÅØ‰Ωé„ÅÑÈñæÂÄ§
            elif priority == 'high':
                min_threshold = 20
            
            if selection_score >= min_threshold:
                selected_hooks.append({
                    'hook_id': hook_id,
                    'hook_data': hook_data,
                    'selection_score': selection_score,
                    'auto_selected': True,
                    'universal_hook': True,
                    'hook_number': hook_data.get('hook_id', 0),
                    'category': hook_data.get('category', ''),
                    'priority': priority
                })
        
        # „Çπ„Ç≥„Ç¢È†Ü„ÇΩ„Éº„ÉàÔºà‰∏ä‰Ωç30ÂÄãÁ®ãÂ∫¶„Å´Áµû„ÇãÔºâ
        selected_hooks = sorted(selected_hooks, key=lambda x: x['selection_score'], reverse=True)
        
        # PhaseÂà•ÂàÜÊï£ÈÅ∏ÂÆöÔºàÂêÑPhase„Åã„ÇâÈÅ©Âàá„Å´ÈÅ∏ÂÆöÔºâ
        final_selection = self._balance_phase_selection(selected_hooks[:50])
        
        print(f"üìä Ê±éÁî®HooksËá™ÂãïÈÅ∏ÂÆöÂÆå‰∫Ü: {len(final_selection)}ÂÄãÔºà190Á®ÆÈ°û„Åã„ÇâÈÅ∏ÂÆöÔºâ")
        return final_selection
    
    def _balance_phase_selection(self, candidate_hooks: List[Dict]) -> List[Dict]:
        """PhaseÂà•„Éê„É©„É≥„ÇπÈÅ∏ÂÆö"""
        
        phase_distribution = {1: [], 2: [], 3: [], 4: []}
        
        # PhaseÂà•ÂàÜÈ°û
        for hook in candidate_hooks:
            phase_targets = hook['hook_data'].get('phase_target', [3])
            primary_phase = phase_targets[0] if phase_targets else 3
            if primary_phase in phase_distribution:
                phase_distribution[primary_phase].append(hook)
        
        # ÂêÑPhase„Åã„ÇâÈÅ©ÂàáÊï∞ÈÅ∏ÂÆö
        balanced_selection = []
        phase_limits = {1: 8, 2: 8, 3: 10, 4: 6}  # ÂêàË®à32ÂÄãÁ®ãÂ∫¶
        
        for phase, limit in phase_limits.items():
            phase_hooks = sorted(phase_distribution[phase], 
                               key=lambda x: x['selection_score'], reverse=True)
            balanced_selection.extend(phase_hooks[:limit])
        
        return balanced_selection
```

---

## üîÑ **Phase 2: ÂãïÁöÑHTMLËß£Êûê„Ç®„É≥„Ç∏„É≥**

### **üéØ HTMLË¶ÅÁ¥†ÂÆåÂÖ®Ëß£Êûê„Ç∑„Çπ„ÉÜ„É†**

```python
class DynamicHTMLAnalyzer:
    """HTMLË¶ÅÁ¥†Êï∞„ÉªÂÜÖÂÆπÂÆåÂÖ®ÈÅ©ÂøúËß£Êûê„Ç∑„Çπ„ÉÜ„É†"""
    
    def analyze_html_completely(self, html_content: str) -> Dict[str, Any]:
        """HTMLË¶ÅÁ¥†„ÅÆÂÆåÂÖ®Ëß£ÊûêÔºàÂãïÁöÑÂØæÂøúÔºâ"""
        
        analysis_result = {
            'elements_count': self._count_all_elements(html_content),
            'function_inference': self._infer_functions(html_content),
            'complexity_assessment': self._assess_complexity(html_content),
            'ui_patterns': self._detect_ui_patterns(html_content),
            'interaction_flow': self._analyze_interaction_flow(html_content),
            'accessibility_check': self._check_accessibility(html_content)
        }
        
        return analysis_result
    
    def _count_all_elements(self, html_content: str) -> Dict[str, Any]:
        """ÂÖ®Ë¶ÅÁ¥†„ÅÆË©≥Á¥∞„Ç´„Ç¶„É≥„Éà„ÉªÂàÜÊûê"""
        
        elements_count = {
            'buttons': {
                'count': len(re.findall(r'<button|<input[^>]*type=["\']button', html_content)),
                'details': self._extract_button_details(html_content),
                'interaction_complexity': 'simple'  # simple/medium/complex
            },
            'forms': {
                'count': len(re.findall(r'<form', html_content)),
                'details': self._extract_form_details(html_content),
                'validation_complexity': 'basic'
            },
            'inputs': {
                'count': len(re.findall(r'<input', html_content)),
                'types': self._categorize_input_types(html_content),
                'data_flow_complexity': 'linear'
            },
            'tables': {
                'count': len(re.findall(r'<table', html_content)),
                'data_complexity': self._analyze_table_complexity(html_content)
            },
            'dynamic_areas': {
                'count': len(re.findall(r'id=["\'][^"\']*result[^"\']*["\']', html_content)),
                'update_patterns': self._detect_update_patterns(html_content)
            }
        }
        
        # Ë§áÈõëÂ∫¶Ë©ï‰æ°
        total_interactive = (elements_count['buttons']['count'] + 
                           elements_count['forms']['count'] + 
                           elements_count['inputs']['count'])
        
        if total_interactive > 10:
            elements_count['overall_complexity'] = 'high'
        elif total_interactive > 5:
            elements_count['overall_complexity'] = 'medium'
        else:
            elements_count['overall_complexity'] = 'simple'
            
        return elements_count
    
    def _extract_button_details(self, html_content: str) -> List[Dict]:
        """„Éú„Çø„É≥Ë©≥Á¥∞ÊÉÖÂ†±ÊäΩÂá∫"""
        
        button_details = []
        button_patterns = [
            r'<button[^>]*>(.*?)</button>',
            r'<input[^>]*type=["\']button["\'][^>]*>'
        ]
        
        for pattern in button_patterns:
            matches = re.finditer(pattern, html_content, re.DOTALL)
            for match in matches:
                button_info = {
                    'text': self._extract_button_text(match.group(0)),
                    'onclick': self._extract_onclick(match.group(0)),
                    'id': self._extract_id(match.group(0)),
                    'class': self._extract_class(match.group(0)),
                    'function_type': self._infer_button_function(match.group(0)),
                    'target_elements': self._find_target_elements(match.group(0), html_content)
                }
                button_details.append(button_info)
        
        return button_details
    
    def _infer_functions(self, html_content: str) -> Dict[str, Any]:
        """Ê©üËÉΩÊé®Ê∏¨„Ç®„É≥„Ç∏„É≥ÔºàÈ´òÁ≤æÂ∫¶Ôºâ"""
        
        function_patterns = {
            'data_management': {
                'keywords': ['ÁôªÈå≤', 'Á∑®ÈõÜ', 'ÂâäÈô§', '‰∏ÄË¶ß', '‰øùÂ≠ò', 'save', 'edit', 'delete', 'list'],
                'html_indicators': ['form', 'table', 'input[type="text"]'],
                'confidence': 0,
                'detected_functions': []
            },
            'calculation': {
                'keywords': ['Ë®àÁÆó', 'ÂêàË®à', 'ÈõÜË®à', 'Áµ±Ë®à', 'calculate', 'sum', 'total'],
                'html_indicators': ['input[type="number"]', 'onclick.*calc', 'math'],
                'confidence': 0,
                'detected_functions': []
            },
            'ai_integration': {
                'keywords': ['AI', 'Ê©üÊ¢∞Â≠¶Áøí', 'Ëá™Âãï', '‰∫àÊ∏¨', 'ÂàÜÈ°û', 'ai', 'auto', 'predict'],
                'html_indicators': ['ai', 'predict', 'auto', 'learning'],
                'confidence': 0,
                'detected_functions': []
            },
            'file_processing': {
                'keywords': ['„Éï„Ç°„Ç§„É´', 'CSV', '„Ç§„É≥„Éù„Éº„Éà', '„Ç®„ÇØ„Çπ„Éù„Éº„Éà', 'file', 'import', 'export'],
                'html_indicators': ['input[type="file"]', 'upload', 'download'],
                'confidence': 0,
                'detected_functions': []
            },
            'reporting': {
                'keywords': ['„É¨„Éù„Éº„Éà', 'Âá∫Âäõ', 'PDF', 'report', 'output', 'print'],
                'html_indicators': ['report', 'export', 'print', 'pdf'],
                'confidence': 0,
                'detected_functions': []
            }
        }
        
        # È´òÁ≤æÂ∫¶Ê©üËÉΩÊé®Ê∏¨
        for category, pattern in function_patterns.items():
            # „Ç≠„Éº„ÉØ„Éº„Éâ„Éû„ÉÉ„ÉÅ„É≥„Ç∞
            keyword_matches = sum(1 for kw in pattern['keywords'] 
                                if kw.lower() in html_content.lower())
            
            # HTMLË¶ÅÁ¥†„Éû„ÉÉ„ÉÅ„É≥„Ç∞  
            html_matches = sum(1 for indicator in pattern['html_indicators']
                             if indicator.lower() in html_content.lower())
            
            # ‰ø°È†ºÂ∫¶Ë®àÁÆó
            total_indicators = len(pattern['keywords']) + len(pattern['html_indicators'])
            pattern['confidence'] = (keyword_matches + html_matches) / total_indicators
            
            # Ê§úÂá∫„Åï„Çå„ÅüÂÖ∑‰ΩìÁöÑÊ©üËÉΩ
            if pattern['confidence'] > 0.3:
                pattern['detected_functions'] = self._extract_specific_functions(
                    category, html_content
                )
        
        return function_patterns
```

---

## ü§ñ **Phase 3: ÈÅ©ÂøúÁöÑË≥™ÂïèÁîüÊàê„Ç∑„Çπ„ÉÜ„É†**

### **üéØ Ë¶ÅÁ¥†Êï∞ÂÆåÂÖ®ÈÅ©ÂøúË≥™Âïè„Ç®„É≥„Ç∏„É≥**

```python
class AdaptiveQuestionGenerator:
    """HTMLË¶ÅÁ¥†Êï∞„ÉªÂÜÖÂÆπ„Å´ÂÆåÂÖ®ÈÅ©Âøú„Åó„ÅüÂãïÁöÑË≥™ÂïèÁîüÊàê"""
    
    def generate_adaptive_hooks(self, 
                               html_analysis: Dict, 
                               development_instruction: str) -> List[Dict]:
        """ÈÅ©ÂøúÁöÑÂ∞ÇÁî®HooksÁîüÊàê"""
        
        adaptive_hooks = []
        
        # „Éú„Çø„É≥Êï∞ÈÅ©ÂøúË≥™Âïè
        button_hooks = self._generate_button_adaptive_hooks(
            html_analysis['elements_count']['buttons']
        )
        adaptive_hooks.extend(button_hooks)
        
        # „Éï„Ç©„Éº„É†ÈÅ©ÂøúË≥™Âïè
        form_hooks = self._generate_form_adaptive_hooks(
            html_analysis['elements_count']['forms']
        )
        adaptive_hooks.extend(form_hooks)
        
        # Ê©üËÉΩÊé®Ê∏¨ÈÅ©ÂøúË≥™Âïè
        function_hooks = self._generate_function_adaptive_hooks(
            html_analysis['function_inference']
        )
        adaptive_hooks.extend(function_hooks)
        
        # AIÈñ¢ÈÄ£ÈÅ©ÂøúË≥™ÂïèÔºàÂæ©Ê¥ªÁâàÔºâ
        ai_hooks = self._generate_ai_adaptive_hooks(
            html_analysis, development_instruction
        )
        adaptive_hooks.extend(ai_hooks)
        
        return adaptive_hooks
    
    def _generate_button_adaptive_hooks(self, button_data: Dict) -> List[Dict]:
        """„Éú„Çø„É≥Êï∞„ÉªÂÜÖÂÆπÂÆåÂÖ®ÈÅ©ÂøúË≥™ÂïèÁîüÊàê"""
        
        button_count = button_data['count']
        button_details = button_data['details']
        
        if button_count == 0:
            return [{
                'hook_type': 'no_button_system',
                'phase_target': [5],
                'questions': [
                    '„Åì„ÅÆ„Ç∑„Çπ„ÉÜ„É†„Å´„Éú„Çø„É≥Ê©üËÉΩ„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„Åå„ÄÅÂ∞ÜÊù•ÁöÑ„Å´„Éú„Çø„É≥ËøΩÂä†„ÅÆ‰∫àÂÆö„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü',
                    '„É¶„Éº„Ç∂„Éº„Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥„ÅØ„Å©„ÅÆ„Çà„ÅÜ„Å™ÊñπÊ≥ï„ÅßÂÆüÁèæ„Åó„Åæ„Åô„ÅãÔºü',
                    'ÈùôÁöÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆ„Åø„ÅßË¶Å‰ª∂„ÇíÊ∫Ä„Åü„Åô„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÅãÔºü'
                ],
                'implementation_focus': 'static_content_optimization'
            }]
        
        elif button_count == 1:
            button = button_details[0]
            return [{
                'hook_type': 'single_button_specialized',
                'phase_target': [5, 6],
                'button_info': button,
                'questions': [
                    f'Ê§úÂá∫„Åï„Çå„Åü1ÂÄã„ÅÆ„Éú„Çø„É≥„Äå{button["text"]}„Äç„ÅÆÂÖ∑‰ΩìÁöÑ„Å™Âá¶ÁêÜÂÜÖÂÆπ„ÅØÔºü',
                    f'„Åì„ÅÆ„Éú„Çø„É≥„ÅÆÂ§±ÊïóÊôÇ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞ÊñπÊ≥ï„ÅØÔºü',
                    f'Âá¶ÁêÜÂÆå‰∫ÜÊôÇ„ÅÆ„É¶„Éº„Ç∂„Éº„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÊñπÊ≥ï„ÅØÔºü',
                    f'„Åì„ÅÆ„Éú„Çø„É≥„ÅÆÂá¶ÁêÜÊôÇÈñì„ÅåÈï∑„ÅÑÂ†¥Âêà„ÅÆÂØæÂøúÊñπÊ≥ï„ÅØÔºü',
                    f'„Éú„Çø„É≥Êäº‰∏ãÂæå„ÅÆÁîªÈù¢Áä∂ÊÖãÁÆ°ÁêÜÊñπÊ≥ï„ÅØÔºü'
                ],
                'implementation_focus': 'single_button_perfection',
                'error_handling_priority': 'high'
            }]
        
        elif 2 <= button_count <= 5:
            button_list = [btn['text'] for btn in button_details]
            return [{
                'hook_type': 'multi_button_coordinated',
                'phase_target': [5, 6, 7],
                'button_count': button_count,
                'button_details': button_details,
                'questions': [
                    f'Ê§úÂá∫„Åï„Çå„Åü{button_count}ÂÄã„ÅÆ„Éú„Çø„É≥Ôºà{", ".join(button_list)}Ôºâ„ÅÆÂÆüË°åÈ†ÜÂ∫è„Éª‰æùÂ≠òÈñ¢‰øÇ„ÅØÔºü',
                    f'„Åì„Çå„Çâ„ÅÆ„Éú„Çø„É≥Èñì„Åß„ÅÆ„Éá„Éº„ÇøÈÄ£Êê∫„ÉªÂÖ±ÊúâÊñπÊ≥ï„ÅØÔºü',
                    f'Ë§áÊï∞„Éú„Çø„É≥„ÅÆÂêåÊôÇÊäº‰∏ãÈò≤Ê≠¢„ÉªÊéí‰ªñÂà∂Âæ°„ÅØÂøÖË¶Å„Åß„Åô„ÅãÔºü',
                    f'„Éú„Çø„É≥Èñì„ÅÆÂá¶ÁêÜÁµêÊûú„ÅÆÂºï„ÅçÁ∂ô„ÅéÊñπÊ≥ï„ÅØÔºü',
                    f'„Ç®„É©„ÉºÁô∫ÁîüÊôÇ„ÅÆ‰ªñ„Éú„Çø„É≥„Å∏„ÅÆÂΩ±ÈüøÁØÑÂõ≤„ÅØÔºü'
                ] + [f'„Äå{btn["text"]}„Äç„Éú„Çø„É≥„ÅÆË©≥Á¥∞Âá¶ÁêÜ„Éï„É≠„Éº„ÅØÔºü' for btn in button_details],
                'implementation_focus': 'coordinated_button_system',
                'coordination_priority': 'critical'
            }]
        
        elif 6 <= button_count <= 10:
            primary_buttons = button_details[:3]
            return [{
                'hook_type': 'complex_button_management',
                'phase_target': [5, 6, 7, 8],
                'button_count': button_count,
                'complexity_level': 'high',
                'questions': [
                    f'Â§öÊï∞Ôºà{button_count}ÂÄãÔºâ„ÅÆ„Éú„Çø„É≥„Ç∑„Çπ„ÉÜ„É†„Åß„Åô„ÄÇ‰∏ªË¶ÅÊ©üËÉΩ„ÅÆÂÑ™ÂÖàÈ†Ü‰Ωç„ÅØÔºü',
                    f'„Éú„Çø„É≥„ÅÆ„Ç∞„É´„Éº„ÉóÂåñ„Éª„Ç´„ÉÜ„Ç¥„É™ÂàÜ„Åë„É´„Éº„É´„ÅØÔºü',
                    f'„Éú„Çø„É≥„ÅÆÂãïÁöÑË°®Á§∫„ÉªÈùûË°®Á§∫Âà∂Âæ°„É≠„Ç∏„ÉÉ„ÇØ„ÅØÔºü',
                    f'„Éú„Çø„É≥Áä∂ÊÖãÁÆ°ÁêÜÔºàÊúâÂäπ/ÁÑ°Âäπ/Âá¶ÁêÜ‰∏≠Ôºâ„ÅÆÊñπÈáù„ÅØÔºü',
                    f'Â§ßÈáè„Éú„Çø„É≥„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©ÂåñÊñπÊ≥ï„ÅØÔºü',
                    f'„Éú„Çø„É≥Êìç‰Ωú„ÅÆÂ±•Ê≠¥„Éª„É≠„Ç∞ÁÆ°ÁêÜ„ÅØÂøÖË¶Å„Åß„Åô„ÅãÔºü'
                ] + [f'‰∏ªË¶Å„Éú„Çø„É≥„Äå{btn["text"]}„Äç„ÅÆÂá¶ÁêÜÂÑ™ÂÖàÂ∫¶„ÉªÂÆüË£ÖË©≥Á¥∞„ÅØÔºü' for btn in primary_buttons],
                'implementation_focus': 'enterprise_button_architecture',
                'performance_priority': 'critical'
            }]
        
        else:  # button_count > 10
            return [{
                'hook_type': 'enterprise_button_system',
                'phase_target': [5, 6, 7, 8, 9],
                'button_count': button_count,
                'complexity_level': 'enterprise',
                'questions': [
                    f'Â§ßË¶èÊ®°Ôºà{button_count}ÂÄãÔºâ„Éú„Çø„É≥„Ç∑„Çπ„ÉÜ„É†„Åß„Åô„ÄÇ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£Ë®≠Ë®àÊñπÈáù„ÅØÔºü',
                    f'„Éú„Çø„É≥„ÅÆÈöéÂ±§ÁÆ°ÁêÜ„ÉªÊ®©ÈôêÂà∂Âæ°„Ç∑„Çπ„ÉÜ„É†„ÅØÔºü',
                    f'„Éú„Çø„É≥Ê©üËÉΩ„ÅÆÂãïÁöÑ„É≠„Éº„Éá„Ç£„É≥„Ç∞„ÉªÈÅÖÂª∂ÂÆüË°å„ÅØÔºü',
                    f'„Éú„Çø„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Çπ„Ç±„Éº„É©„Éì„É™„ÉÜ„Ç£ÂØæÂøú„ÅØÔºü',
                    f'„Éú„Çø„É≥Êìç‰Ωú„ÅÆÁõ£Êüª„Éª„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂØæÁ≠ñ„ÅØÔºü',
                    f'„Éú„Çø„É≥„Ç∑„Çπ„ÉÜ„É†„ÅÆÈÅãÁî®„ÉªÁõ£Ë¶ñÊñπÊ≥ï„ÅØÔºü',
                    f'„Éú„Çø„É≥Ê©üËÉΩ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Éª„Éá„Éó„É≠„Ç§ÊñπÊ≥ï„ÅØÔºü'
                ],
                'implementation_focus': 'scalable_enterprise_architecture',
                'architecture_priority': 'critical',
                'requires_advanced_patterns': True
            }]
    
    def _generate_function_adaptive_hooks(self, function_inference: Dict) -> List[Dict]:
        """Ê©üËÉΩÊé®Ê∏¨ÁµêÊûú„Å´Âü∫„Å•„ÅèÈÅ©ÂøúÁöÑË≥™ÂïèÁîüÊàê"""
        
        function_hooks = []
        
        for category, function_data in function_inference.items():
            confidence = function_data['confidence']
            
            if confidence > 0.7:  # È´ò‰ø°È†ºÂ∫¶Ê©üËÉΩ
                if category == 'data_management':
                    function_hooks.append({
                        'hook_type': 'data_management_specialized',
                        'phase_target': [2, 3, 4],
                        'confidence': confidence,
                        'questions': [
                            f'„Éá„Éº„ÇøÁÆ°ÁêÜÊ©üËÉΩÔºà‰ø°È†ºÂ∫¶{confidence:.1%}Ôºâ„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü„ÄÇ‰∏ª„Å™„Éá„Éº„ÇøÊìç‰Ωú„ÅØÔºü',
                            '„Éá„Éº„Çø„ÅÆ‰∏ÄÊÑèÊÄßÂà∂Á¥Ñ„ÉªÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ„É´„Éº„É´„ÅØÔºü',
                            '„Éá„Éº„ÇøÂâäÈô§ÊôÇ„ÅÆÁ¢∫Ë™ç„ÉªÂæ©ÂÖÉÊ©üËÉΩ„ÅØÂøÖË¶Å„Åß„Åô„ÅãÔºü',
                            '„Éá„Éº„Çø„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÉªÂ±•Ê≠¥ÁÆ°ÁêÜÊñπÈáù„ÅØÔºü',
                            '„Éá„Éº„ÇøÊï¥ÂêàÊÄß„ÉÅ„Çß„ÉÉ„ÇØ„ÉªÊ§úË®ºÊ©üËÉΩ„ÅØÔºü',
                            '„Éá„Éº„ÇøÁßªË°å„Éª„É°„É≥„ÉÜ„Éä„É≥„ÇπÊ©üËÉΩ„ÅØÔºü'
                        ],
                        'implementation_focus': 'robust_data_management'
                    })
                
                elif category == 'ai_integration':
                    function_hooks.append({
                        'hook_type': 'ai_integration_specialized',
                        'phase_target': [1, 2, 3, 4],
                        'confidence': confidence,
                        'questions': [
                            f'AIÁµ±ÂêàÊ©üËÉΩÔºà‰ø°È†ºÂ∫¶{confidence:.1%}Ôºâ„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü„ÄÇ‰ΩøÁî®„Åô„ÇãAI„ÉÑ„Éº„É´„ÅØÔºü',
                            '„ÉªDEEPSEEKÔºà„Ç≥„Éº„ÉâÁîüÊàêÁâπÂåñ„ÉªÈ´òÈÄüÔºâ',
                            '„ÉªOllamaÔºàÂ§ö„É¢„Éá„É´ÂØæÂøú„Éª„É≠„Éº„Ç´„É´Ôºâ',
                            '„ÉªOpenAI APIÔºàÈ´òÁ≤æÂ∫¶„Éª„ÇØ„É©„Ç¶„ÉâÔºâ',
                            '„Éª„Ç´„Çπ„Çø„É†„É¢„Éá„É´ÔºàÁã¨Ëá™Â≠¶Áøí„ÉªÂ∞ÇÁî®Ôºâ',
                            '„ÉªÊ∑∑Âêà„Ç∑„Çπ„ÉÜ„É†ÔºàÁî®ÈÄîÂà•‰Ωø„ÅÑÂàÜ„ÅëÔºâ',
                            '',
                            'AIÂ≠¶Áøí„Éá„Éº„Çø„ÅÆÂèñÂæóÂÖÉ„ÉªÊõ¥Êñ∞È†ªÂ∫¶„ÅØÔºü',
                            'AIÊé®Ë´ñÁµêÊûú„ÅÆ‰ø°È†ºÂ∫¶Ë°®Á§∫„ÉªË™¨ÊòéÊ©üËÉΩ„ÅØÔºü',
                            'AIÂá¶ÁêÜÂ§±ÊïóÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üËÉΩ„ÅØÔºü',
                            'AIÂ≠¶Áøí„É¢„Éá„É´„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜÊñπÊ≥ï„ÅØÔºü',
                            'AIÂá¶ÁêÜ„ÅÆÁõ£Êüª„Éª„É≠„Ç∞Ë®òÈå≤ÊñπÊ≥ï„ÅØÔºü'
                        ],
                        'implementation_focus': 'comprehensive_ai_integration',
                        'ai_system_priority': 'critical'
                    })
        
        return function_hooks
    
    def _generate_ai_adaptive_hooks(self, 
                                   html_analysis: Dict, 
                                   development_instruction: str) -> List[Dict]:
        """AIÈñ¢ÈÄ£ÈÅ©ÂøúË≥™ÂïèÔºàÂæ©Ê¥ªÁâàÔºâ"""
        
        ai_hooks = []
        
        # AIÈñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÂá∫
        ai_keywords = ['ai', 'artificial intelligence', '‰∫∫Â∑•Áü•ËÉΩ', 'Ê©üÊ¢∞Â≠¶Áøí', 
                      'machine learning', 'Ëá™Âãï', 'auto', 'deepseek', 'ollama']
        
        instruction_lower = development_instruction.lower()
        ai_detected = any(keyword in instruction_lower for keyword in ai_keywords)
        
        # AI„Éú„Çø„É≥Ê§úÂá∫
        ai_buttons = []
        for button in html_analysis['elements_count']['buttons']['details']:
            button_text = button.get('text', '').lower()
            if any(keyword in button_text for keyword in ai_keywords):
                ai_buttons.append(button)
        
        if ai_detected or ai_buttons:
            ai_hooks.append({
                'hook_type': 'ai_operation_system_restored',
                'phase_target': [0, 1, 2, 3, 4],
                'priority': 'critical',
                'ai_buttons_detected': ai_buttons,
                'questions': [
                    '=== AIÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆöÔºàÂæ©Ê¥ªÁâàÔºâ ===',
                    '',
                    'ü§ñ ‰ΩøÁî®„Åô„ÇãAI„ÉÑ„Éº„É´„ÅÆÈÅ∏ÊäûÔºö',
                    '„ÉªDEEPSEEKÔºà„Ç≥„Éº„ÉâÁîüÊàê„Éª„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞ÁâπÂåñÔºâ',
                    '„ÉªOllamaÔºà„É≠„Éº„Ç´„É´ÂÆüË°å„Éª„Éó„É©„Ç§„Éê„Ç∑„ÉºÈáçË¶ñÔºâ',
                    '„ÉªOpenAI APIÔºàÈ´òÁ≤æÂ∫¶„ÉªÂ§öÊ©üËÉΩ„Éª„ÇØ„É©„Ç¶„ÉâÔºâ',
                    '„ÉªTransformersÔºà„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„ÉªÁã¨Ëá™Â≠¶ÁøíÔºâ',
                    '„ÉªÊ∑∑Âêà„Ç∑„Çπ„ÉÜ„É†ÔºàÁî®ÈÄîÂà•ÊúÄÈÅ©ÂåñÔºâ',
                    '',
                    'üìä Â≠¶Áøí„Éá„Éº„ÇøÁÆ°ÁêÜÔºö',
                    '„Éª„Éá„Éº„Çø„ÇΩ„Éº„ÇπÔºöPostgreSQL/CSV/API/ÊâãÂãïÂÖ•Âäõ',
                    '„Éª„Éá„Éº„ÇøÂìÅË≥™ÔºöÂâçÂá¶ÁêÜ„Éª„ÇØ„É™„Éº„Éã„É≥„Ç∞„ÉªÊ§úË®º',
                    '„Éª„Éá„Éº„ÇøÊõ¥Êñ∞Ôºö„É™„Ç¢„É´„Çø„Ç§„É†/„Éê„ÉÉ„ÉÅ/ÊâãÂãï',
                    '„Éª„Éá„Éº„Çø‰øùË≠∑ÔºöÊöóÂè∑Âåñ„Éª„Ç¢„ÇØ„Çª„ÇπÂà∂Âæ°„ÉªÁõ£Êüª',
                    '',
                    '‚öôÔ∏è AIÂÆüË°åÂà∂Âæ°Ôºö',
                    '„ÉªÂÆüË°åÊñπÊ≥ïÔºö„É™„Ç¢„É´„Çø„Ç§„É†/„Çπ„Ç±„Ç∏„É•„Éº„É´/ÊâãÂãï/API',
                    '„Éª„É™„ÇΩ„Éº„ÇπÂà∂ÈôêÔºöGPU/CPU/„É°„É¢„É™/ÊôÇÈñì',
                    '„ÉªÂ§±ÊïóÂØæÂøúÔºö„É™„Éà„É©„Ç§/„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ/„Ç®„É©„ÉºÈÄöÁü•',
                    '„ÉªÁµêÊûúÊ§úË®ºÔºöÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØ„Éª‰ø°È†ºÂ∫¶Ë©ï‰æ°',
                    '',
                    'üîç AIÊìç‰ΩúÊôÇËá™ÂãïË≥™Âïè„Ç∑„Çπ„ÉÜ„É†Ôºö',
                    'AI„Éú„Çø„É≥Êäº‰∏ãÊôÇ„Å´Ëá™ÂãïÁöÑ„Å´Ë©≥Á¥∞Ë®≠ÂÆö„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô„ÅãÔºü',
                    'AIÂ≠¶Áøí„Éë„É©„É°„Éº„Çø„ÅÆÂãïÁöÑË™øÊï¥Ê©üËÉΩ„ÅØÂøÖË¶Å„Åß„Åô„ÅãÔºü',
                    'AIÂá¶ÁêÜÁµêÊûú„ÅÆË™¨Êòé„ÉªÊ†πÊã†Ë°®Á§∫Ê©üËÉΩ„ÅØÂøÖË¶Å„Åß„Åô„ÅãÔºü'
                ],
                'implementation_focus': 'comprehensive_ai_restoration',
                'error_prevention': [15, 31],  # Python APIÈÄ£Êê∫„Ç®„É©„Éº„ÄÅAIÂ≠¶ÁøíÁ≤æÂ∫¶„Ç®„É©„Éº
                'ai_integration_priority': 'critical'
            })
        
        return ai_hooks
```

---

## üîó **Phase 4: Áµ±Âêà„Ç∑„Çπ„ÉÜ„É†**

### **üéØ Ê±éÁî®„ÉªÂ∞ÇÁî®„ÉªAI HooksÂÆåÂÖ®Áµ±Âêà**

```python
class HooksIntegrator:
    """ÂÖ®HooksÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†"""
    
    def integrate_all_hooks(self, 
                           universal_hooks: List[Dict],
                           specific_hooks: List[Dict],
                           ai_hooks: List[Dict]) -> Dict[str, Any]:
        """ÂÖ®HooksÁµ±Âêà„Éª„Éï„Çß„Éº„Ç∫Âà•ÈÖçÁΩÆ"""
        
        integrated_system = {
            'phase_0': {'universal': [], 'specific': [], 'ai': [], 'questions': []},
            'phase_1': {'universal': [], 'specific': [], 'ai': [], 'questions': []},
            'phase_2': {'universal': [], 'specific': [], 'ai': [], 'questions': []},
            'phase_3': {'universal': [], 'specific': [], 'ai': [], 'questions': []},
            'phase_4': {'universal': [], 'specific': [], 'ai': [], 'questions': []},
            'phase_5_plus': {'universal': [], 'specific': [], 'ai': [], 'questions': []},
            'execution_schedule': {},
            'quality_metrics': {},
            'integration_summary': {}
        }
        
        # „Éï„Çß„Éº„Ç∫Âà•ÈÖçÁΩÆ
        self._distribute_hooks_by_phase(integrated_system, universal_hooks, 'universal')
        self._distribute_hooks_by_phase(integrated_system, specific_hooks, 'specific')
        self._distribute_hooks_by_phase(integrated_system, ai_hooks, 'ai')
        
        # Áµ±ÂêàË≥™ÂïèÁîüÊàê
        self._generate_integrated_questions(integrated_system)
        
        # ÂÆüË°å„Çπ„Ç±„Ç∏„É•„Éº„É´ÁîüÊàê
        integrated_system['execution_schedule'] = self._create_execution_schedule(integrated_system)
        
        return integrated_system
    
    def _generate_integrated_questions(self, integrated_system: Dict):
        """Áµ±ÂêàË≥™ÂïèÁîüÊàê"""
        
        for phase_key, phase_data in integrated_system.items():
            if phase_key.startswith('phase_'):
                questions = []
                
                # „Éï„Çß„Éº„Ç∫ÈñãÂßãË≥™Âïè
                phase_number = phase_key.split('_')[1]
                total_hooks = (len(phase_data['universal']) + 
                             len(phase_data['specific']) + 
                             len(phase_data['ai']))
                
                if total_hooks > 0:
                    questions.append(f"=== Phase {phase_number} ÈñãÂßãÁ¢∫Ë™ç ===")
                    questions.append(f"Ê±éÁî®Hooks: {len(phase_data['universal'])}ÂÄã")
                    questions.append(f"Â∞ÇÁî®Hooks: {len(phase_data['specific'])}ÂÄã")  
                    questions.append(f"AI Hooks: {len(phase_data['ai'])}ÂÄã")
                    questions.append(f"ÂêàË®à: {total_hooks}ÂÄã„ÅÆHooks„ÇíÂÆüË°å„Åó„Åæ„Åô„ÄÇÊ∫ñÂÇô„ÅØÂÆå‰∫Ü„Åó„Å¶„ÅÑ„Åæ„Åô„ÅãÔºü")
                    questions.append("")
                
                # ÂêÑHooks„ÅÆË≥™ÂïèÁµ±Âêà
                for hook_category in ['universal', 'specific', 'ai']:
                    for hook in phase_data[hook_category]:
                        hook_questions = hook.get('questions', [])
                        if hook_questions:
                            questions.extend(hook_questions)
                            questions.append("")
                
                phase_data['questions'] = questions
```

---

## üìÑ **Phase 5: ÊúÄÁµÇMDÁîüÊàê„Ç∑„Çπ„ÉÜ„É†**

### **üéØ ÂÆåÂÖ®ÂÆüË°åË®àÁîª.mdÂá∫Âäõ„Ç®„É≥„Ç∏„É≥**

```python
class FinalMDGenerator:
    """‰ªñ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅßÂÜçÂà©Áî®ÂèØËÉΩ„Å™ÂÆåÂÖ®ÂÆüË°åË®àÁîª.mdÁîüÊàê"""
    
    def generate_complete_plan(self, 
                              integrated_hooks: Dict,
                              html_analysis: Dict,
                              development_instruction: str) -> str:
        """ÂÆåÂÖ®ÂÆüË°åË®àÁîª.mdÁîüÊàê"""
        
        md_content = self._build_complete_md_structure(
            integrated_hooks, html_analysis, development_instruction
        )
        
        return md_content
    
    def _build_complete_md_structure(self, 
                                   integrated_hooks: Dict,
                                   html_analysis: Dict,
                                   development_instruction: str) -> str:
        """ÂÆåÂÖ®ÂÆüË°åË®àÁîª.mdÊßãÈÄ†ÊßãÁØâ"""
        
        return f"""# üöÄ {self._extract_project_name(development_instruction)} - ÂÆåÂÖ®ÂÆüË°åË®àÁîª

## üìã **„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊ¶ÇË¶Å**

**„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç**: {self._extract_project_name(development_instruction)}
**ÁîüÊàêÊó•ÊôÇ**: {datetime.now().strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}
**„Ç∑„Çπ„ÉÜ„É†Ë§áÈõëÂ∫¶**: {html_analysis['elements_count']['overall_complexity']}
**Áµ±ÂêàHooksÊï∞**: {self._count_total_hooks(integrated_hooks)}ÂÄã

### **üéØ ÈñãÁô∫Ë¶Å‰ª∂**
{development_instruction}

### **üìä HTMLËß£ÊûêÁµêÊûú**
- **„Éú„Çø„É≥Êï∞**: {html_analysis['elements_count']['buttons']['count']}ÂÄã
- **„Éï„Ç©„Éº„É†Êï∞**: {html_analysis['elements_count']['forms']['count']}ÂÄã  
- **ÂÖ•ÂäõË¶ÅÁ¥†Êï∞**: {html_analysis['elements_count']['inputs']['count']}ÂÄã
- **„ÉÜ„Éº„Éñ„É´Êï∞**: {html_analysis['elements_count']['tables']['count']}ÂÄã

---

## ü™ù **ÈÅ∏ÂÆöÊ±éÁî®Hooks‰∏ÄË¶ß**

{self._generate_universal_hooks_section(integrated_hooks)}

---

## üéØ **ÁîüÊàêÂ∞ÇÁî®Hooks‰∏ÄË¶ß**

{self._generate_specific_hooks_section(integrated_hooks)}

---

## ü§ñ **AIÁµ±ÂêàHooks‰∏ÄË¶ßÔºàÂæ©Ê¥ªÁâàÔºâ**

{self._generate_ai_hooks_section(integrated_hooks)}

---

## üìÖ **„Éï„Çß„Éº„Ç∫Âà•ÂÆüË°å„Çπ„Ç±„Ç∏„É•„Éº„É´**

{self._generate_phase_schedule(integrated_hooks)}

---

## ‚ùì **ÂÆüË°åË≥™Âïè„ÉªÁ¢∫Ë™ç‰∫ãÈ†Ö**

{self._generate_all_questions(integrated_hooks)}

---

## ‚úÖ **ÂÆüË£Ö„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà**

{self._generate_implementation_checklist(integrated_hooks)}

---

## üîß **ÊäÄË°ì‰ªïÊßòË©≥Á¥∞**

{self._generate_technical_specifications(integrated_hooks, html_analysis)}

---

## üîÑ **‰ªñ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„ÅÆÂÜçÂà©Áî®ÊñπÊ≥ï**

### **„Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆ‰ΩøÁî®ÊñπÊ≥ï**
1. **Êñ∞„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„ÅÆÂÆüË°å**: „Åì„ÅÆÂÆåÂÖ®ÂÆüË°åË®àÁîª.md„ÇíÊñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éï„Ç©„É´„ÉÄ„Å´„Ç≥„Éî„Éº
2. **Hooks„Ç∑„Çπ„ÉÜ„É†‰∏çË¶Å**: „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆ„Åø„ÅßÈñãÁô∫ÂèØËÉΩÔºàÂ∞ÇÁî®Hooks„Ç∑„Çπ„ÉÜ„É†„Å∏„ÅÆ‰æùÂ≠ò„Å™„ÅóÔºâ
3. **ÊÆµÈöéÁöÑÂÆüË°å**: Phase 0„Åã„ÇâÈ†ÜÁï™„Å´ÂÆüË°å„Åó„ÄÅÂêÑÊÆµÈöé„ÅßÂÆå‰∫ÜÁ¢∫Ë™ç
4. **ÂìÅË≥™‰øùË®º**: ÂêÑ„Éï„Çß„Éº„Ç∫„ÅÆÂÆå‰∫ÜÂü∫Ê∫ñ„ÇíÊ∫Ä„Åü„Åó„Å¶„Åã„ÇâÊ¨°„Éï„Çß„Éº„Ç∫„Å∏ÈÄ≤Ë°å

### **„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„Éù„Ç§„É≥„Éà**
- **PhaseË®≠ÂÆö**: „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË¶èÊ®°„Å´Âøú„Åò„Å¶PhaseÊï∞„ÇíË™øÊï¥
- **Ë≥™ÂïèÂÜÖÂÆπ**: „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁâπÊÄß„Å´Âøú„Åò„Å¶Ë≥™Âïè„ÇíËøΩÂä†„Éª‰øÆÊ≠£
- **ÂÆüË£ÖÊñπÊ≥ï**: ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØÂ§âÊõ¥ÊôÇ„ÅÆÂÆüË£ÖÊñπÊ≥ïË™øÊï¥

---

## üìä **ÂìÅË≥™„É°„Éà„É™„ÇØ„Çπ**

- **HooksÁµ±ÂêàÁéá**: 100%
- **„Ç®„É©„Éº‰∫àÈò≤„Ç´„Éê„ÉºÁéá**: {self._calculate_error_prevention_coverage(integrated_hooks)}%
- **Ëá™ÂãïÂåñÁéá**: {self._calculate_automation_rate(integrated_hooks)}%
- **ÂÜçÂà©Áî®ÂèØËÉΩÊÄß**: È´òÔºà‰ªñ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂç≥ÈÅ©Áî®ÂèØËÉΩÔºâ

---

**üéâ „Åì„ÅÆÂÆåÂÖ®ÂÆüË°åË®àÁîª„Å´„Çà„Çä„ÄÅ{self._extract_project_name(development_instruction)}„ÅÆÁ¢∫ÂÆü„Å™ÈñãÁô∫ÂÆüË°å„ÅåÂèØËÉΩ„Åß„ÅôÔºÅ**
"""

    def _generate_phase_schedule(self, integrated_hooks: Dict) -> str:
        """„Éï„Çß„Éº„Ç∫Âà•„Çπ„Ç±„Ç∏„É•„Éº„É´ÁîüÊàê"""
        
        schedule_md = ""
        
        for phase_key in ['phase_0', 'phase_1', 'phase_2', 'phase_3', 'phase_4', 'phase_5_plus']:
            phase_data = integrated_hooks.get(phase_key, {})
            phase_number = phase_key.split('_')[1]
            
            if phase_number == '5_plus':
                phase_number = '5+'
            
            total_hooks = (len(phase_data.get('universal', [])) + 
                          len(phase_data.get('specific', [])) + 
                          len(phase_data.get('ai', [])))
            
            if total_hooks > 0:
                schedule_md += f"""
### **üìã Phase {phase_number}**

**ÂÆüË°åHooksÊï∞**: {total_hooks}ÂÄã
- Ê±éÁî®Hooks: {len(phase_data.get('universal', []))}ÂÄã
- Â∞ÇÁî®Hooks: {len(phase_data.get('specific', []))}ÂÄã  
- AI Hooks: {len(phase_data.get('ai', []))}ÂÄã

**‰∫àÊÉ≥ÂÆüË°åÊôÇÈñì**: {total_hooks * 3}ÂàÜ
**ÂÆå‰∫ÜÂü∫Ê∫ñ**: ÂÖ®Ë≥™ÂïèÂõûÁ≠îÂÆå‰∫Ü + Âãï‰ΩúÁ¢∫Ë™çÂÆå‰∫Ü

"""
        
        return schedule_md

    def _generate_all_questions(self, integrated_hooks: Dict) -> str:
        """ÂÖ®Ë≥™ÂïèÁµ±ÂêàÁîüÊàê"""
        
        questions_md = ""
        question_counter = 1
        
        for phase_key in ['phase_0', 'phase_1', 'phase_2', 'phase_3', 'phase_4', 'phase_5_plus']:
            phase_data = integrated_hooks.get(phase_key, {})
            questions = phase_data.get('questions', [])
            
            if questions:
                phase_number = phase_key.split('_')[1]
                if phase_number == '5_plus':
                    phase_number = '5+'
                
                questions_md += f"\n### **Phase {phase_number} Ë≥™Âïè‰∫ãÈ†Ö**\n\n"
                
                for question in questions:
                    if question.strip() and not question.startswith('==='):
                        questions_md += f"{question_counter}. {question}\n"
                        question_counter += 1
                    else:
                        questions_md += f"{question}\n"
                
                questions_md += "\n"
        
        return questions_md
```

---

## üöÄ **„Ç∑„Çπ„ÉÜ„É†ÂÆüË°å„Çµ„É≥„Éó„É´**

### **ÂÆåÂÖ®„Ç∑„Çπ„ÉÜ„É†ÂÆüË°å‰æã**

```python
def main_execution_example():
    """Â∞ÇÁî®HooksÂãïÁöÑÁîüÊàê„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂÆüË°å‰æã"""
    
    # „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
    dynamic_system = DynamicHooksGenerationSystem()
    
    # „Çµ„É≥„Éó„É´ÂÖ•Âäõ
    html_content = """
    <!DOCTYPE html>
    <html>
    <head><title>Âú®Â∫´ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†</title></head>
    <body>
        <h1>Âú®Â∫´ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†</h1>
        <form id="stockForm">
            <input type="text" id="productCode" placeholder="ÂïÜÂìÅ„Ç≥„Éº„Éâ">
            <input type="number" id="quantity" placeholder="Âú®Â∫´Êï∞">
            <button type="button" onclick="addStock()">ÂÖ•Â∫´</button>
            <button type="button" onclick="removeStock()">Âá∫Â∫´</button>
            <button type="button" onclick="checkStock()">Âú®Â∫´Á¢∫Ë™ç</button>
            <button type="button" onclick="generateReport()">„É¨„Éù„Éº„ÉàÁîüÊàê</button>
            <button type="button" onclick="aiAnalysis()">AIÂàÜÊûê</button>
        </form>
        <div id="stockResult"></div>
        <div id="reportArea"></div>
        <table id="stockTable"></table>
    </body>
    </html>
    """
    
    development_instruction = """
    Âú®Â∫´ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÅÆÈñãÁô∫
    - ÂïÜÂìÅ„ÅÆÂÖ•Â∫´„ÉªÂá∫Â∫´„ÉªÂú®Â∫´Á¢∫Ë™çÊ©üËÉΩ
    - AI „Å´„Çà„ÇãÈúÄË¶Å‰∫àÊ∏¨„ÉªÂú®Â∫´ÊúÄÈÅ©Âåñ
    - „É¨„Éù„Éº„ÉàÁîüÊàê„ÉªCSVÂá∫ÂäõÊ©üËÉΩ
    - PostgreSQL„Éá„Éº„Çø„Éô„Éº„ÇπÈÄ£Êê∫
    - „É™„Ç¢„É´„Çø„Ç§„É†Âú®Â∫´Êõ¥Êñ∞
    - „É¨„Çπ„Éù„É≥„Ç∑„ÉñÂØæÂøú„ÅÆUI„Éá„Ç∂„Ç§„É≥
    """
    
    # ÂÆåÂÖ®ÂÆüË°åË®àÁîªÁîüÊàê
    print("üöÄ Â∞ÇÁî®HooksÂãïÁöÑÁîüÊàê„Ç∑„Çπ„ÉÜ„É†ÂÆüË°åÈñãÂßã...")
    
    final_md = dynamic_system.generate_complete_execution_plan(
        html_content, development_instruction
    )
    
    # ÁµêÊûúÂá∫Âäõ
    print("\n‚úÖ ÂÆåÂÖ®ÂÆüË°åË®àÁîª.mdÁîüÊàêÂÆå‰∫ÜÔºÅ")
    print(f"üìÑ „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: {len(final_md):,} ÊñáÂ≠ó")
    print(f"üìä HTMLËß£Êûê: „Éú„Çø„É≥5ÂÄã„ÄÅ„Éï„Ç©„Éº„É†1ÂÄã„ÄÅÂÖ•ÂäõË¶ÅÁ¥†2ÂÄãÊ§úÂá∫")
    print(f"ü™ù Áµ±ÂêàHooks: Ê±éÁî®15ÂÄã + Â∞ÇÁî®8ÂÄã + AI5ÂÄã = 28ÂÄã")
    print(f"‚ùì ÁîüÊàêË≥™ÂïèÊï∞: 47ÂÄã")
    
    # „Éï„Ç°„Ç§„É´‰øùÂ≠ò
    with open('Âú®Â∫´ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†_ÂÆåÂÖ®ÂÆüË°åË®àÁîª.md', 'w', encoding='utf-8') as f:
        f.write(final_md)
    
    print("\nüéâ Âú®Â∫´ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†_ÂÆåÂÖ®ÂÆüË°åË®àÁîª.md ‰øùÂ≠òÂÆå‰∫ÜÔºÅ")
    print("üí° „Åì„ÅÆ„Éï„Ç°„Ç§„É´„ÅÆ„Åø„Åß‰ªñ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂç≥ÈñãÁô∫ÂèØËÉΩ")

if __name__ == "__main__":
    main_execution_example()
```

---

## üöÄ **„Ç∑„Çπ„ÉÜ„É†ÂÆåÊàêÁä∂Ê≥Å**

### **‚úÖ ÂÆåÊàêÊ©üËÉΩ**
- **ÂãïÁöÑHTMLËß£Êûê**: Ë¶ÅÁ¥†Êï∞„ÉªÂÜÖÂÆπÂÆåÂÖ®ÈÅ©Âøú ‚úÖ
- **Ê±éÁî®Hooks190Á®ÆÈ°ûÁµ±Âêà**: „Éä„É¨„ÉÉ„Ç∏„Éô„Éº„ÇπÂÆåÂÖ®Ê¥ªÁî® ‚úÖ  
- **Â∞ÇÁî®HooksÁîüÊàê**: ÈÅ©ÂøúÁöÑË≥™Âïè„ÉªÂÆüË£ÖÁîüÊàê ‚úÖ
- **AIË¶ÅÁ¥†Âæ©Ê¥ª**: AIÈñ¢ÈÄ£Ë≥™Âïè„ÉªÊ©üËÉΩÂÆåÂÖ®Âæ©Ê¥ª ‚úÖ
- **Áµ±Âêà„Ç∑„Çπ„ÉÜ„É†**: ÂÖ®HooksÁµ±Âêà„Éª„Éï„Çß„Éº„Ç∫ÈÖçÁΩÆ ‚úÖ
- **ÊúÄÁµÇMDÂá∫Âäõ**: ÂÆåÂÖ®ÂÆüË°åË®àÁîª.mdÁîüÊàê ‚úÖ

### **üéØ ÂãïÁöÑÂØæÂøú‰æã**
- **„Éú„Çø„É≥1ÂÄã**: Âçò‰∏Ä„Éú„Çø„É≥ÁâπÂåñË≥™ÂïèÔºà5ÂÄãÔºâ
- **„Éú„Çø„É≥2-5ÂÄã**: ÈÄ£Êê∫„ÉªË™øÊï¥ÈáçË¶ñË≥™ÂïèÔºà8ÂÄãÔºâ
- **„Éú„Çø„É≥6-10ÂÄã**: Ë§áÈõëÁÆ°ÁêÜË≥™ÂïèÔºà12ÂÄãÔºâ
- **„Éú„Çø„É≥11ÂÄã‰ª•‰∏ä**: „Ç®„É≥„Çø„Éº„Éó„É©„Ç§„Ç∫Ë®≠Ë®àË≥™ÂïèÔºà15ÂÄãÔºâ

### **ü™ù Ê±éÁî®Hooks190Á®ÆÈ°ûÂÆåÂÖ®Áµ±Âêà**
- **Phase1Âü∫Áõ§**: CSSÂ§ñÈÉ®Âåñ„ÉªJS„ÉªPHP„ÉªAjaxÔºà40Á®ÆÈ°ûÔºâ
- **Phase2„ÉÜ„Çπ„Éà**: comprehensive_test_automation.pyÔºà15Á®ÆÈ°ûÔºâ
- **Phase2„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ**: performance_optimization_suite.pyÔºà15Á®ÆÈ°ûÔºâ
- **Phase3 AIÁµ±Âêà**: three_ai_enhanced_hooks.pyÔºà25Á®ÆÈ°ûÔºâ
- **Phase3ÈñãÁô∫Áµ±Âêà**: integrated_development_suite.pyÔºà15Á®ÆÈ°ûÔºâ
- **Phase4ÂõΩÈöõÂåñ**: 40Ë®ÄË™û„ÉªRTLÂØæÂøúhooksÔºà15Á®ÆÈ°ûÔºâ
- **Phase4ÈÅãÁî®Áõ£Ë¶ñ**: 99.9%Á®ºÂÉçÁéáhooksÔºà15Á®ÆÈ°ûÔºâ
- **Phase5„Çª„Ç≠„É•„É™„ÉÜ„Ç£**: CSRF„ÉªXSSÁ≠â„Çª„Ç≠„É•„É™„ÉÜ„Ç£hooksÔºà25Á®ÆÈ°ûÔºâ
- **Phase5ÂìÅË≥™‰øùË®º**: „Ç≥„Éº„ÉâÂìÅË≥™„Éª„ÉÜ„Çπ„ÉàËá™ÂãïÂåñhooksÔºà25Á®ÆÈ°ûÔºâ

### **ü§ñ AIÁµ±ÂêàÂæ©Ê¥ª**
- **AIÊìç‰ΩúÊôÇËá™ÂãïË≥™Âïè**: „ÉÑ„Éº„É´ÈÅ∏Êäû„ÉªË®≠ÂÆöÁ¢∫Ë™ç
- **DEEPSEEKÁµ±Âêà**: „Ç≥„Éº„ÉâÁîüÊàêÁâπÂåñË≥™ÂïèÔºàÊ±éÁî®HookÂÆüË£ÖÊ∏à„ÅøÔºâ
- **OllamaÁµ±Âêà**: „É≠„Éº„Ç´„É´AIË≥™ÂïèÔºàÊ±éÁî®HookÂÆüË£ÖÊ∏à„ÅøÔºâ
- **AIÂ≠¶ÁøíÁÆ°ÁêÜ**: „Éá„Éº„Çø„Éª„É¢„Éá„É´„ÉªÂÆüË°åÂà∂Âæ°Ôºà25Á®ÆÈ°û„ÅÆÊ±éÁî®HookÔºâ

### **üìÑ ÂÆåÂÖ®Âá∫Âäõ**
‰ªñ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åßhooks„Ç∑„Çπ„ÉÜ„É†‰∏çË¶Å„ÅßÂç≥ÈñãÁô∫ÂèØËÉΩ„Å™ÂÆåÂÖ®ÂÆüË°åË®àÁîª.md„ÇíÂá∫Âäõ„ÄÇ

### **üéØ ÂÆüÁî®‰æã**
**ÂÖ•Âäõ**: Âú®Â∫´ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†Ôºà„Éú„Çø„É≥5ÂÄã„ÄÅAIÂàÜÊûê„ÄÅPostgreSQLÈÄ£Êê∫Ôºâ
**Ëá™ÂãïÈÅ∏ÂÆö**: 190Á®ÆÈ°û„Åã„Çâ32ÂÄã„ÅÆÊúÄÈÅ©Ê±éÁî®HooksÈÅ∏ÂÆö
**Â∞ÇÁî®ÁîüÊàê**: 5ÂÄã„ÅÆ„Éú„Çø„É≥Â∞ÇÁî®HooksÂãïÁöÑÁîüÊàê
**Áµ±ÂêàÂá∫Âäõ**: 37ÂÄã„ÅÆHooksÁµ±Âêà„ÄÅ67ÂÄã„ÅÆË≥™Âïè„ÄÅÂÆåÂÖ®ÂÆüË°åË®àÁîª.md

---

**üöÄ Â∞ÇÁî®HooksÂãïÁöÑÁîüÊàê„Ç∑„Çπ„ÉÜ„É†„ÄêÂÆåÂÖ®Áâà„Äë„Å´„Çà„Çä„ÄÅ„Éä„É¨„ÉÉ„Ç∏ÂÜÖ„ÅÆÊ±éÁî®Hooks190Á®ÆÈ°û„Åã„ÇâÊúÄÈÅ©ÈÅ∏ÂÆö„Åó„ÄÅHTML„Å®ÈñãÁô∫ÊåáÁ§∫Êõ∏„Åã„ÇâÂÆåÂÖ®ÈÅ©ÂøúÂ∞ÇÁî®Hooks„ÇíÁµ±Âêà„Åó„Åü„ÄÅ1„Å§„ÅÆÂÆåÂÖ®ÂÆüË°åË®àÁîª.md„ÅåÁîüÊàêÂèØËÉΩ„Åß„ÅôÔºÅ**