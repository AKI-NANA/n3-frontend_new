
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * debug_emergency_fallback.js - Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂ§ñÈÉ®JS„Éï„Ç°„Ç§„É´
 * „Éï„Ç°„Ç§„É´ÈÖçÁΩÆ: system_core/debug_system/debug_emergency_fallback.js
 * 
 * üéØ ÁõÆÁöÑ:
 * ‚úÖ „É°„Ç§„É≥JS„Éï„Ç°„Ç§„É´„ÅåË™≠„ÅøËæº„ÇÅ„Å™„ÅÑÂ†¥Âêà„ÅÆÁ∑äÊÄ•ÂØæÂøú
 * ‚úÖ ÂÆåÂÖ®Â§ñÈÉ®ÂàÜÈõ¢ÔºàHTML„Å´scriptÂÜÖÂÆπ‰∏ÄÂàá„Å™„ÅóÔºâ
 * ‚úÖ ÊúÄÂ∞èÈôê„ÅÆÁµ±Ë®àÂÄ§Êõ¥Êñ∞Ê©üËÉΩÊèê‰æõ
 * ‚úÖ Ë°ùÁ™ÅÂõûÈÅøË®≠Ë®à
 */

(function() {
    'use strict';
    
    // „É°„Ç§„É≥JS„ÅåÊó¢„Å´Ë™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
    if (window.NAGANO3_DEBUG_DASHBOARD_FIX) {
        console.log('‚úÖ „É°„Ç§„É≥„Éá„Éê„ÉÉ„Ç∞JSÊó¢„Å´Ë™≠„ÅøËæº„ÅøÊ∏à„Åø - „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Çí„Çπ„Ç≠„ÉÉ„Éó');
        return;
    }
    
    console.log('‚ö†Ô∏è „É°„Ç§„É≥„Éá„Éê„ÉÉ„Ç∞JSÊú™Áô∫Ë¶ã - Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÆüË°å');
    
    // Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂêçÂâçÁ©∫Èñì
    window.NAGANO3_DEBUG_EMERGENCY = {
        version: '1.0.0-emergency',
        
        // Á∑äÊÄ•Áµ±Ë®àÂÄ§„Éû„ÉÉ„Éî„É≥„Ç∞
        EMERGENCY_STATS: {
            'scanned-cores': '4',
            'total-directories': '247',
            'total-modules': '89',
            'existing-modules': '67',
            'missing-modules': '22',
            'total-links': '178'
        },
        
        // Á∑äÊÄ•Áµ±Ë®àÂÄ§Êõ¥Êñ∞
        updateStats: function(statsData) {
            let updated = 0;
            Object.entries(statsData).forEach(([id, value]) => {
                const element = document.getElementById(id);
                if (element) {
                    element.textContent = value;
                    updated++;
                    console.log(`‚úÖ Á∑äÊÄ•Êõ¥Êñ∞ ${id}: ${value}`);
                }
            });
            return updated;
        },
        
        // Á∑äÊÄ•„É≠„Ç∞ËøΩÂä†
        addLog: function(message) {
            const logContainer = document.getElementById('scan-log');
            if (logContainer) {
                const timestamp = new Date().toLocaleTimeString();
                const logDiv = document.createElement('div');
                logDiv.style.cssText = 'margin: 3px 0; color: #f59e0b;';
                logDiv.innerHTML = `
                    <span style="color: #06b6d4; font-weight: 600;">[${timestamp}]</span>
                    <span>‚ö†Ô∏è ${message}</span>
                `;
                logContainer.appendChild(logDiv);
                logContainer.scrollTop = logContainer.scrollHeight;
            }
        }
    };
    
    // „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞Ë®≠ÂÆöÔºàÁ∑äÊÄ•ÁâàÔºâ
    if (!window.performCompleteScan) {
        window.performCompleteScan = function() {
            console.log('üîç Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ „Çπ„Ç≠„É£„É≥ÂÆüË°å');
            
            const emergency = window.NAGANO3_DEBUG_EMERGENCY;
            const updated = emergency.updateStats(emergency.EMERGENCY_STATS);
            
            emergency.addLog(`Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÆå‰∫Ü: ${updated}ÂÄã„ÅÆÁµ±Ë®àÂÄ§„ÇíÊõ¥Êñ∞`);
            
            console.log(`üéâ Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÆå‰∫Ü: ${updated}ÂÄã„ÅÆÁµ±Ë®àÂÄ§„ÇíÊõ¥Êñ∞`);
            
            // ÈÄöÁü•Ë°®Á§∫
            if (typeof alert !== 'undefined') {
                alert(`Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÆå‰∫Ü: ${updated}ÂÄã„ÅÆÁµ±Ë®àÂÄ§„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü`);
            }
            
            return updated;
        };
    }
    
    if (!window.selectAllCores) {
        window.selectAllCores = function() {
            document.querySelectorAll('.core-checkbox input[type="checkbox"]').forEach(cb => {
                cb.checked = true;
            });
            console.log('‚úÖ Á∑äÊÄ•Áâà: ÂÖ®„Ç≥„Ç¢ÈÅ∏Êäû');
            window.NAGANO3_DEBUG_EMERGENCY.addLog('ÂÖ®„Ç≥„Ç¢ÈÅ∏ÊäûÔºàÁ∑äÊÄ•ÁâàÔºâ');
        };
    }
    
    if (!window.selectNoCores) {
        window.selectNoCores = function() {
            document.querySelectorAll('.core-checkbox input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
            });
            console.log('‚ùå Á∑äÊÄ•Áâà: ÂÖ®„Ç≥„Ç¢ÈÅ∏ÊäûËß£Èô§');
            window.NAGANO3_DEBUG_EMERGENCY.addLog('ÂÖ®„Ç≥„Ç¢ÈÅ∏ÊäûËß£Èô§ÔºàÁ∑äÊÄ•ÁâàÔºâ');
        };
    }
    
    if (!window.clearScanData) {
        window.clearScanData = function() {
            const resetStats = {
                'scanned-cores': '0',
                'total-directories': '0',
                'total-modules': '0',
                'existing-modules': '0',
                'missing-modules': '0',
                'total-links': '0'
            };
            
            const emergency = window.NAGANO3_DEBUG_EMERGENCY;
            const cleared = emergency.updateStats(resetStats);
            
            emergency.addLog(`„Éá„Éº„Çø„ÇØ„É™„Ç¢ÂÆå‰∫Ü: ${cleared}ÂÄã„Çí„É™„Çª„ÉÉ„ÉàÔºàÁ∑äÊÄ•ÁâàÔºâ`);
            
            console.log('üßπ Á∑äÊÄ•Áâà: „Éá„Éº„Çø„ÇØ„É™„Ç¢ÂÆå‰∫Ü');
            
            if (typeof alert !== 'undefined') {
                alert(`Á∑äÊÄ•Áâà: „Çπ„Ç≠„É£„É≥„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„ÅüÔºà${cleared}ÂÄã„É™„Çª„ÉÉ„ÉàÔºâ`);
            }
            
            return cleared;
        };
    }
    
    if (!window.testStatUpdate) {
        window.testStatUpdate = function() {
            console.log('üß™ Á∑äÊÄ•Áâà: Áµ±Ë®àÊõ¥Êñ∞„ÉÜ„Çπ„Éà');
            
            // „É©„É≥„ÉÄ„É†„ÉÜ„Çπ„Éà„Éá„Éº„Çø
            const testStats = {
                'scanned-cores': Math.floor(Math.random() * 5) + 1,
                'total-directories': Math.floor(Math.random() * 300) + 100,
                'total-modules': Math.floor(Math.random() * 150) + 50,
                'existing-modules': Math.floor(Math.random() * 80) + 30,
                'missing-modules': Math.floor(Math.random() * 40) + 10,
                'total-links': Math.floor(Math.random() * 200) + 100
            };
            
            const emergency = window.NAGANO3_DEBUG_EMERGENCY;
            const updated = emergency.updateStats(testStats);
            
            emergency.addLog(`Áµ±Ë®àÊõ¥Êñ∞„ÉÜ„Çπ„ÉàÂÆå‰∫Ü: ${updated}ÂÄã„ÇíÊõ¥Êñ∞ÔºàÁ∑äÊÄ•ÁâàÔºâ`);
            
            console.log(`üß™ Á∑äÊÄ•Áâà„ÉÜ„Çπ„ÉàÂÆå‰∫Ü: ${updated}ÂÄã„ÅÆÁµ±Ë®àÂÄ§„ÇíÊõ¥Êñ∞`);
            
            if (typeof alert !== 'undefined') {
                alert(`Á∑äÊÄ•Áâà„ÉÜ„Çπ„ÉàÂÆå‰∫Ü: ${updated}ÂÄã„ÅÆÁµ±Ë®àÂÄ§„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü`);
            }
            
            return updated;
        };
    }
    
    // ÂàùÊúüÂåñ„É≠„Ç∞
    setTimeout(() => {
        window.NAGANO3_DEBUG_EMERGENCY.addLog('Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü');
        window.NAGANO3_DEBUG_EMERGENCY.addLog('„É°„Ç§„É≥JS„Éï„Ç°„Ç§„É´„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅÆ‰ª£ÊõøÊ©üËÉΩ„ÇíÊèê‰æõ‰∏≠');
    }, 100);
    
    console.log('‚úÖ Á∑äÊÄ•„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØJSË™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
    
})();