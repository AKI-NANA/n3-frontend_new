
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * üîß File Finder & Loader ‰øÆÊ≠£Áâà
 * 
 * ÂïèÈ°åËß£Ê±∫:
 * ‚úÖ ÁÑ°Èôê„É´„Éº„ÉóÊ§úÁ¥¢ÂÅúÊ≠¢
 * ‚úÖ 404„Ç®„É©„ÉºÈÄ£Áô∫Èò≤Ê≠¢
 * ‚úÖ core_header.js‰æùÂ≠òÂâäÈô§
 * ‚úÖ „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊîπÂñÑ
 * 
 * @version 2.1.0-error-fix
 */

"use strict";

// =====================================
// üõ°Ô∏è ÁÑ°ÈôêÊ§úÁ¥¢Èò≤Ê≠¢
// =====================================

const FILE_SEARCH_EXECUTED = 'NAGANO3_FILE_SEARCH_' + Date.now();

if (window.NAGANO3_FILE_SEARCH_ACTIVE) {
    console.warn('‚ö†Ô∏è File search already active, skipping');
} else {
    window.NAGANO3_FILE_SEARCH_ACTIVE = FILE_SEARCH_EXECUTED;
    
    console.log('üîç File Finder & Loader (‰øÆÊ≠£Áâà) ÈñãÂßã');

    // =====================================
    // üéØ Ê§úÁ¥¢ÂØæË±°„Éï„Ç°„Ç§„É´ÁÆ°ÁêÜ
    // =====================================
    
    const CORE_FILES = {
        // ÂøÖÈ†à„Åß„ÅØ„Å™„ÅÑ„Éï„Ç°„Ç§„É´ÔºàÊ§úÁ¥¢„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºâ
        'core_header.js': {
            required: false,
            skip_search: true,
            fallback: 'basic_header_functions'
        },
        
        // ÂÆüÈöõ„Å´ÂøÖË¶Å„Å™„Éï„Ç°„Ç§„É´
        'bootstrap.js': {
            required: true,
            paths: ['common/js/', 'js/', './'],
            skip_search: false
        }
    };

    // =====================================
    // üîß ÊîπËâØ„Åï„Çå„Åü„Éï„Ç°„Ç§„É´Ê§úÁ¥¢„Ç∑„Çπ„ÉÜ„É†
    // =====================================
    
    class SafeFileLoader {
        constructor() {
            this.searchAttempts = new Map();
            this.maxAttempts = 3;
            this.searchTimeout = 5000; // 5Áßí„Åß„Çø„Ç§„É†„Ç¢„Ç¶„Éà
            this.loadedFiles = new Set();
        }
        
        // „Éï„Ç°„Ç§„É´Â≠òÂú®Á¢∫Ë™çÔºàÂÆâÂÖ®ÁâàÔºâ
        async fileExists(url) {
            const attemptKey = url;
            const attempts = this.searchAttempts.get(attemptKey) || 0;
            
            if (attempts >= this.maxAttempts) {
                console.warn(`‚ö†Ô∏è Ê§úÁ¥¢Ë©¶Ë°åÂõûÊï∞‰∏äÈôê: ${url}`);
                return false;
            }
            
            this.searchAttempts.set(attemptKey, attempts + 1);
            
            try {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 1000);
                
                const response = await fetch(url, {
                    method: 'HEAD',
                    signal: controller.signal,
                    cache: 'no-cache'
                });
                
                clearTimeout(timeoutId);
                return response.ok;
                
            } catch (error) {
                if (error.name === 'AbortError') {
                    console.warn(`‚è∞ Ê§úÁ¥¢„Çø„Ç§„É†„Ç¢„Ç¶„Éà: ${url}`);
                }
                return false;
            }
        }
        
        // „Çπ„ÇØ„É™„Éó„ÉàË™≠„ÅøËæº„ÅøÔºàÂÆâÂÖ®ÁâàÔºâ
        async loadScript(url, isRequired = false) {
            if (this.loadedFiles.has(url)) {
                console.log(`‚úÖ Êó¢Ë™≠„ÅøËæº„Åø: ${url}`);
                return { success: true, cached: true };
            }
            
            try {
                console.log(`üì¶ „Çπ„ÇØ„É™„Éó„ÉàË™≠„ÅøËæº„ÅøË©¶Ë°å: ${url}`);
                
                return new Promise((resolve) => {
                    const script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.async = false;
                    
                    const timeout = setTimeout(() => {
                        console.warn(`‚è∞ Ë™≠„ÅøËæº„Åø„Çø„Ç§„É†„Ç¢„Ç¶„Éà: ${url}`);
                        script.remove();
                        resolve({ success: false, error: 'Timeout' });
                    }, this.searchTimeout);
                    
                    script.onload = () => {
                        clearTimeout(timeout);
                        this.loadedFiles.add(url);
                        console.log(`‚úÖ Ë™≠„ÅøËæº„ÅøÊàêÂäü: ${url}`);
                        resolve({ success: true });
                    };
                    
                    script.onerror = () => {
                        clearTimeout(timeout);
                        console.warn(`‚ùå Ë™≠„ÅøËæº„ÅøÂ§±Êïó: ${url}`);
                        script.remove();
                        
                        if (isRequired) {
                            resolve({ success: false, error: 'Required file load failed' });
                        } else {
                            resolve({ success: false, error: 'Optional file load failed' });
                        }
                    };
                    
                    script.src = url;
                    document.head.appendChild(script);
                });
                
            } catch (error) {
                console.error(`‚ùå „Çπ„ÇØ„É™„Éó„ÉàË™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${url}`, error);
                return { success: false, error: error.message };
            }
        }
        
        // „Éï„Ç°„Ç§„É´Ê§úÁ¥¢ÔºàÂà∂Èôê‰ªò„ÅçÔºâ
        async searchFile(filename, searchPaths = []) {
            const fileConfig = CORE_FILES[filename];
            
            if (fileConfig?.skip_search) {
                console.log(`‚è≠Ô∏è Ê§úÁ¥¢„Çπ„Ç≠„ÉÉ„Éó: ${filename} (Ë®≠ÂÆö„Å´„Çà„ÇäÁÑ°Âäπ)`);
                return { success: false, skipped: true };
            }
            
            console.log(`üîç „Éï„Ç°„Ç§„É´Ê§úÁ¥¢ÈñãÂßã: ${filename}`);
            
            // „Éá„Éï„Ç©„É´„ÉàÊ§úÁ¥¢„Éë„Çπ
            const defaultPaths = [
                '',
                'common/js/',
                'js/',
                'modules/',
                'assets/js/',
                './common/js/',
                '../common/js/'
            ];
            
            const paths = [...(fileConfig?.paths || []), ...searchPaths, ...defaultPaths];
            const uniquePaths = [...new Set(paths)];
            
            // ‰∏¶ÂàóÊ§úÁ¥¢ÔºàÂà∂Èôê‰ªò„ÅçÔºâ
            const searchPromises = uniquePaths.slice(0, 5).map(async (path) => {
                const url = path + filename;
                const exists = await this.fileExists(url);
                return { url, exists, path };
            });
            
            try {
                const results = await Promise.allSettled(searchPromises);
                
                for (const result of results) {
                    if (result.status === 'fulfilled' && result.value.exists) {
                        console.log(`‚úÖ „Éï„Ç°„Ç§„É´Áô∫Ë¶ã: ${result.value.url}`);
                        return { success: true, url: result.value.url, path: result.value.path };
                    }
                }
                
                console.warn(`‚ö†Ô∏è „Éï„Ç°„Ç§„É´Êú™Áô∫Ë¶ã: ${filename}`);
                return { success: false, error: 'File not found' };
                
            } catch (error) {
                console.error(`‚ùå Ê§úÁ¥¢„Ç®„É©„Éº: ${filename}`, error);
                return { success: false, error: error.message };
            }
        }
        
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üËÉΩ‰ΩúÊàê
        createFallback(filename) {
            const fileConfig = CORE_FILES[filename];
            
            if (filename === 'core_header.js' && fileConfig?.fallback === 'basic_header_functions') {
                console.log('üõ†Ô∏è core_header.js „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈñ¢Êï∞„Çí‰ΩúÊàê');
                
                // Âü∫Êú¨ÁöÑ„Å™„Éò„ÉÉ„ÉÄ„ÉºÈñ¢Êï∞„ÇíÊèê‰æõ
                if (!window.initializeHeader) {
                    window.initializeHeader = function() {
                        console.log('üìã Âü∫Êú¨„Éò„ÉÉ„ÉÄ„ÉºÂàùÊúüÂåñÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ');
                        return { success: true, fallback: true };
                    };
                }
                
                if (!window.updateHeaderStats) {
                    window.updateHeaderStats = function(stats = {}) {
                        console.log('üìä „Éò„ÉÉ„ÉÄ„ÉºÁµ±Ë®àÊõ¥Êñ∞Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ', stats);
                        return { success: true, fallback: true };
                    };
                }
                
                return { success: true, fallback: true };
            }
            
            return { success: false, error: 'No fallback available' };
        }
    }

    // =====================================
    // üöÄ ÊúÄÈÅ©Âåñ„Åï„Çå„Åü„É≠„Éº„ÉÄ„ÉºÂàùÊúüÂåñ
    // =====================================
    
    const safeLoader = new SafeFileLoader();
    
    window.initOptimizedLoader = async function() {
        if (window.NAGANO3_LOADER_INITIALIZED) {
            console.log('‚ö†Ô∏è „É≠„Éº„ÉÄ„ÉºÊó¢„Å´ÂàùÊúüÂåñÊ∏à„Åø');
            return;
        }
        
        window.NAGANO3_LOADER_INITIALIZED = true;
        console.log('üöÄ ÊúÄÈÅ©Âåñ„É≠„Éº„ÉÄ„ÉºÂàùÊúüÂåñÈñãÂßã');
        
        try {
            // ÂøÖÈ†à„Éï„Ç°„Ç§„É´„ÅÆ„Åø„ÇíÊ§úÁ¥¢„ÉªË™≠„ÅøËæº„Åø
            const requiredFiles = Object.entries(CORE_FILES)
                .filter(([_, config]) => config.required)
                .map(([filename, _]) => filename);
            
            for (const filename of requiredFiles) {
                const searchResult = await safeLoader.searchFile(filename);
                
                if (searchResult.success) {
                    const loadResult = await safeLoader.loadScript(searchResult.url, true);
                    if (!loadResult.success) {
                        console.warn(`‚ö†Ô∏è ÂøÖÈ†à„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„ÅøÂ§±Êïó: ${filename}`);
                    }
                } else {
                    console.warn(`‚ö†Ô∏è ÂøÖÈ†à„Éï„Ç°„Ç§„É´Êú™Áô∫Ë¶ã: ${filename}`);
                }
            }
            
            // „Ç™„Éó„Ç∑„Éß„É≥„Éï„Ç°„Ç§„É´„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰ΩúÊàê
            const optionalFiles = Object.entries(CORE_FILES)
                .filter(([_, config]) => !config.required)
                .map(([filename, _]) => filename);
            
            for (const filename of optionalFiles) {
                const fallbackResult = safeLoader.createFallback(filename);
                if (fallbackResult.success) {
                    console.log(`‚úÖ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰ΩúÊàê: ${filename}`);
                }
            }
            
            console.log('‚úÖ ÊúÄÈÅ©Âåñ„É≠„Éº„ÉÄ„ÉºÂàùÊúüÂåñÂÆå‰∫Ü');
            
            // ÂàùÊúüÂåñÂÆå‰∫Ü„Ç§„Éô„É≥„Éà
            const event = new CustomEvent('NAGANO3:loader-ready', {
                detail: {
                    loader_id: FILE_SEARCH_EXECUTED,
                    timestamp: Date.now()
                }
            });
            document.dispatchEvent(event);
            
        } catch (error) {
            console.error('‚ùå „É≠„Éº„ÉÄ„ÉºÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
        }
    };

    // =====================================
    // üõë „É¨„Ç¨„Ç∑„ÉºÈñ¢Êï∞„ÅÆÁÑ°ÂäπÂåñ
    // =====================================
    
    // Âç±Èô∫„Å™ÂãïÁöÑÊ§úÁ¥¢„ÇíÁÑ°ÂäπÂåñ
    window.performDynamicSearch = function(filename) {
        console.warn(`‚ö†Ô∏è ÂãïÁöÑÊ§úÁ¥¢„ÅØÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô: ${filename}`);
        return Promise.resolve({ success: false, disabled: true });
    };
    
    // ÁÑ°Èôê„É´„Éº„Éó„ÇíÂºï„ÅçËµ∑„Åì„ÅôÊ§úÁ¥¢„ÇíÁÑ°ÂäπÂåñ
    window.searchFixedPaths = function() {
        console.warn('‚ö†Ô∏è Âõ∫ÂÆö„Éë„ÇπÊ§úÁ¥¢„ÅØÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
        return Promise.resolve({ success: false, disabled: true });
    };
    
    window.searchDirectoryHierarchy = function() {
        console.warn('‚ö†Ô∏è „Éá„Ç£„É¨„ÇØ„Éà„É™ÈöéÂ±§Ê§úÁ¥¢„ÅØÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
        return Promise.resolve({ success: false, disabled: true });
    };
    
    window.searchAllDirectories = function() {
        console.warn('‚ö†Ô∏è ÂÖ®„Éá„Ç£„É¨„ÇØ„Éà„É™Ê§úÁ¥¢„ÅØÁÑ°ÂäπÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô');
        return Promise.resolve({ success: false, disabled: true });
    };

    // =====================================
    // üèÅ Ëá™ÂãïÂàùÊúüÂåñ
    // =====================================
    
    // DOMÊ∫ñÂÇôÂæå„Å´ÂàùÊúüÂåñÂÆüË°å
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(window.initOptimizedLoader, 100);
        });
    } else {
        setTimeout(window.initOptimizedLoader, 100);
    }

    console.log('‚úÖ File Finder & Loader (‰øÆÊ≠£Áâà) Ë®≠ÂÆöÂÆå‰∫Ü');

} // ÈáçË§áÈò≤Ê≠¢„ÉÅ„Çß„ÉÉ„ÇØÁµÇ‰∫Ü