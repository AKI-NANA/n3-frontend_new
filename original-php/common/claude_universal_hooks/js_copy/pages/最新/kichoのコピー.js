
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * KICHO JavaScript - Stage BÂÆüË£ÖÔºàAjaxÂü∫Êú¨ÈÄö‰ø°„ÅÆ„ÅøÔºâ
 * common/js/pages/kicho.js
 * 
 * Stage BË®±ÂèØÊ©üËÉΩ:
 * - health_check „ÅÆ„Åø
 * - get_statistics „ÅÆ„Åø
 * - Âü∫Êú¨AjaxÈÄö‰ø°„ÅÆ„Åø
 * 
 * Stage BÁ¶ÅÊ≠¢Ê©üËÉΩ:
 * - ÂâäÈô§Âá¶ÁêÜÔºàStage C„ÅßÂÆüË£ÖÔºâ
 * - AIÂ≠¶ÁøíÂá¶ÁêÜÔºàStage D„ÅßÂÆüË£ÖÔºâ
 * - „Éï„Ç°„Ç§„É´Âá¶ÁêÜÔºàStage D„ÅßÂÆüË£ÖÔºâ
 */

"use strict";

// =====================================
// üõ°Ô∏è Stage B: ÂêçÂâçÁ©∫Èñì„ÉªÂü∫Áõ§ÔºàÂøÖÈ†àÔºâ
// =====================================

window.NAGANO3_KICHO = window.NAGANO3_KICHO || {
    version: '1.0.0-stage-b',
    initialized: false,
    stage: 'B',
    functions: {},
    state: {
        ajaxManager: null,
        lastUpdateTime: null,
        isProcessing: false
    },
    config: {
        maxRetries: 3,
        requestTimeout: 30000
    }
};

// =====================================
// üîß Stage B: CSRFÂèñÂæó„Ç∑„Çπ„ÉÜ„É†ÔºàÂøÖÈ†àÔºâ
// =====================================

/**
 * CSRF „Éà„Éº„ÇØ„É≥ÂèñÂæóÔºàÂ§öÈáç„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
 */
function getCSRFToken() {
    // ÊñπÊ≥ï1: meta „Çø„Ç∞„Åã„ÇâÂèñÂæó
    const metaToken = document.querySelector('meta[name="csrf-token"]')?.content;
    if (metaToken && metaToken.length > 10) {
        console.log('‚úÖ CSRFÂèñÂæó: meta „Çø„Ç∞„Åã„Çâ');
        return metaToken;
    }
    
    // ÊñπÊ≥ï2: NAGANO3_CONFIG „Åã„ÇâÂèñÂæó
    const configToken = window.NAGANO3_CONFIG?.csrfToken;
    if (configToken && configToken.length > 10) {
        console.log('‚úÖ CSRFÂèñÂæó: NAGANO3_CONFIG „Åã„Çâ');
        return configToken;
    }
    
    // ÊñπÊ≥ï3: „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Åã„ÇâÂèñÂæó
    const globalToken = window.CSRF_TOKEN;
    if (globalToken && globalToken.length > 10) {
        console.log('‚úÖ CSRFÂèñÂæó: „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞„Åã„Çâ');
        return globalToken;
    }
    
    // ÊñπÊ≥ï4: „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
    console.warn('‚ö†Ô∏è CSRFÂèñÂæóÂ§±Êïó - development_mode „ÅßÁ∂ôÁ∂ö');
    return 'development_mode';
}

// =====================================
// üéØ Stage B: AjaxÂü∫Êú¨ÈÄö‰ø°„ÇØ„É©„ÇπÔºàÂà∂Èôê‰ªò„ÅçÔºâ
// =====================================

class KichoAjaxManagerStageB {
    constructor() {
        this.csrfToken = null;
        this.baseUrl = window.location.pathname;
        this.isInitialized = false;
        this.stage = 'B';
        
        // Ë®±ÂèØ„Ç¢„ÇØ„Ç∑„Éß„É≥ÔºàStage BÈôêÂÆöÔºâ
        this.allowedActions = [
            'health_check',
            'get_statistics'
        ];
        
        // ÂàùÊúüÂåñ
        this.initialize();
    }
    
    /**
     * ÂàùÊúüÂåñÂá¶ÁêÜ
     */
    async initialize() {
        console.log('üîß KichoAjaxManager Stage B ÂàùÊúüÂåñÈñãÂßã...');
        
        // CSRFÂèñÂæó
        this.csrfToken = getCSRFToken();
        
        if (this.csrfToken) {
            console.log('‚úÖ Stage B CSRFÂàùÊúüÂåñÊàêÂäü:', this.csrfToken.substring(0, 8) + '...');
            this.isInitialized = true;
        } else {
            console.error('‚ùå Stage B CSRFÂàùÊúüÂåñÂ§±Êïó');
            this.csrfToken = 'fallback_token';
            this.isInitialized = true;
        }
    }
    
    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥Ë®±ÂèØ„ÉÅ„Çß„ÉÉ„ÇØÔºàStage BÂà∂ÈôêÔºâ
     */
    isActionAllowed(action) {
        if (!this.allowedActions.includes(action)) {
            console.error(`‚ùå Stage BÁ¶ÅÊ≠¢„Ç¢„ÇØ„Ç∑„Éß„É≥: ${action}`);
            console.error(`‚úÖ Stage BË®±ÂèØ„Ç¢„ÇØ„Ç∑„Éß„É≥: ${this.allowedActions.join(', ')}`);
            return false;
        }
        return true;
    }
    
    /**
     * Ajax „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°åÔºàStage BÂà∂Èôê‰ªò„ÅçÔºâ
     */
    async request(action, data = {}) {
        // ÂàùÊúüÂåñÁ¢∫Ë™ç
        if (!this.isInitialized) {
            throw new Error('Stage B Ajax Manager Êú™ÂàùÊúüÂåñ');
        }
        
        // „Ç¢„ÇØ„Ç∑„Éß„É≥Ë®±ÂèØ„ÉÅ„Çß„ÉÉ„ÇØ
        if (!this.isActionAllowed(action)) {
            throw new Error(`Stage B: „Ç¢„ÇØ„Ç∑„Éß„É≥ '${action}' „ÅØË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì`);
        }
        
        try {
            this.showLoading(true);
            
            const formData = new FormData();
            formData.append('action', action);
            formData.append('csrf_token', this.csrfToken);
            
            // „Éá„Éº„ÇøËøΩÂä†Âá¶ÁêÜÔºàStage B: Âü∫Êú¨„Éá„Éº„Çø„ÅÆ„ÅøÔºâ
            Object.entries(data).forEach(([key, value]) => {
                if (typeof value === 'object') {
                    formData.append(key, JSON.stringify(value));
                } else {
                    formData.append(key, String(value));
                }
            });
            
            // „Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±
            console.log(`üöÄ Stage B AjaxÂÆüË°å: ${action}`, {
                stage: this.stage,
                csrf: this.csrfToken ? this.csrfToken.substring(0, 8) + '...' : '„Å™„Åó',
                allowed: this.allowedActions
            });
            
            const response = await fetch(this.baseUrl + '?page=kicho_content', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: formData
            });
            
            // „É¨„Çπ„Éù„É≥„ÇπÁ¢∫Ë™ç
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                const text = await response.text();
                console.error('‚ùå ÈùûJSON „É¨„Çπ„Éù„É≥„Çπ:', text.substring(0, 200));
                throw new Error('„Çµ„Éº„Éê„Éº„Åã„ÇâÁÑ°Âäπ„Å™„É¨„Çπ„Éù„É≥„Çπ„ÅåËøî„Åï„Çå„Åæ„Åó„Åü');
            }
            
            const result = await response.json();
            
            // Stage B: „É¨„Çπ„Éù„É≥„ÇπÊ§úË®º
            if (!result.stage || result.stage !== 'A') {
                console.warn('‚ö†Ô∏è Stage‰∏çÊï¥Âêà:', result.stage);
            }
            
            // „É¨„Çπ„Éù„É≥„ÇπÂá¶ÁêÜ
            if (result.success || result.status === 'success') {
                console.log(`‚úÖ Stage B AjaxÊàêÂäü: ${action}`, result);
                
                // ÊàêÂäüÈÄöÁü•
                if (result.message) {
                    this.showNotification(result.message, 'success');
                }
                
                return result;
            } else {
                const errorMsg = result.error || result.message || 'Stage B AjaxÂá¶ÁêÜ„Ç®„É©„Éº';
                throw new Error(errorMsg);
            }
            
        } catch (error) {
            console.error(`‚ùå Stage B Ajax Error [${action}]:`, error);
            
            // „Ç®„É©„ÉºÈÄöÁü•
            const errorMessage = error.message || 'Stage B „Ç∑„Çπ„ÉÜ„É†„Ç®„É©„Éº';
            this.showNotification(`Stage B „Ç®„É©„Éº: ${errorMessage}`, 'error');
            
            throw error;
        } finally {
            this.showLoading(false);
        }
    }
    
    /**
     * „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫Âà∂Âæ°
     */
    showLoading(show) {
        // Stage B: Âü∫Êú¨„É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫„ÅÆ„Åø
        if (show) {
            console.log('‚è≥ Stage B: Âá¶ÁêÜ‰∏≠...');
        } else {
            console.log('‚úÖ Stage B: Âá¶ÁêÜÂÆå‰∫Ü');
        }
        
        // „Éú„Çø„É≥ÁÑ°ÂäπÂåñÔºàStage BË®±ÂèØ„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆ„ÅøÔºâ
        this.allowedActions.forEach(action => {
            const button = document.querySelector(`[data-action="${action}"]`);
            if (button) {
                button.disabled = show;
                if (show) {
                    button.classList.add('loading');
                } else {
                    button.classList.remove('loading');
                }
            }
        });
    }
    
    /**
     * ÈÄöÁü•Ë°®Á§∫
     */
    showNotification(message, type = 'info') {
        console.log(`üì¢ Stage B ÈÄöÁü• [${type}]:`, message);
        
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†
        const notification = document.createElement('div');
        notification.className = `stage-b-notification notification-${type}`;
        notification.textContent = `[Stage B] ${message}`;
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'error' ? '#f44336' : type === 'success' ? '#4caf50' : '#2196f3'};
            color: white;
            padding: 12px 24px;
            border-radius: 4px;
            z-index: 10000;
            transition: all 0.3s ease;
            border-left: 4px solid white;
        `;
        
        document.body.appendChild(notification);
        
        // Ëá™ÂãïÂâäÈô§
        setTimeout(() => {
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 300);
        }, 3000);
    }
}

// =====================================
// üéØ Stage B: Âü∫Êú¨Ê©üËÉΩÂÆüË£Ö
// =====================================

/**
 * Stage B „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
 */
async function stageB_healthCheck() {
    try {
        const ajaxManager = window.NAGANO3_KICHO.state.ajaxManager;
        if (!ajaxManager) {
            throw new Error('Ajax Manager Êú™ÂàùÊúüÂåñ');
        }
        
        const result = await ajaxManager.request('health_check');
        console.log('‚úÖ Stage B „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÊàêÂäü:', result);
        
        return result;
        
    } catch (error) {
        console.error('‚ùå Stage B „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÂ§±Êïó:', error);
        throw error;
    }
}

/**
 * Stage B Áµ±Ë®àÂèñÂæó
 */
async function stageB_getStatistics() {
    try {
        const ajaxManager = window.NAGANO3_KICHO.state.ajaxManager;
        if (!ajaxManager) {
            throw new Error('Ajax Manager Êú™ÂàùÊúüÂåñ');
        }
        
        const result = await ajaxManager.request('get_statistics');
        console.log('‚úÖ Stage B Áµ±Ë®àÂèñÂæóÊàêÂäü:', result);
        
        // Stage B: Âü∫Êú¨ÁöÑ„Å™ÁîªÈù¢Êõ¥Êñ∞„ÅÆ„Åø
        if (result.data) {
            updateBasicStatistics(result.data);
        }
        
        return result;
        
    } catch (error) {
        console.error('‚ùå Stage B Áµ±Ë®àÂèñÂæóÂ§±Êïó:', error);
        throw error;
    }
}

/**
 * Âü∫Êú¨Áµ±Ë®àË°®Á§∫Êõ¥Êñ∞ÔºàStage BÈôêÂÆöÔºâ
 */
function updateBasicStatistics(stats) {
    console.log('üîÑ Stage B: Âü∫Êú¨Áµ±Ë®àÊõ¥Êñ∞', stats);
    
    // pending_countÊõ¥Êñ∞
    const pendingElement = document.querySelector('#pending-count, [data-stat="pending_count"]');
    if (pendingElement && stats.pending_count) {
        pendingElement.textContent = stats.pending_count + '‰ª∂';
        console.log('‚úÖ pending_countÊõ¥Êñ∞:', stats.pending_count);
    }
    
    // last_updatedÊõ¥Êñ∞
    const timeElement = document.querySelector('#lastUpdateTime');
    if (timeElement && stats.last_updated) {
        timeElement.textContent = stats.last_updated;
        console.log('‚úÖ ÊúÄÁµÇÊõ¥Êñ∞ÊôÇÂàªÊõ¥Êñ∞:', stats.last_updated);
    }
    
    // Stage BÁ¢∫Ë™çË°®Á§∫
    const stageInfo = document.createElement('div');
    stageInfo.style.cssText = `
        position: fixed; bottom: 20px; left: 20px; 
        background: #2196f3; color: white; padding: 8px 12px; 
        border-radius: 4px; font-size: 12px; z-index: 9999;
    `;
    stageInfo.textContent = `Stage B: Âü∫Êú¨AjaxÈÄö‰ø°Âãï‰Ωú‰∏≠ (${stats.stage || 'A'})`;
    document.body.appendChild(stageInfo);
    
    setTimeout(() => stageInfo.remove(), 5000);
}

// =====================================
// üéØ Stage B: „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÔºàÂà∂Èôê‰ªò„ÅçÔºâ
// =====================================

// „Éö„Éº„Ç∏Âà§ÂÆö
const IS_KICHO_PAGE = document.body.getAttribute('data-page') === 'kicho_content';

if (IS_KICHO_PAGE) {
    // Stage B: Âà∂Èôê‰ªò„Åç„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
    document.addEventListener('click', function(event) {
        const target = event.target.closest('[data-action]');
        if (!target) return;
        
        const action = target.getAttribute('data-action');
        
        // Stage BË®±ÂèØ„Ç¢„ÇØ„Ç∑„Éß„É≥Âà§ÂÆö
        const allowedActions = ['health_check', 'get_statistics'];
        
        if (allowedActions.includes(action)) {
            // üîë ÈáçË¶ÅÔºö‰ªñ„ÅÆJS„Å∏„ÅÆ‰ºùÊí≠„ÇíÂÆåÂÖ®ÂÅúÊ≠¢
            event.stopImmediatePropagation();
            event.preventDefault();
            
            console.log(`üéØ Stage BÂÑ™ÂÖàÂá¶ÁêÜ: ${action}`);
            
            // Stage BÂá¶ÁêÜÂÆüË°å
            if (action === 'health_check') {
                stageB_healthCheck();
            } else if (action === 'get_statistics') {
                stageB_getStatistics();
            }
            
            return false;
        } else {
            // Stage BÁ¶ÅÊ≠¢„Ç¢„ÇØ„Ç∑„Éß„É≥
            console.warn(`‚ö†Ô∏è Stage BÁ¶ÅÊ≠¢„Ç¢„ÇØ„Ç∑„Éß„É≥: ${action}`);
            console.warn(`‚úÖ Stage BË®±ÂèØ„Ç¢„ÇØ„Ç∑„Éß„É≥: ${allowedActions.join(', ')}`);
            
            // Á¶ÅÊ≠¢ÈÄöÁü•Ë°®Á§∫
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
                background: #ff9800; color: white; padding: 20px; border-radius: 8px;
                z-index: 10000; text-align: center; font-weight: bold;
            `;
            notification.innerHTML = `
                <div>‚ö†Ô∏è Stage BÂà∂Èôê</div>
                <div style="margin: 10px 0;">'${action}' „ÅØÂæå„ÅÆStage„ÅßÂÆüË£Ö‰∫àÂÆö</div>
                <div style="font-size: 12px;">Ë®±ÂèØ: ${allowedActions.join(', ')}</div>
            `;
            document.body.appendChild(notification);
            
            setTimeout(() => notification.remove(), 3000);
        }
    }, true); // useCapture=true „ÅßÊúÄÂÑ™ÂÖàÂÆüË°å
}

// =====================================
// üéØ Stage B: Ëá™ÂãïÂàùÊúüÂåñ
// =====================================

document.addEventListener('DOMContentLoaded', function() {
    if (!IS_KICHO_PAGE) {
        console.log('‚ÑπÔ∏è KICHO„Éö„Éº„Ç∏„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì - Stage BÂàùÊúüÂåñ„Çí„Çπ„Ç≠„ÉÉ„Éó');
        return;
    }
    
    console.log('üöÄ KICHO Stage B JavaScript ÂàùÊúüÂåñÈñãÂßã...');
    
    // AjaxManagerÂàùÊúüÂåñ
    const ajaxManager = new KichoAjaxManagerStageB();
    window.NAGANO3_KICHO.state.ajaxManager = ajaxManager;
    
    // ÂàùÊúüÂåñÂÆå‰∫Ü„ÇíÂæÖÊ©ü
    const checkInitialized = setInterval(() => {
        if (ajaxManager.isInitialized) {
            clearInterval(checkInitialized);
            
            window.NAGANO3_KICHO.initialized = true;
            console.log('‚úÖ KICHO Stage B JavaScript ÂàùÊúüÂåñÂÆå‰∫Ü');
            
            // Stage BË°®Á§∫ËøΩÂä†
            const stageBanner = document.createElement('div');
            stageBanner.style.cssText = `
                position: fixed; top: 0; left: 0; right: 0; 
                background: linear-gradient(90deg, #2196f3, #1976d2); 
                color: white; text-align: center; padding: 5px; 
                z-index: 10000; font-size: 12px; font-weight: bold;
            `;
            stageBanner.textContent = 'üéØ Stage B: AjaxÂü∫Êú¨ÈÄö‰ø°„ÅÆ„ÅøÂãï‰Ωú‰∏≠ (health_check, get_statistics)';
            document.body.appendChild(stageBanner);
        }
    }, 100);
    
    // ÂàùÊúüÂåñ„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºà10ÁßíÔºâ
    setTimeout(() => {
        if (!window.NAGANO3_KICHO.initialized) {
            console.warn('‚ö†Ô∏è Stage BÂàùÊúüÂåñ„Çø„Ç§„É†„Ç¢„Ç¶„Éà');
            window.NAGANO3_KICHO.initialized = true;
        }
    }, 10000);
});

// =====================================
// üß™ Stage B: „Ç∞„É≠„Éº„Éê„É´„ÉÜ„Çπ„ÉàÈñ¢Êï∞
// =====================================

// Stage BÂ∞ÇÁî®„ÉÜ„Çπ„ÉàÈñ¢Êï∞
window.testStageB = async function() {
    console.log('üß™ Stage B Âãï‰Ωú„ÉÜ„Çπ„ÉàÈñãÂßã...');
    
    try {
        // health_check „ÉÜ„Çπ„Éà
        console.log('1. health_check „ÉÜ„Çπ„Éà...');
        await stageB_healthCheck();
        
        // get_statistics „ÉÜ„Çπ„Éà
        console.log('2. get_statistics „ÉÜ„Çπ„Éà...');
        await stageB_getStatistics();
        
        console.log('‚úÖ Stage B „ÉÜ„Çπ„ÉàÂÆå‰∫ÜÔºÅ');
        alert('‚úÖ Stage B „ÉÜ„Çπ„ÉàÊàêÂäüÔºÅ\n\nÂü∫Êú¨AjaxÈÄö‰ø°„ÅåÊ≠£Â∏∏Âãï‰Ωú‰∏≠„Åß„Åô„ÄÇ');
        
    } catch (error) {
        console.error('‚ùå Stage B „ÉÜ„Çπ„ÉàÂ§±Êïó:', error);
        alert('‚ùå Stage B „ÉÜ„Çπ„ÉàÂ§±Êïó:\n' + error.message);
    }
};

console.log('üì¶ KICHO Stage B.js Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü - Version:', window.NAGANO3_KICHO.version);