#!/bin/bash

# 🎯 承認システム完全セットアップスクリプト
# Yahoo Auction Tool用商品承認システムを完全自動インストール

echo "🚀 承認システムセットアップ開始..."
echo "========================================"

# カラー定義
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 設定
DB_NAME="nagano3_db"
DB_USER="postgres"
DB_HOST="localhost"
DB_PORT="5432"
BASE_DIR="/Users/aritahiroaki/NAGANO-3/N3-Development/modules/yahoo_auction_complete"

# ヘルパー関数
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Step 1: 前提条件チェック
print_status "Step 1: 前提条件チェック中..."

# PostgreSQL接続チェック
if ! command -v psql &> /dev/null; then
    print_error "PostgreSQLがインストールされていません"
    exit 1
fi

# データベース接続テスト
if ! psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT 1;" &> /dev/null; then
    print_error "データベース接続に失敗しました"
    print_warning "以下を確認してください:"
    print_warning "1. PostgreSQLサーバーが起動しているか"
    print_warning "2. データベース認証情報が正しいか"
    print_warning "3. nagano3_dbデータベースが存在するか"
    exit 1
fi

print_success "PostgreSQL接続確認完了"

# ディレクトリ存在チェック
if [ ! -d "$BASE_DIR" ]; then
    print_error "ベースディレクトリが見つかりません: $BASE_DIR"
    exit 1
fi

print_success "前提条件チェック完了"

# Step 2: データベーススキーマセットアップ
print_status "Step 2: データベーススキーマセットアップ中..."

cd "$BASE_DIR"

# SQLファイルの実行
if [ -f "approval_database_schema_complete.sql" ]; then
    print_status "データベーススキーマを適用中..."
    if psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -f "approval_database_schema_complete.sql" > setup.log 2>&1; then
        print_success "データベーススキーマ適用完了"
    else
        print_error "データベーススキーマ適用に失敗しました"
        print_warning "setup.logを確認してください"
        exit 1
    fi
else
    print_error "approval_database_schema_complete.sqlが見つかりません"
    print_warning "先に必要なSQLファイルを作成してください"
    exit 1
fi

# Step 3: APIファイルセットアップ
print_status "Step 3: APIファイルセットアップ中..."

# api_endpoints_approval.phpが存在するかチェック
if [ ! -f "api_endpoints_approval.php" ]; then
    print_warning "api_endpoints_approval.phpが見つかりません。基本版を作成します..."
    
    # APIファイルを作成（基本テンプレート）
    cat > api_endpoints_approval.php << 'EOF'
<?php
/**
 * 承認システムAPI統合エンドポイント
 * Auto-generated by setup script
 */

// CORS設定
header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

// 基本データベース接続
try {
    $pdo = new PDO("pgsql:host=localhost;port=5432;dbname=nagano3_db", "postgres", "", [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
    ]);
    
    $action = $_GET['action'] ?? $_POST['action'] ?? '';
    
    switch ($action) {
        case 'get_approval_queue':
            $stmt = $pdo->query("SELECT * FROM yahoo_products WHERE status IN ('ready_for_approval', 'scraped') LIMIT 20");
            $products = $stmt->fetchAll(PDO::FETCH_ASSOC);
            echo json_encode(['success' => true, 'data' => ['items' => $products, 'statistics' => []]]);
            break;
            
        case 'get_approval_statistics':
            $stmt = $pdo->query("SELECT COUNT(*) as total FROM yahoo_products");
            $stats = $stmt->fetch(PDO::FETCH_ASSOC);
            echo json_encode(['success' => true, 'data' => ['summary' => $stats]]);
            break;
            
        default:
            echo json_encode(['success' => false, 'error' => 'Unknown action: ' . $action]);
    }
    
} catch (Exception $e) {
    echo json_encode(['success' => false, 'error' => 'Database error: ' . $e->getMessage()]);
}
?>
EOF
    print_success "api_endpoints_approval.php基本版作成完了"
fi

# Step 4: yahoo_auction_tool_content.php統合
print_status "Step 4: yahoo_auction_tool_content.php統合中..."

# バックアップ作成
if [ -f "yahoo_auction_tool_content.php" ]; then
    cp "yahoo_auction_tool_content.php" "yahoo_auction_tool_content.php.backup.$(date +%Y%m%d_%H%M%S)"
    print_success "既存ファイルのバックアップ作成完了"
    
    # 統合ファイルの追加
    if ! grep -q "approval_system_integration.php" yahoo_auction_tool_content.php; then
        print_status "承認システム統合コードを追加中..."
        
        # PHPファイルの末尾に統合コードを追加
        cat >> yahoo_auction_tool_content.php << 'EOF'

<?php
/**
 * 承認システム統合
 * Auto-added by setup script
 */
if (file_exists(__DIR__ . '/approval_system_integration.php')) {
    require_once __DIR__ . '/approval_system_integration.php';
}
?>
EOF
        print_success "承認システム統合コード追加完了"
    else
        print_warning "承認システム統合コードは既に追加済みです"
    fi
fi

# Step 5: 権限設定
print_status "Step 5: ファイル権限設定中..."

chmod 644 *.php
chmod 644 *.sql
chmod 755 *.sh

print_success "ファイル権限設定完了"

# Step 6: データベース接続テスト
print_status "Step 6: データベース接続テスト中..."

# テスト用SQLクエリ
TEST_QUERY="SELECT COUNT(*) as product_count FROM yahoo_products; SELECT COUNT(*) as table_count FROM information_schema.tables WHERE table_name LIKE '%approval%';"

if psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "$TEST_QUERY" > test_result.log 2>&1; then
    print_success "データベース接続テスト完了"
    
    # 結果表示
    PRODUCT_COUNT=$(psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM yahoo_products;" 2>/dev/null | xargs)
    TABLE_COUNT=$(psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_name LIKE '%approval%';" 2>/dev/null | xargs)
    
    print_success "商品データ: ${PRODUCT_COUNT}件"
    print_success "承認テーブル: ${TABLE_COUNT}個"
else
    print_error "データベース接続テストに失敗しました"
    print_warning "test_result.logを確認してください"
fi

# Step 7: API動作テスト
print_status "Step 7: API動作テスト中..."

# PHPが動作するかテスト
if command -v php &> /dev/null; then
    # 簡単なAPI テスト
    php -r "
    try {
        \$pdo = new PDO('pgsql:host=$DB_HOST;port=$DB_PORT;dbname=$DB_NAME', '$DB_USER', '');
        echo 'PHP-PostgreSQL接続: OK\n';
    } catch (Exception \$e) {
        echo 'PHP-PostgreSQL接続: ERROR - ' . \$e->getMessage() . '\n';
    }
    " 2>/dev/null || print_warning "PHP接続テストをスキップしました"
    
    print_success "API動作テスト完了"
else
    print_warning "PHPコマンドが見つかりません。Webサーバー経由でテストしてください"
fi

# Step 8: システム状態確認
print_status "Step 8: システム状態確認中..."

# 重要ファイルの存在確認
required_files=(
    "yahoo_auction_tool_content.php"
    "approval_system_integration.php"
    "api_endpoints_approval.php"
)

missing_files=()
for file in "${required_files[@]}"; do
    if [ ! -f "$file" ]; then
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -eq 0 ]; then
    print_success "必要ファイルチェック完了"
else
    print_warning "以下のファイルが見つかりません:"
    for file in "${missing_files[@]}"; do
        print_warning "  - $file"
    done
fi

# Step 9: 設定確認とレポート生成
print_status "Step 9: セットアップレポート生成中..."

# レポートファイル作成
cat > setup_report.txt << EOF
================================================
📊 承認システムセットアップレポート
================================================
セットアップ日時: $(date)
セットアップ場所: $BASE_DIR

✅ 完了項目:
- データベーススキーマ適用
- APIエンドポイント設定
- ファイル権限設定
- システム統合コード追加

📋 システム構成:
- データベース: $DB_NAME@$DB_HOST:$DB_PORT
- 商品データ: ${PRODUCT_COUNT:-0}件
- 承認テーブル: ${TABLE_COUNT:-0}個

📁 重要ファイル:
$(ls -la *.php *.sql 2>/dev/null | head -10)

🌐 アクセスURL:
- メイン画面: http://localhost:8080/modules/yahoo_auction_complete/yahoo_auction_tool_content.php
- API直接: http://localhost:8080/modules/yahoo_auction_complete/api_endpoints_approval.php

🔧 次のステップ:
1. Webサーバーが起動していることを確認
2. ブラウザでメイン画面にアクセス
3. 「商品承認」タブをクリック
4. 承認システムが正常に動作することを確認

⚠️ トラブルシューティング:
- エラーが発生した場合は setup.log を確認
- データベース接続エラーは PostgreSQL設定を確認
- PHP エラーは Webサーバーのエラーログを確認

================================================
EOF

print_success "セットアップレポート生成完了: setup_report.txt"

# Step 10: 最終メッセージ
echo ""
echo "========================================"
echo -e "${GREEN}🎉 承認システムセットアップ完了! 🎉${NC}"
echo "========================================"
echo ""
print_success "✅ データベーススキーマ適用完了"
print_success "✅ APIエンドポイント設定完了"
print_success "✅ システム統合完了"
print_success "✅ ファイル権限設定完了"
echo ""
print_status "📋 次のステップ:"
echo "   1. Webサーバーにアクセス"
echo "   2. Yahoo Auction Toolを開く"
echo "   3. 「商品承認」タブをクリック"
echo "   4. 承認システムの動作を確認"
echo ""
print_status "🌐 アクセスURL:"
echo "   http://localhost:8080/modules/yahoo_auction_complete/yahoo_auction_tool_content.php"
echo ""
print_status "📖 詳細レポート: setup_report.txt"
echo ""

# 自動ブラウザ起動（オプション）
read -p "ブラウザで自動的に開きますか？ (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if command -v open &> /dev/null; then
        open "http://localhost:8080/modules/yahoo_auction_complete/yahoo_auction_tool_content.php"
        print_success "ブラウザで開きました"
    else
        print_warning "ブラウザの自動起動はサポートされていません"
    fi
fi

# クリーンアップ
rm -f test_result.log 2>/dev/null

print_success "🚀 承認システムの準備が完了しました！"

# 最後にシステム状態を表示
echo ""
print_status "💻 システム状態サマリー:"
echo "   Database: ✅ Connected ($DB_NAME)"
echo "   Tables:   ✅ Created (${TABLE_COUNT:-Unknown} approval tables)"
echo "   Products: ✅ Ready (${PRODUCT_COUNT:-0} items)"
echo "   API:      ✅ Configured"
echo "   UI:       ✅ Integrated"
echo ""

exit 0
