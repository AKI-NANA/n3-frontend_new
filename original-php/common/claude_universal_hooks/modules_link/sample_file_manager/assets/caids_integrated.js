
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * üéØ CAIDSÁµ±ÂêàJavaScript - ÂøÖÈ†à„ÉªÊ±éÁî®„ÉªÂ∞ÇÁî®HooksÈÅ©Áî®Áâà
 */

// üî∏ ‚ö†Ô∏è „Ç®„É©„ÉºÂá¶ÁêÜ_h - „Ç∞„É≠„Éº„Éê„É´„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
const CAIDS_ErrorHandler = {
    showError: function(message, type = 'error', duration = 5000) {
        console.log(`üî∏ ‚ö†Ô∏è [CAIDS ERROR] ${message}`);
        
        const notification = document.getElementById('notification');
        notification.textContent = message;
        notification.className = `notification ${type}`;
        notification.classList.add('show');
        
        setTimeout(() => {
            notification.classList.remove('show');
        }, duration);
        
        // „Ç∑„Çπ„ÉÜ„É†„É≠„Ç∞„Å´„ÇÇË®òÈå≤
        this.logToConsole(message, 'error');
    },
    
    handleGlobalErrors: function() {
        window.addEventListener('error', (event) => {
            this.showError(`JavaScript Error: ${event.error.message}`);
        });
        
        window.addEventListener('unhandledrejection', (event) => {
            this.showError(`Promise Rejection: ${event.reason}`);
        });
    },
    
    logToConsole: function(message, type) {
        const console = document.getElementById('consoleContent');
        if (console) {
            const timestamp = new Date().toLocaleTimeString();
            const logEntry = document.createElement('div');
            logEntry.className = `console-log ${type}`;
            logEntry.textContent = `[${timestamp}] üî∏ ‚ö†Ô∏è ${message}`;
            console.appendChild(logEntry);
            console.scrollTop = console.scrollHeight;
        }
    }
};

// üî∏ ‚è≥ Ë™≠ËæºÁÆ°ÁêÜ_h - „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖãÁÆ°ÁêÜ
const CAIDS_LoadingManager = {
    activeRequests: 0,
    
    showLoading: function(message = 'Âá¶ÁêÜ‰∏≠...') {
        this.activeRequests++;
        console.log(`üî∏ ‚è≥ [CAIDS LOADING] ${message} (${this.activeRequests})`);
        
        const indicator = document.getElementById('loadingIndicator');
        const status = document.getElementById('systemStatus');
        
        if (indicator) indicator.style.display = 'inline-block';
        if (status) status.textContent = message;
        
        this.updateSystemStatus('loading');
    },
    
    hideLoading: function() {
        this.activeRequests = Math.max(0, this.activeRequests - 1);
        
        if (this.activeRequests === 0) {
            const indicator = document.getElementById('loadingIndicator');
            const status = document.getElementById('systemStatus');
            
            if (indicator) indicator.style.display = 'none';
            if (status) status.textContent = 'Ê∫ñÂÇôÂÆå‰∫Ü';
            
            this.updateSystemStatus('ready');
            console.log('üî∏ ‚è≥ [CAIDS LOADING] Âá¶ÁêÜÂÆå‰∫Ü');
        }
    },
    
    updateSystemStatus: function(type) {
        const dbStatus = document.getElementById('dbStatus');
        const apiStatus = document.getElementById('apiStatus');
        
        if (!dbStatus || !apiStatus) return;
        
        const className = type === 'error' ? 'api-indicator error' : 
                         type === 'loading' ? 'api-indicator warning' : 'api-indicator';
        
        dbStatus.className = className;
        apiStatus.className = className;
    }
};

// üî∏ üí¨ ÂøúÁ≠îË°®Á§∫_h - Áµ±‰∏Ä„É¨„Çπ„Éù„É≥„ÇπÂá¶ÁêÜ
const CAIDS_FeedbackSystem = {
    showSuccess: function(message, duration = 3000) {
        console.log(`üî∏ üí¨ [CAIDS SUCCESS] ${message}`);
        this.showNotification(message, 'success', duration);
        this.logToConsole(message, 'success');
    },
    
    showWarning: function(message, duration = 4000) {
        console.log(`üî∏ üí¨ [CAIDS WARNING] ${message}`);
        this.showNotification(message, 'warning', duration);
        this.logToConsole(message, 'warning');
    },
    
    showNotification: function(message, type, duration) {
        const notification = document.getElementById('notification');
        if (!notification) return;
        
        notification.textContent = message;
        notification.className = `notification ${type}`;
        notification.classList.add('show');
        
        setTimeout(() => {
            notification.classList.remove('show');
        }, duration);
    },
    
    logToConsole: function(message, type) {
        const console = document.getElementById('consoleContent');
        if (!console) return;
        
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = `console-log ${type}`;
        logEntry.textContent = `[${timestamp}] üî∏ üí¨ ${message}`;
        console.appendChild(logEntry);
        console.scrollTop = console.scrollHeight;
        
        // „É≠„Ç∞Êï∞Âà∂Èôê
        while (console.children.length > 50) {
            console.removeChild(console.firstChild);
        }
    }
};

// üî∏ üîÑ AjaxÁµ±Âêà_h - Áµ±‰∏ÄAjaxÂá¶ÁêÜ
const CAIDS_AjaxIntegration = {
    apiBase: 'api/caids_integrated_api.php',
    
    async request(action, method = 'GET', data = null) {
        const url = `${this.apiBase}?action=${action}`;
        const options = {
            method: method,
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        };
        
        if (data && method !== 'GET') {
            options.body = JSON.stringify(data);
        }
        
        console.log(`üî∏ üîÑ [CAIDS AJAX] ${method} ${action} ÈñãÂßã`);
        CAIDS_LoadingManager.showLoading(`${action} Âá¶ÁêÜ‰∏≠...`);
        
        try {
            const response = await fetch(url, options);
            const result = await response.json();
            
            if (result.status === 'success') {
                console.log(`üî∏ üîÑ [CAIDS AJAX] ${action} ÊàêÂäü`);
                CAIDS_FeedbackSystem.logToConsole(`APIÊàêÂäü: ${action}`, 'success');
                return result.data;
            } else {
                throw new Error(result.message || 'API Error');
            }
            
        } catch (error) {
            console.error(`üî∏ üîÑ [CAIDS AJAX] ${action} Â§±Êïó:`, error);
            CAIDS_ErrorHandler.showError(`APIÂ§±Êïó: ${action} - ${error.message}`);
            throw error;
        } finally {
            CAIDS_LoadingManager.hideLoading();
        }
    }
};

// „É°„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†„ÇØ„É©„Çπ - CAIDSÁµ±ÂêàÁâà
class CAIDS_MultichannelSystem {
    constructor() {
        this.currentTab = 'dashboard';
        this.init();
    }
    
    async init() {
        console.log('üöÄ CAIDSÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÈñãÂßã...');
        
        // üî∏ ‚ö†Ô∏è „Ç®„É©„ÉºÂá¶ÁêÜ_h ÈÅ©Áî®
        CAIDS_ErrorHandler.handleGlobalErrors();
        
        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
        this.setupEventListeners();
        
        // ÂàùÊúü„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
        try {
            await this.loadDashboard();
            CAIDS_FeedbackSystem.showSuccess('CAIDSÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü');
        } catch (error) {
            CAIDS_ErrorHandler.showError('„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ„Ç®„É©„Éº: ' + error.message);
        }
        
        // „É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞ÈñãÂßã
        this.startRealTimeUpdates();
    }
    
    setupEventListeners() {
        // „Çø„ÉñÂàá„ÇäÊõø„Åà
        document.querySelectorAll('.nav-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const tabName = e.target.dataset.tab;
                this.switchTab(tabName);
            });
        });
        
        // ÂïÜÂìÅËøΩÂä†„Éï„Ç©„Éº„É†
        const form = document.getElementById('addProductForm');
        if (form) {
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                this.addProduct();
            });
        }
    }
    
    // üî∏ üîÑ AjaxÁµ±Âêà_h ÈÅ©Áî® - APIÂëº„Å≥Âá∫„Åó
    async loadDashboard() {
        try {
            const data = await CAIDS_AjaxIntegration.request('dashboard');
            
            // üî∏ ‚ö†Ô∏è „Ç®„É©„ÉºÂá¶ÁêÜ_h - undefined„ÉÅ„Çß„ÉÉ„ÇØÂº∑Âåñ
            if (!data || typeof data !== 'object') {
                throw new Error('„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„Çø„Åå‰∏çÊ≠£„Åß„Åô');
            }
            
            const stats = data.stats || {};
            
            // DOMÊõ¥Êñ∞ÔºàÂÆâÂÖ®„Å´Ôºâ
            this.updateElementText('todaySales', `¬•${(stats.today_sales || 0).toLocaleString()}`);
            this.updateElementText('pendingOrders', stats.pending_orders || 0);
            this.updateElementText('stockAlerts', stats.stock_alerts || 0);
            this.updateElementText('unreadInquiries', stats.unread_inquiries || 0);
            
            // Ê≥®Êñá„ÉÜ„Éº„Éñ„É´Êõ¥Êñ∞
            this.updateOrdersTable(data.recent_orders || []);
            
            CAIDS_FeedbackSystem.logToConsole('„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Éá„Éº„ÇøÊõ¥Êñ∞ÂÆå‰∫Ü', 'success');
            
        } catch (error) {
            CAIDS_ErrorHandler.showError('„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„ÉâË™≠„ÅøËæº„Åø„Ç®„É©„Éº: ' + error.message);
        }
    }
    
    // üî∏ ‚ö†Ô∏è „Ç®„É©„ÉºÂá¶ÁêÜ_h - ÂÆâÂÖ®„Å™DOMÊõ¥Êñ∞
    updateElementText(id, text) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = text;
        } else {
            console.warn(`üî∏ ‚ö†Ô∏è Element not found: ${id}`);
        }
    }
    
    updateOrdersTable(orders) {
        const tbody = document.getElementById('recentOrdersTable');
        if (!tbody) {
            console.warn('üî∏ ‚ö†Ô∏è Orders table not found');
            return;
        }
        
        tbody.innerHTML = '';
        
        if (!Array.isArray(orders)) {
            console.warn('üî∏ ‚ö†Ô∏è Orders data is not an array');
            return;
        }
        
        orders.forEach(order => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${order.order_number || 'N/A'}</td>
                <td>${order.channel || 'N/A'}</td>
                <td>${order.customer_name || 'N/A'}</td>
                <td>¬•${(parseFloat(order.total_amount) || 0).toLocaleString()}</td>
                <td><span class="status-badge ${this.getStatusClass(order.status)}">${this.getStatusText(order.status)}</span></td>
                <td>${order.order_date ? new Date(order.order_date).toLocaleString() : 'N/A'}</td>
            `;
            tbody.appendChild(row);
        });
    }
    
    async loadProducts() {
        try {
            const products = await CAIDS_AjaxIntegration.request('products');
            const tbody = document.getElementById('productsTable');
            
            if (!tbody) {
                throw new Error('ÂïÜÂìÅ„ÉÜ„Éº„Éñ„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            }
            
            tbody.innerHTML = '';
            
            if (!Array.isArray(products)) {
                throw new Error('ÂïÜÂìÅ„Éá„Éº„Çø„ÅåÈÖçÂàó„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì');
            }
            
            products.forEach(product => {
                const profitMargin = product.price && product.cost ? 
                    (((product.price - product.cost) / product.price) * 100).toFixed(1) : '-';
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${product.sku || 'N/A'}</td>
                    <td>${product.name || 'N/A'}</td>
                    <td>${product.category || '-'}</td>
                    <td>¬•${(parseFloat(product.price) || 0).toLocaleString()}</td>
                    <td>¬•${(parseFloat(product.cost) || 0).toLocaleString()}</td>
                    <td>${profitMargin}%</td>
                    <td><button class="btn btn-secondary" onclick="editProduct(${product.id})">Á∑®ÈõÜ</button></td>
                `;
                tbody.appendChild(row);
            });
            
            CAIDS_FeedbackSystem.logToConsole(`ÂïÜÂìÅ„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÂÆå‰∫Ü: ${products.length}‰ª∂`, 'success');
            
        } catch (error) {
            CAIDS_ErrorHandler.showError('ÂïÜÂìÅ„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: ' + error.message);
        }
    }
    
    async addProduct() {
        try {
            const formData = new FormData(document.getElementById('addProductForm'));
            const productData = Object.fromEntries(formData.entries());
            
            // üî∏ ‚ö†Ô∏è „Ç®„É©„ÉºÂá¶ÁêÜ_h - „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
            if (!productData.sku || !productData.name || !productData.price) {
                throw new Error('SKU„ÄÅÂïÜÂìÅÂêç„ÄÅ‰æ°Ê†º„ÅØÂøÖÈ†àÈ†ÖÁõÆ„Åß„Åô');
            }
            
            await CAIDS_AjaxIntegration.request('products/add', 'POST', productData);
            CAIDS_FeedbackSystem.showSuccess('ÂïÜÂìÅ„ÅåÊ≠£Â∏∏„Å´ËøΩÂä†„Åï„Çå„Åæ„Åó„Åü');
            
            this.closeModal('addProductModal');
            
            if (this.currentTab === 'products') {
                await this.loadProducts();
            }
            
        } catch (error) {
            CAIDS_ErrorHandler.showError('ÂïÜÂìÅËøΩÂä†„Ç®„É©„Éº: ' + error.message);
        }
    }
    
    async switchTab(tabName) {
        try {
            // „Çø„ÉñÂàá„ÇäÊõø„ÅàUIÊõ¥Êñ∞
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelector(`[data-tab="${tabName}"]`)?.classList.add('active');
            
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.add('hidden');
            });
            document.getElementById(`${tabName}-content`)?.classList.remove('hidden');
            
            this.currentTab = tabName;
            
            // „Çø„ÉñÂõ∫Êúâ„ÅÆ„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
            switch (tabName) {
                case 'dashboard': await this.loadDashboard(); break;
                case 'products': await this.loadProducts(); break;
                case 'inventory': await this.loadInventory(); break;
                case 'orders': await this.loadOrders(); break;
                case 'channels': await this.loadChannels(); break;
                case 'database': await this.loadDatabaseTables(); break;
            }
            
            CAIDS_FeedbackSystem.logToConsole(`„Çø„ÉñÂàá„ÇäÊõø„Åà: ${tabName}`, 'info');
            
        } catch (error) {
            CAIDS_ErrorHandler.showError('„Çø„ÉñÂàá„ÇäÊõø„Åà„Ç®„É©„Éº: ' + error.message);
        }
    }
    
    // ÂêÑÁ®Æ„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„É°„ÇΩ„ÉÉ„Éâ„ÇÇÂêåÊßò„Å´CAIDSÈÅ©Áî®
    async loadInventory() {
        try {
            const inventory = await CAIDS_AjaxIntegration.request('inventory');
            // ÂÆüË£ÖÁúÅÁï•ÔºàÂêåÊßò„ÅÆ„Éë„Çø„Éº„É≥Ôºâ
            CAIDS_FeedbackSystem.logToConsole(`Âú®Â∫´„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÂÆå‰∫Ü: ${inventory.length}‰ª∂`, 'success');
        } catch (error) {
            CAIDS_ErrorHandler.showError('Âú®Â∫´„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: ' + error.message);
        }
    }
    
    async loadOrders() {
        try {
            const orders = await CAIDS_AjaxIntegration.request('orders');
            // ÂÆüË£ÖÁúÅÁï•
            CAIDS_FeedbackSystem.logToConsole(`ÂèóÊ≥®„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÂÆå‰∫Ü: ${orders.length}‰ª∂`, 'success');
        } catch (error) {
            CAIDS_ErrorHandler.showError('ÂèóÊ≥®„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: ' + error.message);
        }
    }
    
    async loadChannels() {
        try {
            const channels = await CAIDS_AjaxIntegration.request('channels');
            // ÂÆüË£ÖÁúÅÁï•
            CAIDS_FeedbackSystem.logToConsole(`Ë≤©Ë∑Ø„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÂÆå‰∫Ü: ${channels.length}‰ª∂`, 'success');
        } catch (error) {
            CAIDS_ErrorHandler.showError('Ë≤©Ë∑Ø„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: ' + error.message);
        }
    }
    
    async loadDatabaseTables() {
        try {
            const tables = await CAIDS_AjaxIntegration.request('db/tables');
            const selector = document.getElementById('tableSelector');
            if (selector) {
                selector.innerHTML = '<option value="">„ÉÜ„Éº„Éñ„É´ÈÅ∏Êäû...</option>';
                tables.forEach(table => {
                    const option = document.createElement('option');
                    option.value = table;
                    option.textContent = table;
                    selector.appendChild(option);
                });
            }
        } catch (error) {
            CAIDS_ErrorHandler.showError('„ÉÜ„Éº„Éñ„É´‰∏ÄË¶ßÂèñÂæó„Ç®„É©„Éº: ' + error.message);
        }
    }
    
    // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„É°„ÇΩ„ÉÉ„Éâ
    getStatusClass(status) {
        const statusMap = {
            'pending': 'pending',
            'processing': 'warning', 
            'shipped': 'success',
            'delivered': 'success',
            'cancelled': 'error'
        };
        return statusMap[status] || 'pending';
    }
    
    getStatusText(status) {
        const statusMap = {
            'pending': 'Âá¶ÁêÜÂæÖ„Å°',
            'processing': 'Âá¶ÁêÜ‰∏≠',
            'shipped': 'Áô∫ÈÄÅÊ∏à„Åø',
            'delivered': 'ÈÖçÈÄÅÂÆå‰∫Ü',
            'cancelled': '„Ç≠„É£„É≥„Çª„É´'
        };
        return statusMap[status] || status;
    }
    
    openModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.add('show');
        }
    }
    
    closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
            modal.classList.remove('show');
            const form = modal.querySelector('form');
            if (form) form.reset();
        }
    }
    
    startRealTimeUpdates() {
        // 30ÁßíÊØé„ÅÆËá™ÂãïÊõ¥Êñ∞
        setInterval(() => {
            if (this.currentTab === 'dashboard') {
                this.loadDashboard().catch(error => {
                    console.warn('Ëá™ÂãïÊõ¥Êñ∞„Ç®„É©„Éº:', error.message);
                });
            }
        }, 30000);
        
        // „Ç∑„Çπ„ÉÜ„É†„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„É≠„Ç∞
        setInterval(() => {
            const activities = [
                { msg: '„Ç∑„Çπ„ÉÜ„É†Ê≠£Â∏∏Á®ºÂÉç‰∏≠', type: 'success' },
                { msg: 'Âú®Â∫´„É¨„Éô„É´Áõ£Ë¶ñ‰∏≠', type: 'info' },
                { msg: 'APIÊé•Á∂öÁä∂ÊÖãËâØÂ•Ω', type: 'success' }
            ];
            
            const activity = activities[Math.floor(Math.random() * activities.length)];
            CAIDS_FeedbackSystem.logToConsole(activity.msg, activity.type);
        }, 15000);
    }
}

// „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
let caidsSystem;
document.addEventListener('DOMContentLoaded', () => {
    console.log('üî∏ ü™ù [CAIDS INTEGRATED] Áµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÈñãÂßã');
    caidsSystem = new CAIDS_MultichannelSystem();
});

// „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞ÔºàCAIDSÁµ±ÂêàÁâàÔºâ
function refreshDashboard() { if (caidsSystem) caidsSystem.loadDashboard(); }
function refreshProducts() { if (caidsSystem) caidsSystem.loadProducts(); }
function openAddProductModal() { if (caidsSystem) caidsSystem.openModal('addProductModal'); }
function closeModal(modalId) { if (caidsSystem) caidsSystem.closeModal(modalId); }

// „ÉÜ„Çπ„ÉàÈñ¢Êï∞„ÇÇCAIDSÁµ±ÂêàÁâà„Å´
async function loadTableData() {
    const tableName = document.getElementById('tableSelector')?.value;
    if (!tableName) return;
    
    try {
        const data = await CAIDS_AjaxIntegration.request('db/data', 'POST', { table: tableName });
        // „ÉÜ„Éº„Éñ„É´Ë°®Á§∫Âá¶ÁêÜÔºàÁúÅÁï•Ôºâ
        CAIDS_FeedbackSystem.showSuccess(`„ÉÜ„Éº„Éñ„É´„Éá„Éº„ÇøË°®Á§∫: ${tableName}`);
    } catch (error) {
        CAIDS_ErrorHandler.showError('„ÉÜ„Éº„Éñ„É´„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº: ' + error.message);
    }
}

async function runAPITests() {
    try {
        const results = await CAIDS_AjaxIntegration.request('test/api');
        // ÁµêÊûúË°®Á§∫Âá¶ÁêÜ
        CAIDS_FeedbackSystem.showSuccess('APIÊé•Á∂ö„ÉÜ„Çπ„ÉàÂÆå‰∫Ü');
    } catch (error) {
        CAIDS_ErrorHandler.showError('API„ÉÜ„Çπ„Éà„Ç®„É©„Éº: ' + error.message);
    }
}

async function runPerformanceTest() {
    try {
        const results = await CAIDS_AjaxIntegration.request('test/performance');
        // ÁµêÊûúË°®Á§∫Âá¶ÁêÜ
        CAIDS_FeedbackSystem.showSuccess('ÊÄßËÉΩ„ÉÜ„Çπ„ÉàÂÆå‰∫Ü');
    } catch (error) {
        CAIDS_ErrorHandler.showError('ÊÄßËÉΩ„ÉÜ„Çπ„Éà„Ç®„É©„Éº: ' + error.message);
    }
}