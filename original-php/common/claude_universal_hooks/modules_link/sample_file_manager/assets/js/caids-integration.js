
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * üéØ CAIDSÁµ±Âêà„Ç∑„Çπ„ÉÜ„É† - „Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥Áî®JavaScript
 * CAIDS„ÅÆÂÖ®Ê©üËÉΩ„Çí„Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥Áî®„Å´Áµ±Âêà„Åó„ÅüJavaScript„Éï„Ç°„Ç§„É´
 */

// CAIDS„Ç≥„Ç¢„Ç∑„Çπ„ÉÜ„É† - „Éá„É¢„É≥„Çπ„Éà„É¨„Éº„Ç∑„Éß„É≥Áâà
window.CAIDS = {
    version: '1.0.0-demo',
    initialized: false,
    
    // ÂøÖÈ†àHooks - ÈáèÂ≠êÂåñÁâà
    essentialHooks: [
        'üî∏ ‚ö†Ô∏è „Ç®„É©„ÉºÂá¶ÁêÜ_h',
        'üî∏ ‚è≥ Ë™≠ËæºÁÆ°ÁêÜ_h', 
        'üî∏ üí¨ ÂøúÁ≠îË°®Á§∫_h',
        'üî∏ üîÑ AjaxÁµ±Âêà_h',
        'üî∏ üìè ÊñáÂ≠óÂà∂Èôê_h',
        'üî∏ üö™ ÈñãÁô∫Âà∂Âæ°_h',
        'üî∏ üìù Ëá™ÁÑ∂Ë™¨Êòé_h',
        'üî∏ üö´ HTMLÁ¶ÅÊ≠¢_h',
        'üî∏ üìÅ „Éï„Ç°„Ç§„É´Âà∂Èôê_h',
        'üî∏ üîÑ „ÉÅ„É£„ÉÉ„ÉàÁ∂ôÁ∂ö_h',
        'üî∏ ü™ù Áµ±ÂêàÁÆ°ÁêÜ_h',
        'üî∏ üìä ÊñáÂ≠óÁõ£Ë¶ñ_h',
        'üî∏ üíæ Á∑äÊÄ•ËìÑÁ©ç_h'
    ],
    
    // Ê±éÁî®Hooks - 190Á®ÆÈ°û„Åã„ÇâÊäúÁ≤ã„Éá„É¢Áâà
    universalHooks: {
        css_hooks: [
            'üî∏ üé® BEMÂëΩÂêç_h',
            'üî∏ üì± „É¨„Çπ„Éù„É≥„Ç∑„Éñ_h', 
            'üî∏ üåô „ÉÄ„Éº„ÇØ„É¢„Éº„Éâ_h',
            'üî∏ ‚ú® „Ç∑„É£„Éâ„Ç¶ÂäπÊûú_h',
            'üî∏ üé® „Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥_h'
        ],
        js_hooks: [
            'üî∏ ‚ö° „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥_h',
            'üî∏ üîÑ AjaxÁµ±Âêà_h',
            'üî∏ üìä „Éï„Ç©„Éº„É†Ê§úË®º_h',
            'üî∏ üéØ „Ç§„Éô„É≥„ÉàÂßîË≠≤_h',
            'üî∏ üíæ „É≠„Éº„Ç´„É´‰øùÂ≠ò_h'
        ],
        performance_hooks: [
            'üî∏ ‚ö° „Ç≠„É£„ÉÉ„Ç∑„É•ÊúÄÈÅ©Âåñ_h',
            'üî∏ üîÑ ‰∏¶ÂàóÂá¶ÁêÜ_h',
            'üî∏ üìä „É°„Éà„É™„ÇØ„ÇπÁõ£Ë¶ñ_h',
            'üî∏ üöÄ ÈÅÖÂª∂Ë™≠Ëæº_h'
        ]
    },
    
    // „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†
    errorHandler: {
        handle: function(error, category, context) {
            const errorId = 'ERR_' + Date.now();
            console.log(`üö® CAIDS Error [${errorId}]:`, error);
            
            // „Éá„É¢Áî®„Ç®„É©„ÉºÂá¶ÁêÜ
            this.logError(errorId, error, category, context);
            return errorId;
        },
        
        logError: function(errorId, error, category, context) {
            // „Éá„É¢Áî®„É≠„Ç∞Ë°®Á§∫
            if (window.demoSystem) {
                window.demoSystem.log('system', 'error', `[ERROR] ${errorId}: ${error.message || error}`);
            }
        }
    },
    
    // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ„Ç∑„Çπ„ÉÜ„É†
    performanceMonitor: {
        metrics: {
            cacheHitRate: 0,
            processingTime: 0,
            memoryUsage: 0
        },
        
        updateMetrics: function(newMetrics) {
            Object.assign(this.metrics, newMetrics);
            
            if (window.demoSystem) {
                window.demoSystem.log('performance', 'info', 
                    `[METRICS] Cache: ${this.metrics.cacheHitRate}%, Time: ${this.metrics.processingTime}ms`);
            }
        }
    },
    
    // „Çµ„Éº„Ç≠„ÉÉ„Éà„Éñ„É¨„Éº„Ç´„Éº„Ç∑„Çπ„ÉÜ„É†
    circuitBreaker: {
        state: 'closed', // closed, open, half-open
        
        setState: function(newState) {
            this.state = newState;
            if (window.demoSystem) {
                window.demoSystem.log('system', 'info', `[CIRCUIT] State: ${newState.toUpperCase()}`);
            }
        },
        
        trigger: function() {
            this.setState('open');
            
            setTimeout(() => {
                this.setState('half-open');
            }, 2000);
            
            setTimeout(() => {
                this.setState('closed');
            }, 4000);
        }
    },
    
    // ÂàùÊúüÂåñ
    init: function() {
        if (this.initialized) {
            console.log('‚ö†Ô∏è CAIDS already initialized');
            return;
        }
        
        console.log('üöÄ CAIDSÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÈñãÂßã...');
        
        // ÂøÖÈ†àHooksË™≠„ÅøËæº„Åø„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
        this.loadEssentialHooks();
        
        // „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñÈñãÂßã
        this.startSystemMonitoring();
        
        this.initialized = true;
        console.log('‚úÖ CAIDSÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü');
    },
    
    // ÂøÖÈ†àHooksË™≠„ÅøËæº„Åø
    loadEssentialHooks: function() {
        console.log('üì¶ ÂøÖÈ†àHooksË™≠„ÅøËæº„Åø‰∏≠...');
        
        this.essentialHooks.forEach((hook, index) => {
            setTimeout(() => {
                console.log(`‚úÖ ${hook} Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü`);
            }, index * 100);
        });
        
        setTimeout(() => {
            console.log('üéâ ÂÖ®ÂøÖÈ†àHooksË™≠„ÅøËæº„ÅøÂÆå‰∫Ü (13ÂÄã)');
        }, this.essentialHooks.length * 100 + 500);
    },
    
    // „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñÈñãÂßã
    startSystemMonitoring: function() {
        console.log('üìä „Ç∑„Çπ„ÉÜ„É†Áõ£Ë¶ñÈñãÂßã...');
        
        // ÂÆöÊúüÁöÑ„Å™„Ç∑„Çπ„ÉÜ„É†„ÉÅ„Çß„ÉÉ„ÇØ
        setInterval(() => {
            this.performSystemCheck();
        }, 5000);
        
        // „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ
        setInterval(() => {
            this.updatePerformanceMetrics();
        }, 2000);
    },
    
    // „Ç∑„Çπ„ÉÜ„É†„ÉÅ„Çß„ÉÉ„ÇØ
    performSystemCheck: function() {
        const checks = [
            '„É°„É¢„É™‰ΩøÁî®Èáè„ÉÅ„Çß„ÉÉ„ÇØ',
            '„Éó„É≠„Çª„ÇπÂøúÁ≠îÊÄß„ÉÅ„Çß„ÉÉ„ÇØ', 
            '„Ç®„É©„ÉºÁéá„ÉÅ„Çß„ÉÉ„ÇØ',
            '„Ç≠„É£„ÉÉ„Ç∑„É•Áä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ'
        ];
        
        const randomCheck = checks[Math.floor(Math.random() * checks.length)];
        
        if (window.demoSystem) {
            window.demoSystem.log('system', 'info', `[CHECK] ${randomCheck}ÂÆå‰∫Ü`);
        }
    },
    
    // „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„É°„Éà„É™„ÇØ„ÇπÊõ¥Êñ∞
    updatePerformanceMetrics: function() {
        const metrics = {
            cacheHitRate: Math.min(95, Math.random() * 20 + 75),
            processingTime: Math.max(10, Math.random() * 50 + 20),
            memoryUsage: Math.max(64, Math.random() * 100 + 80)
        };
        
        this.performanceMonitor.updateMetrics(metrics);
    }
};

// AIÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†
window.CAIDSAIIntegration = {
    proposals: [],
    
    // AIÊèêÊ°àÁîüÊàê
    generateProposal: function() {
        const proposalTypes = [
            'UI„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÊúÄÈÅ©Âåñ„ÅÆÊé®Â•®',
            'Êñ∞„Åó„ÅÑHooks„Éë„Çø„Éº„É≥„ÅÆÊèêÊ°à',
            '„Çª„Ç≠„É•„É™„ÉÜ„Ç£Âº∑Âåñ„ÅÆÊé®Â•®',
            '„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊîπÂñÑ„ÅÆÊèêÊ°à',
            'ÈáèÂ≠êÂåñHooksÈÅ©Áî®„ÅÆÊé®Â•®'
        ];
        
        const proposal = {
            id: 'AI_' + Date.now(),
            type: proposalTypes[Math.floor(Math.random() * proposalTypes.length)],
            timestamp: new Date(),
            status: 'pending'
        };
        
        this.proposals.push(proposal);
        
        if (window.demoSystem) {
            window.demoSystem.log('system', 'info', `[AI] üß† AIÊèêÊ°à: ${proposal.type}`);
        }
        
        return proposal;
    },
    
    // ÊèêÊ°àËá™ÂãïÁîüÊàêÈñãÂßã
    startAutoProposals: function() {
        setInterval(() => {
            this.generateProposal();
        }, 10000);
    }
};

// HooksÈÅ©Áî®„Ç∑„Çπ„ÉÜ„É†
window.CAIDSHooksApplier = {
    appliedHooks: new Set(),
    
    // HookÈÅ©Áî®
    applyHook: function(hookName, targetElement) {
        if (this.appliedHooks.has(hookName)) {
            console.log(`‚ö†Ô∏è Hook ${hookName} already applied`);
            return;
        }
        
        console.log(`ü™ù Applying hook: ${hookName}`);
        
        // „Éá„É¢Áî®HookÂäπÊûú
        this.executeHookEffect(hookName, targetElement);
        
        this.appliedHooks.add(hookName);
        
        if (window.demoSystem) {
            window.demoSystem.log('hooks', 'success', `[APPLY] ${hookName} ÈÅ©Áî®ÂÆå‰∫Ü`);
        }
    },
    
    // HookÂäπÊûúÂÆüË°å
    executeHookEffect: function(hookName, element) {
        const effects = {
            'darkmode': () => this.applyDarkMode(element),
            'animation': () => this.applyAnimation(element),
            'gradient': () => this.applyGradient(element),
            'shadow': () => this.applyShadow(element),
            'responsive': () => this.applyResponsive(element)
        };
        
        if (effects[hookName]) {
            effects[hookName]();
        }
    },
    
    applyDarkMode: function(element) {
        element.style.background = '#1a1a1a';
        element.style.color = '#00ff00';
    },
    
    applyAnimation: function(element) {
        element.style.transition = 'all 0.3s ease';
        element.style.transform = 'scale(1.05)';
        setTimeout(() => {
            element.style.transform = 'scale(1)';
        }, 300);
    },
    
    applyGradient: function(element) {
        element.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
    },
    
    applyShadow: function(element) {
        element.style.boxShadow = '0 20px 40px rgba(0,0,0,0.3)';
    },
    
    applyResponsive: function(element) {
        element.style.fontSize = '1.2rem';
        element.style.padding = '1.2rem 2.4rem';
    }
};

// Áµ±ÂêàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
window.CAIDSIntegrationManager = {
    systems: {
        core: window.CAIDS,
        ai: window.CAIDSAIIntegration,
        hooks: window.CAIDSHooksApplier
    },
    
    // ÂÖ®„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
    initializeAll: function() {
        console.log('üöÄ CAIDSÁµ±Âêà„Ç∑„Çπ„ÉÜ„É† - ÂÖ®Ê©üËÉΩÂàùÊúüÂåñÈñãÂßã');
        
        // „Ç≥„Ç¢„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
        this.systems.core.init();
        
        // AIÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
        this.systems.ai.startAutoProposals();
        
        console.log('‚úÖ CAIDSÁµ±Âêà„Ç∑„Çπ„ÉÜ„É† - ÂÖ®Ê©üËÉΩÂàùÊúüÂåñÂÆå‰∫Ü');
        
        // „Éá„É¢„Ç∑„Çπ„ÉÜ„É†„Å´ÈÄöÁü•
        if (window.demoSystem) {
            window.demoSystem.log('system', 'success', '[INIT] CAIDSÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÂÖ®Ê©üËÉΩËµ∑ÂãïÂÆå‰∫Ü');
        }
    }
};

// Ëá™ÂãïÂàùÊúüÂåñ
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì¶ CAIDSÁµ±Âêà„Ç∑„Çπ„ÉÜ„É† - DOMË™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
    
    // Â∞ë„ÅóÈÅÖÂª∂„Åï„Åõ„Å¶ÂàùÊúüÂåñ
    setTimeout(() => {
        window.CAIDSIntegrationManager.initializeAll();
    }, 1000);
});

// „Ç∞„É≠„Éº„Éê„É´„Å´ÂÖ¨Èñã
window.CAIDSDemo = {
    applyHook: function(hookType) {
        const button = document.getElementById('demoButton');
        if (button) {
            window.CAIDSHooksApplier.applyHook(hookType, button);
        }
    },
    
    triggerError: function() {
        window.CAIDS.circuitBreaker.trigger();
    },
    
    getSystemStatus: function() {
        return {
            initialized: window.CAIDS.initialized,
            appliedHooks: Array.from(window.CAIDSHooksApplier.appliedHooks),
            circuitBreakerState: window.CAIDS.circuitBreaker.state,
            metrics: window.CAIDS.performanceMonitor.metrics
        };
    }
};

console.log('üéØ CAIDSÁµ±Âêà„Ç∑„Çπ„ÉÜ„É† - JavaScriptË™≠„ÅøËæº„ÅøÂÆå‰∫Ü');