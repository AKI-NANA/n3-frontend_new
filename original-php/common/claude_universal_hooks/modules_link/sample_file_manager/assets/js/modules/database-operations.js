
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * üî∏ üóÑÔ∏è „Éá„Éº„Çø„Éô„Éº„ÇπÊìç‰Ωú„É¢„Ç∏„É•„Éº„É´ - CAIDSÁµ±ÂêàÁâà
 * CRUDÊìç‰Ωú„ÉªÊ§úÁ¥¢„Éª„Éá„Éº„ÇøÂàÜÊûêÊ©üËÉΩ
 */

class DatabaseModule {
    constructor() {
        this.localData = new Map(); // „Éá„É¢Áî®„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏
        this.queryHistory = [];
        this.connectionPool = new Map();
        this.transactionLog = [];
        
        // CAIDSÈáèÂ≠êÂåñHooksÈÅ©Áî®
        this.hooks = {
            create: 'üî∏ ‚ûï „Éá„Éº„Çø‰ΩúÊàê_h',
            read: 'üî∏ üëÅÔ∏è „Éá„Éº„ÇøË™≠Ëæº_h',
            update: 'üî∏ ‚úèÔ∏è „Éá„Éº„ÇøÊõ¥Êñ∞_h',
            delete: 'üî∏ üóëÔ∏è „Éá„Éº„ÇøÂâäÈô§_h',
            search: 'üî∏ üîç Ê§úÁ¥¢_h',
            validate: 'üî∏ ‚úÖ Ê§úË®º_h'
        };
        
        this.initializeDatabase();
    }
    
    initializeDatabase() {
        console.log('üî∏ üóÑÔ∏è „Éá„Éº„Çø„Éô„Éº„Çπ„É¢„Ç∏„É•„Éº„É´ÂàùÊúüÂåñ‰∏≠...');
        
        // „Éá„É¢„Éá„Éº„Çø„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
        this.setupDemoData();
        
        // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàê
        this.createIndexes();
        
        // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„É´„Éº„É´Ë®≠ÂÆö
        this.setupValidationRules();
        
        console.log('‚úÖ „Éá„Éº„Çø„Éô„Éº„Çπ„É¢„Ç∏„É•„Éº„É´ÂàùÊúüÂåñÂÆå‰∫Ü');
    }
    
    setupDemoData() {
        // „Çµ„É≥„Éó„É´„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø
        const sampleUsers = [
            { id: 1, name: 'Áî∞‰∏≠Â§™ÈÉé', email: 'tanaka@example.com', role: 'admin', created_at: '2024-01-01' },
            { id: 2, name: '‰ΩêËó§Ëä±Â≠ê', email: 'sato@example.com', role: 'user', created_at: '2024-01-15' },
            { id: 3, name: 'Èà¥Êú®‰∏ÄÈÉé', email: 'suzuki@example.com', role: 'user', created_at: '2024-02-01' },
            { id: 4, name: 'Â±±Áî∞ÁæéÂí≤', email: 'yamada@example.com', role: 'editor', created_at: '2024-02-15' },
            { id: 5, name: 'Ê∏°Ëæ∫ÂÅ•Â§™', email: 'watanabe@example.com', role: 'user', created_at: '2024-03-01' }
        ];
        
        // „Çµ„É≥„Éó„É´ÂïÜÂìÅ„Éá„Éº„Çø
        const sampleProducts = [
            { id: 1, name: '„Éé„Éº„Éà„Éë„ÇΩ„Ç≥„É≥', price: 89800, category: 'electronics', stock: 15 },
            { id: 2, name: '„ÉØ„Ç§„É§„É¨„Çπ„Éû„Ç¶„Çπ', price: 2980, category: 'electronics', stock: 50 },
            { id: 3, name: '„Ç≥„Éº„Éí„Éº„É°„Éº„Ç´„Éº', price: 12800, category: 'home', stock: 8 },
            { id: 4, name: '„Éì„Ç∏„Éç„ÇπÊõ∏Á±ç', price: 1580, category: 'books', stock: 25 },
            { id: 5, name: '„Çπ„Éû„Éº„Éà„Ç¶„Ç©„ÉÉ„ÉÅ', price: 35900, category: 'electronics', stock: 12 }
        ];
        
        this.localData.set('users', sampleUsers);
        this.localData.set('products', sampleProducts);
        
        console.log('üî∏ üìä „Éá„É¢„Éá„Éº„Çø„Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü');
    }
    
    createIndexes() {
        // Ê§úÁ¥¢ÊÄßËÉΩÂêë‰∏ä„ÅÆ„Åü„ÇÅ„ÅÆ„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÔºà„Éá„É¢ÂÆüË£ÖÔºâ
        this.indexes = {
            users: {
                email: new Map(),
                role: new Map()
            },
            products: {
                category: new Map(),
                price_range: new Map()
            }
        };
        
        console.log('üî∏ üìá „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ‰ΩúÊàêÂÆå‰∫Ü');
    }
    
    setupValidationRules() {
        this.validationRules = {
            users: {
                name: { required: true, minLength: 2, maxLength: 50 },
                email: { required: true, pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/ },
                role: { required: true, enum: ['admin', 'editor', 'user'] }
            },
            products: {
                name: { required: true, minLength: 1, maxLength: 100 },
                price: { required: true, type: 'number', min: 0 },
                category: { required: true, enum: ['electronics', 'home', 'books', 'clothing'] },
                stock: { required: true, type: 'number', min: 0 }
            }
        };
        
        console.log('üî∏ ‚úÖ „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„É´„Éº„É´Ë®≠ÂÆöÂÆå‰∫Ü');
    }
    
    // CREATEÊìç‰Ωú
    async createRecord(table, data) {
        const startTime = Date.now();
        
        try {
            console.log(`üî∏ ‚ûï „Éá„Éº„Çø‰ΩúÊàêÈñãÂßã: ${table}`);
            
            // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
            const validation = this.validateData(table, data);
            if (!validation.valid) {
                throw new Error(`„Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº: ${validation.errors.join(', ')}`);
            }
            
            // Êñ∞„Åó„ÅÑID„ÇíÁîüÊàê
            const existingData = this.localData.get(table) || [];
            const newId = Math.max(...existingData.map(item => item.id || 0), 0) + 1;
            
            // „Çø„Ç§„É†„Çπ„Çø„É≥„ÉóËøΩÂä†
            const newRecord = {
                ...data,
                id: newId,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
            };
            
            // „Éá„Éº„Çø‰øùÂ≠ò
            existingData.push(newRecord);
            this.localData.set(table, existingData);
            
            // „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊõ¥Êñ∞
            this.updateIndexes(table, newRecord, 'create');
            
            // „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„É≠„Ç∞
            this.logTransaction('CREATE', table, newRecord.id, newRecord);
            
            const responseTime = Date.now() - startTime;
            this.logDatabaseSuccess('create', table, responseTime);
            
            this.displayCreateResult(table, newRecord);
            
            return {
                success: true,
                data: newRecord,
                message: `${table}„Å´„É¨„Ç≥„Éº„Éâ„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü`
            };
            
        } catch (error) {
            const responseTime = Date.now() - startTime;
            this.logDatabaseError('create', table, error, responseTime);
            throw error;
        }
    }
    
    // READÊìç‰Ωú
    async readRecords(table, options = {}) {
        const startTime = Date.now();
        
        try {
            console.log(`üî∏ üëÅÔ∏è „Éá„Éº„ÇøË™≠ËæºÈñãÂßã: ${table}`);
            
            let data = this.localData.get(table) || [];
            
            // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞
            if (options.filter) {
                data = this.applyFilters(data, options.filter);
            }
            
            // „ÇΩ„Éº„Éà
            if (options.sort) {
                data = this.applySorting(data, options.sort);
            }
            
            const responseTime = Date.now() - startTime;
            this.logDatabaseSuccess('read', table, responseTime);
            
            this.displayReadResults(table, data);
            
            return {
                success: true,
                data: data,
                count: data.length
            };
            
        } catch (error) {
            const responseTime = Date.now() - startTime;
            this.logDatabaseError('read', table, error, responseTime);
            throw error;
        }
    }
    
    // Ê§úÁ¥¢Ê©üËÉΩ
    async searchRecords(table, query, options = {}) {
        const startTime = Date.now();
        
        try {
            console.log(`üî∏ üîç Ê§úÁ¥¢ÈñãÂßã: ${table} - "${query}"`);
            
            const data = this.localData.get(table) || [];
            const searchFields = options.fields || Object.keys(data[0] || {});
            
            // Ê§úÁ¥¢ÂÆüË°å
            const results = data.filter(record => {
                return searchFields.some(field => {
                    const value = record[field];
                    if (typeof value === 'string') {
                        return value.toLowerCase().includes(query.toLowerCase());
                    } else if (typeof value === 'number') {
                        return value.toString().includes(query);
                    }
                    return false;
                });
            });
            
            const responseTime = Date.now() - startTime;
            this.logDatabaseSuccess('search', table, responseTime);
            
            this.displaySearchResults(table, results, query);
            
            return {
                success: true,
                data: results,
                query: query,
                resultCount: results.length,
                searchFields: searchFields
            };
            
        } catch (error) {
            const responseTime = Date.now() - startTime;
            this.logDatabaseError('search', table, error, responseTime);
            throw error;
        }
    }
    
    // „Éá„Éº„ÇøÂàÜÊûêÊ©üËÉΩ
    async analyzeData(table, analysisType = 'summary') {
        const startTime = Date.now();
        
        try {
            console.log(`üî∏ üìä „Éá„Éº„ÇøÂàÜÊûêÈñãÂßã: ${table} - ${analysisType}`);
            
            const data = this.localData.get(table) || [];
            let analysisResult = {};
            
            switch (analysisType) {
                case 'summary':
                    analysisResult = this.generateSummaryAnalysis(data);
                    break;
                case 'statistics':
                    analysisResult = this.generateStatisticalAnalysis(data);
                    break;
                default:
                    analysisResult = this.generateSummaryAnalysis(data);
            }
            
            const responseTime = Date.now() - startTime;
            this.logDatabaseSuccess('analyze', table, responseTime);
            
            this.displayAnalysisResults(table, analysisResult, analysisType);
            
            return {
                success: true,
                analysis: analysisResult,
                type: analysisType,
                recordCount: data.length
            };
            
        } catch (error) {
            const responseTime = Date.now() - startTime;
            this.logDatabaseError('analyze', table, error, responseTime);
            throw error;
        }
    }
    
    // „Éá„Éº„Çø„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    validateData(table, data, isPartialUpdate = false) {
        const rules = this.validationRules[table];
        if (!rules) {
            return { valid: true, errors: [] };
        }
        
        const errors = [];
        
        for (const [field, rule] of Object.entries(rules)) {
            const value = data[field];
            
            // ÂøÖÈ†à„Éï„Ç£„Éº„É´„Éâ„ÉÅ„Çß„ÉÉ„ÇØ
            if (rule.required && !isPartialUpdate && (value === undefined || value === null || value === '')) {
                errors.push(`${field}„ÅØÂøÖÈ†à„Åß„Åô`);
                continue;
            }
            
            // ÂÄ§„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆ„Åø„Éê„É™„Éá„Éº„Ç∑„Éß„É≥ÂÆüË°å
            if (value !== undefined && value !== null && value !== '') {
                // Âûã„ÉÅ„Çß„ÉÉ„ÇØ
                if (rule.type === 'number' && typeof value !== 'number') {
                    errors.push(`${field}„ÅØÊï∞ÂÄ§„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô`);
                }
                
                // ÊñáÂ≠óÂàóÈï∑„ÉÅ„Çß„ÉÉ„ÇØ
                if (typeof value === 'string') {
                    if (rule.minLength && value.length < rule.minLength) {
                        errors.push(`${field}„ÅØ${rule.minLength}ÊñáÂ≠ó‰ª•‰∏ä„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô`);
                    }
                    if (rule.maxLength && value.length > rule.maxLength) {
                        errors.push(`${field}„ÅØ${rule.maxLength}ÊñáÂ≠ó‰ª•‰∏ã„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô`);
                    }
                }
                
                // „Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅ„É≥„Ç∞
                if (rule.pattern && typeof value === 'string' && !rule.pattern.test(value)) {
                    errors.push(`${field}„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì`);
                }
                
                // ÂàóÊåôÂÄ§„ÉÅ„Çß„ÉÉ„ÇØ
                if (rule.enum && !rule.enum.includes(value)) {
                    errors.push(`${field}„ÅØ${rule.enum.join(', ')}„ÅÆ„ÅÑ„Åö„Çå„Åã„Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô`);
                }
            }
        }
        
        return {
            valid: errors.length === 0,
            errors: errors
        };
    }
    
    // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞
    applyFilters(data, filters) {
        return data.filter(record => {
            return Object.entries(filters).every(([field, condition]) => {
                const value = record[field];
                
                if (typeof condition === 'object') {
                    // ÁØÑÂõ≤„Éï„Ç£„É´„Çø
                    if (condition.min !== undefined && value < condition.min) return false;
                    if (condition.max !== undefined && value > condition.max) return false;
                    if (condition.equals !== undefined && value !== condition.equals) return false;
                    if (condition.contains && !value.toLowerCase().includes(condition.contains.toLowerCase())) return false;
                } else {
                    // ÂÆåÂÖ®‰∏ÄËá¥
                    if (value !== condition) return false;
                }
                
                return true;
            });
        });
    }
    
    // „Éá„Éº„ÇøÂàÜÊûê„É°„ÇΩ„ÉÉ„Éâ
    generateSummaryAnalysis(data) {
        if (data.length === 0) {
            return { message: '„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì' };
        }
        
        const fields = Object.keys(data[0]);
        const summary = {
            totalRecords: data.length,
            fields: fields.length,
            fieldTypes: {},
            nullCounts: {},
            uniqueCounts: {}
        };
        
        fields.forEach(field => {
            const values = data.map(record => record[field]);
            const nonNullValues = values.filter(v => v !== null && v !== undefined);
            
            summary.fieldTypes[field] = typeof nonNullValues[0];
            summary.nullCounts[field] = values.length - nonNullValues.length;
            summary.uniqueCounts[field] = new Set(nonNullValues).size;
        });
        
        return summary;
    }
    
    generateStatisticalAnalysis(data) {
        const numericFields = Object.keys(data[0] || {}).filter(field => 
            typeof data[0][field] === 'number'
        );
        
        const statistics = {};
        
        numericFields.forEach(field => {
            const values = data.map(record => record[field]).filter(v => !isNaN(v));
            
            if (values.length > 0) {
                values.sort((a, b) => a - b);
                
                const sum = values.reduce((acc, val) => acc + val, 0);
                const mean = sum / values.length;
                const median = values.length % 2 === 0 
                    ? (values[values.length / 2 - 1] + values[values.length / 2]) / 2
                    : values[Math.floor(values.length / 2)];
                
                statistics[field] = {
                    count: values.length,
                    min: Math.min(...values),
                    max: Math.max(...values),
                    mean: Math.round(mean * 100) / 100,
                    median: median,
                    sum: sum
                };
            }
        });
        
        return statistics;
    }
    
    // „Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÊõ¥Êñ∞
    updateIndexes(table, record, operation) {
        // Á∞°Áï•ÂÆüË£ÖÔºàÂÆüÈöõ„Å´„ÅØ„Çà„ÇäË§áÈõë„Å™„Ç§„É≥„Éá„ÉÉ„ÇØ„ÇπÁÆ°ÁêÜ„ÅåÂøÖË¶ÅÔºâ
        if (operation === 'create' || operation === 'update') {
            if (table === 'users' && record.email) {
                this.indexes.users.email.set(record.email, record.id);
            }
        } else if (operation === 'delete') {
            if (table === 'users' && record.email) {
                this.indexes.users.email.delete(record.email);
            }
        }
    }
    
    // „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„É≠„Ç∞
    logTransaction(operation, table, id, newData, oldData = null) {
        const transaction = {
            id: this.transactionLog.length + 1,
            operation: operation,
            table: table,
            recordId: id,
            timestamp: new Date().toISOString(),
            newData: newData,
            oldData: oldData
        };
        
        this.transactionLog.push(transaction);
        
        // ÊúÄÊñ∞100‰ª∂„ÅÆ„Åø‰øùÊåÅ
        if (this.transactionLog.length > 100) {
            this.transactionLog.shift();
        }
    }
    
    // Ë°®Á§∫„É°„ÇΩ„ÉÉ„Éâ
    displayCreateResult(table, record) {
        this.updateDataTable();
        this.showSuccess(`Êñ∞„Åó„ÅÑ${table}„É¨„Ç≥„Éº„Éâ„Çí‰ΩúÊàê`, `ID: ${record.id}`);
    }
    
    displayReadResults(table, data) {
        this.updateDataTable(data);
    }
    
    displaySearchResults(table, results, query) {
        this.updateDataTable(results);
        this.showInfo(`Ê§úÁ¥¢ÁµêÊûú: "${query}"`, `${results.length}‰ª∂Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü`);
    }
    
    displayAnalysisResults(table, analysis, type) {
        const container = document.getElementById('dataStats') || this.createStatsContainer();
        
        let analysisHTML = `<h4>üìä ${table}„Éá„Éº„ÇøÂàÜÊûê (${type})</h4>`;
        
        if (type === 'summary') {
            analysisHTML += `
                <div class="analysis-summary">
                    <div class="stat-item">Á∑è„É¨„Ç≥„Éº„ÉâÊï∞: ${analysis.totalRecords}</div>
                    <div class="stat-item">„Éï„Ç£„Éº„É´„ÉâÊï∞: ${analysis.fields}</div>
                    <div class="stat-item">„É¶„Éã„Éº„ÇØÂÄ§Êï∞: ${JSON.stringify(analysis.uniqueCounts)}</div>
                </div>
            `;
        } else if (type === 'statistics') {
            const statsHTML = Object.entries(analysis).map(([field, stats]) => `
                <div class="field-stats">
                    <h5>${field}</h5>
                    <div class="stats-grid">
                        <div>Âπ≥Âùá: ${stats.mean}</div>
                        <div>‰∏≠Â§ÆÂÄ§: ${stats.median}</div>
                        <div>ÊúÄÂ∞è: ${stats.min}</div>
                        <div>ÊúÄÂ§ß: ${stats.max}</div>
                    </div>
                </div>
            `).join('');
            
            analysisHTML += `<div class="statistical-analysis">${statsHTML}</div>`;
        }
        
        container.innerHTML = analysisHTML;
    }
    
    updateDataTable(data = null) {
        const table = document.getElementById('dataTable');
        if (!table) return;
        
        const currentTable = document.querySelector('.table-selector')?.value || 'users';
        const displayData = data || this.localData.get(currentTable) || [];
        
        if (displayData.length === 0) {
            table.innerHTML = '<div class="no-data">„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
            return;
        }
        
        const headers = Object.keys(displayData[0]);
        
        let tableHTML = `
            <table class="data-table">
                <thead>
                    <tr>
                        ${headers.map(header => `<th>${header}</th>`).join('')}
                        <th>Êìç‰Ωú</th>
                    </tr>
                </thead>
                <tbody>
        `;
        
        displayData.forEach(record => {
            tableHTML += `
                <tr>
                    ${headers.map(header => {
                        const value = record[header];
                        const displayValue = this.escapeHtml(String(value));
                        return `<td>${displayValue}</td>`;
                    }).join('')}
                    <td class="action-buttons">
                        <button onclick="database.editRecord('${currentTable}', ${record.id})" class="btn btn-sm btn-secondary">Á∑®ÈõÜ</button>
                        <button onclick="database.deleteRecord('${currentTable}', ${record.id})" class="btn btn-sm btn-danger">ÂâäÈô§</button>
                    </td>
                </tr>
            `;
        });
        
        tableHTML += '</tbody></table>';
        table.innerHTML = tableHTML;
    }
    
    // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„É°„ÇΩ„ÉÉ„Éâ
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    createStatsContainer() {
        const container = document.createElement('div');
        container.id = 'dataStats';
        container.className = 'data-stats-container';
        
        const targetArea = document.querySelector('.database-crud') || document.body;
        targetArea.appendChild(container);
        
        return container;
    }
    
    // CAIDSÁµ±Âêà„É≠„Ç∞„É°„ÇΩ„ÉÉ„Éâ
    logDatabaseSuccess(operation, table, responseTime) {
        if (window.demoSystem) {
            window.demoSystem.log('database', 'success', `[${operation}] ${table} ÊàêÂäü ${responseTime}ms`);
        }
    }
    
    logDatabaseError(operation, table, error, responseTime) {
        if (window.demoSystem) {
            window.demoSystem.log('database', 'error', `[${operation}] ${table} „Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    showSuccess(message, details) {
        if (window.demoSystem) {
            window.demoSystem.log('database', 'success', `${message} ${details || ''}`);
        }
        console.log('‚úÖ', message, details);
    }
    
    showError(message, details) {
        if (window.demoSystem) {
            window.demoSystem.log('database', 'error', `${message} ${details || ''}`);
        }
        console.error('‚ùå', message, details);
    }
    
    showInfo(message, details) {
        if (window.demoSystem) {
            window.demoSystem.log('database', 'info', `${message} ${details || ''}`);
        }
        console.log('‚ÑπÔ∏è', message, details);
    }
    
    // ÂÖ¨Èñã„É°„ÇΩ„ÉÉ„ÉâÔºà„Éï„Ç©„Éº„É†„Åã„ÇâÂëº„Å≥Âá∫„ÅóÔºâ
    async handleCreateForm(formData) {
        const table = formData.get('table') || 'users';
        const data = {};
        
        // „Éï„Ç©„Éº„É†„Éá„Éº„Çø„ÇíÈÅ©Âàá„Å™Âûã„Å´Â§âÊèõ
        for (const [key, value] of formData.entries()) {
            if (key !== 'table') {
                // Êï∞ÂÄ§„Éï„Ç£„Éº„É´„Éâ„ÅÆÂ§âÊèõ
                if (['price', 'stock', 'age'].includes(key)) {
                    data[key] = parseFloat(value) || 0;
                } else {
                    data[key] = value;
                }
            }
        }
        
        return await this.createRecord(table, data);
    }
    
    async handleSearchForm(formData) {
        const table = formData.get('table') || 'users';
        const query = formData.get('query') || '';
        const fields = formData.get('fields')?.split(',') || [];
        
        return await this.searchRecords(table, query, { fields });
    }
    
    // „ÉÜ„Çπ„ÉàÁî®„É°„ÇΩ„ÉÉ„Éâ
    async runTests() {
        const results = {
            create: await this.testCreateOperation(),
            read: await this.testReadOperation(),
            search: await this.testSearchOperation(),
            analysis: await this.testAnalysisOperation()
        };
        
        console.log('üî∏ üóÑÔ∏è „Éá„Éº„Çø„Éô„Éº„ÇπCRUD„ÉÜ„Çπ„ÉàÁµêÊûú:', results);
        return results;
    }
    
    async testCreateOperation() {
        try {
            const testData = {
                name: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',
                email: 'test@example.com',
                role: 'user'
            };
            
            const result = await this.createRecord('users', testData);
            return { success: true, message: 'CREATEÊìç‰Ωú„ÉÜ„Çπ„ÉàÊàêÂäü' };
        } catch (error) {
            return { success: false, error: error.message };
        }
    }
    
    async testReadOperation() {
        try {
            const result = await this.readRecords('users');
            return { success: true, message: `READÊìç‰Ωú„ÉÜ„Çπ„ÉàÊàêÂäü (${result.count}‰ª∂)` };
        } catch (error) {
            return { success: false, error: error.message };
        }
    }
    
    async testSearchOperation() {
        try {
            const result = await this.searchRecords('users', 'test');
            return { success: true, message: `Ê§úÁ¥¢„ÉÜ„Çπ„ÉàÊàêÂäü (${result.resultCount}‰ª∂)` };
        } catch (error) {
            return { success: false, error: error.message };
        }
    }
    
    async testAnalysisOperation() {
        try {
            const result = await this.analyzeData('users', 'summary');
            return { success: true, message: `ÂàÜÊûê„ÉÜ„Çπ„ÉàÊàêÂäü` };
        } catch (error) {
            return { success: false, error: error.message };
        }
    }
}

// „Ç∞„É≠„Éº„Éê„É´‰ΩøÁî®ÂèØËÉΩ„Å´
window.DatabaseModule = DatabaseModule;

// „Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê
window.database = new DatabaseModule();

console.log('üî∏ üóÑÔ∏è „Éá„Éº„Çø„Éô„Éº„ÇπÊìç‰Ωú„É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');