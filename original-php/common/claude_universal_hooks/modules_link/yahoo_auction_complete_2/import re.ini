import re
import csv
from flask import Flask, render_template_string, request, send_file, redirect, url_for, flash
from scrape_yahoo_auction_advanced import scrape_auction_data, scrape_paypay_fleamarket
import database
from translate import translate_text
from generate_ebay_data import generate_ebay_attributes
import os
import random
from ebay_api import list_item_on_ebay
from flask_cors import CORS

app = Flask(__name__)
app.secret_key = 'your_secret_key'

# HTMLテンプレートを更新
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ヤフオク出品ツール</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .image-container {
            display: flex;
            overflow-x: auto;
            gap: 1rem;
            padding-bottom: 1rem;
        }
        .image-container img {
            min-width: 150px;
            max-width: 150px;
            height: auto;
            object-fit: cover;
        }
    </style>
</head>
<body class="bg-gray-100 flex flex-col items-center justify-center min-h-screen p-4">
    <div class="w-full max-w-2xl bg-white p-6 rounded-lg shadow-md">
        <h1 class="text-3xl font-bold text-center text-gray-800 mb-6">ヤフオク/PayPayフリマ 出品ツール</h1>
        
        {% with messages = get_flashed_messages(with_categories=true) %}
          {% if messages %}
            {% for category, message in messages %}
              <div class="p-4 mb-4 text-sm text-{{ category }}-700 bg-{{ category }}-100 rounded-lg" role="alert">
                {{ message }}
              </div>
            {% endfor %}
          {% endif %}
        {% endwith %}

        <form action="/" method="post" class="space-y-4">
            <input type="hidden" name="auto_mode" value="{{ 'on' if auto_mode else 'off' }}">
            <input 
                type="url" 
                name="url" 
                placeholder="ヤフオクまたはPayPayフリマのURLを貼り付け" 
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                required>
            <button type="submit" class="w-full bg-blue-500 text-white py-2 rounded-lg font-semibold hover:bg-blue-600 transition duration-200">
                データ取得
            </button>
            <div class="flex items-center space-x-2">
                <input type="checkbox" id="auto_mode_toggle" name="auto_mode" {% if auto_mode %}checked{% endif %} class="form-checkbox h-5 w-5 text-blue-600">
                <label for="auto_mode_toggle" class="text-gray-700">自動モードを有効にする (データベースに即時保存)</label>
            </div>
        </form>

        {% if error %}
            <div class="mt-6 p-4 bg-red-100 text-red-700 rounded-lg" role="alert">
                {{ error }}
            </div>
        {% endif %}

        {% if data %}
            <div class="mt-6 p-6 bg-gray-50 rounded-lg shadow-inner">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">取得データ</h2>
                <div class="space-y-2">
                    <p><strong>商品ID:</strong> {{ data.item_id }}</p>
                    <p><strong>URL:</strong> <a href="{{ data.url }}" class="text-blue-500 hover:underline" target="_blank">{{ data.url }}</a></p>
                    <p><strong>タイトル (日本語):</strong> {{ data.title_jp }}</p>
                    <p><strong>価格 (円):</strong> ¥{{ data.price_jpy }}</p>
                    <p><strong>商品説明 (日本語):</strong> {{ data.description_jp }}</p>
                    {% if data.category %}
                        <p><strong>カテゴリー:</strong> {{ data.category }}</p>
                    {% endif %}
                    <p><strong>状態:</strong> {{ data.condition }}</p>
                </div>
                {% if data.image_urls %}
                    <div class="mt-4">
                        <h3 class="text-xl font-semibold mb-2">商品画像</h3>
                        <div class="image-container">
                            {% for img_url in data.image_urls.split('|') %}
                                <img src="{{ img_url }}" alt="商品画像" class="rounded-lg shadow-sm">
                            {% endfor %}
                        </div>
                    </div>
                {% endif %}
                <form action="/save_to_csv" method="post" class="mt-4">
                    <input type="hidden" name="url" value="{{ data.url }}">
                    <button type="submit" class="w-full bg-green-500 text-white py-2 rounded-lg font-semibold hover:bg-green-600 transition duration-200">
                        CSVファイルとして保存
                    </button>
                </form>
                <form action="/list_on_ebay" method="post" class="mt-4">
                    <input type="hidden" name="item_id" value="{{ data.item_id }}">
                    <button type="submit" class="w-full bg-yellow-500 text-white py-2 rounded-lg font-semibold hover:bg-yellow-600 transition duration-200">
                        eBayに出品 (テスト)
                    </button>
                </form>
            </div>
        {% endif %}
    </div>
</body>
</html>
"""

# CSV保存パス
CSV_FILE = 'auctions_data.csv'

@app.route('/', methods=['GET', 'POST'])
def home():
    data = None
    error = None
    auto_mode = request.form.get('auto_mode') == 'on' if request.method == 'POST' else False

    if request.method == 'POST':
        url = request.form['url']
        if 'auctions.yahoo.co.jp' in url:
            scraped_data = scrape_auction_data(url)
        elif 'paypayfleamarket.yahoo.co.jp' in url:
            scraped_data = scrape_paypay_fleamarket(url)
        else:
            error = "サポートされていないURL形式です。ヤフオクまたはPayPayフリマのURLを入力してください。"
        
        if scraped_data:
            try:
                scraped_data['description_en'] = translate_text(scraped_data['description_jp'], 'en')
                scraped_data['title_en'] = translate_text(scraped_data['title_jp'], 'en')

                extracted_attributes = generate_ebay_attributes(
                    scraped_data.get('description_jp', scraped_data.get('description')), 
                    scraped_data.get('category'), 
                    scraped_data.get('title_jp', scraped_data.get('title'))
                )
                scraped_data.update(extracted_attributes)
                
                usd_rate = 0.0068
                price_jpy = scraped_data['price_jpy'] if scraped_data['price_jpy'] is not None else 0.0
                scraped_data['price_usd'] = price_jpy * usd_rate
                
                condition_map = {'未使用': 'New', '中古': 'Used'}
                scraped_data['condition_en'] = condition_map.get(scraped_data.get('condition'), 'Used')
                
                database.save_listing(scraped_data)
                data = scraped_data
            except Exception as e:
                error = f"データの変換中にエラーが発生しました: {e}"
        else:
            if not error:
                error = "データ取得に失敗しました。URLが正しいか確認してください。"
    
    return render_template_string(HTML_TEMPLATE, data=data, error=error, auto_mode=auto_mode)

@app.route('/save_to_csv', methods=['POST'])
def save_to_csv():
    url = request.form.get('url')
    if not url:
        flash('保存するURLが指定されていません。', 'red')
        return redirect(url_for('home'))

    if 'auctions.yahoo.co.jp' in url:
        scraped_data = scrape_auction_data(url)
    elif 'paypayfleamarket.yahoo.co.jp' in url:
        scraped_data = scrape_paypay_fleamarket(url)
    else:
        flash("サポートされていないURL形式です。ヤフオクまたはPayPayフリマのURLを入力してください。", 'red')
        return redirect(url_for('home'))

    if scraped_data:
        try:
            # CSVファイルが存在しない場合はヘッダーを書き込む
            file_exists = os.path.isfile(CSV_FILE)
            with open(CSV_FILE, 'a', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=scraped_data.keys())
                if not file_exists:
                    writer.writeheader()
                writer.writerow(scraped_data)
            
            flash('データが正常にCSVファイルに保存されました。', 'green')
        except Exception as e:
            flash(f'CSVへの保存中にエラーが発生しました: {e}', 'red')
    else:
        flash('データ取得に失敗したため、CSVファイルに保存できませんでした。', 'red')
    
    return redirect(url_for('home'))

@app.route('/list_on_ebay', methods=['POST'])
def list_on_ebay():
    item_id = request.form.get('item_id')
    
    try:
        data = database.get_listing(item_id)
        if data:
            success = list_item_on_ebay(data)
            if success:
                flash(f'商品ID {item_id} がeBayに出品されました。', 'green')
            else:
                flash(f'商品ID {item_id} のeBayへの出品に失敗しました。', 'red')
        else:
            flash(f'データベースに商品ID {item_id} のデータが見つかりませんでした。', 'red')
    except Exception as e:
        flash(f'eBay出品中にエラーが発生しました: {e}', 'red')
        
    return redirect(url_for('home'))

if __name__ == '__main__':
    os.environ['DB_NAME'] = 'nagano_db'
    os.environ['DB_USER'] = 'postgres'
    os.environ['DB_PASSWORD'] = 'root1234'
    os.environ['DB_HOST'] = 'localhost'
    app.run(debug=True)