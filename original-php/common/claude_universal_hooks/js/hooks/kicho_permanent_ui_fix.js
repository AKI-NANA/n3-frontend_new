
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * üîß KICHO UIÂâäÈô§Ê©üËÉΩ Ê∞∏Á∂öÂåñ‰øÆÊ≠£„Éë„ÉÉ„ÉÅ
 * 
 * ÊàêÂäüÁ¢∫Ë™çÊ∏à„Åø - „Ç≥„É≥„ÇΩ„Éº„É´„ÉÜ„Çπ„Éà„ÅßÂÆåÂÖ®Âãï‰ΩúÁ¢∫Ë™ç
 * ÂÆüÈöõ„ÅÆmodules/kicho/kicho_content.php„Åß‰ΩøÁî®
 */

(function() {
    'use strict';
    
    console.log("üîß KICHO UIÂâäÈô§Ê©üËÉΩ‰øÆÊ≠£„Éë„ÉÉ„ÉÅË™≠„ÅøËæº„ÅøÈñãÂßã");
    
    // DOMË™≠„ÅøËæº„ÅøÂÆå‰∫ÜÂæå„Å´ÂÆüË°å
    function initializeUIFix() {
        // NAGANO3_KICHO„Ç∑„Çπ„ÉÜ„É†„ÅÆÂàùÊúüÂåñ„ÇíÂæÖ„Å§
        if (typeof window.NAGANO3_KICHO === 'undefined' || !window.NAGANO3_KICHO.ajaxManager) {
            setTimeout(initializeUIFix, 100);
            return;
        }
        
        console.log("üéØ KICHO UI„Ç∑„Çπ„ÉÜ„É†Ê§úÂá∫ - ‰øÆÊ≠£„Éë„ÉÉ„ÉÅÈÅ©Áî®ÈñãÂßã");
        
        // 1. Êó¢Â≠ò„ÅÆajaxManagerÂá¶ÁêÜ„Çí‰øùÂ≠ò
        const originalExecuteAction = window.NAGANO3_KICHO.ajaxManager.executeAction;
        
        // 2. „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÂ∞ÇÁî®„Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆöÁæ©
        window.FRONTEND_ONLY_ACTIONS = [
            'delete-ui-element',
            'delete-all-items', 
            'restore-all-items'
        ];
        
        // 3. „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÈÖçÂàóÂàùÊúüÂåñ
        window.deletedItemsBackup = window.deletedItemsBackup || [];
        
        // 4. Âç≥Â∫ßÂâäÈô§Èñ¢Êï∞
        window.immediateDelete = function(targetId) {
            console.log(`üóëÔ∏è UIË¶ÅÁ¥†ÂâäÈô§ÂÆüË°å: ${targetId}`);
            
            const element = document.getElementById(targetId);
            if (!element) {
                console.error(`‚ùå Ë¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${targetId}`);
                return false;
            }
            
            // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàê
            window.deletedItemsBackup.push({
                id: targetId,
                html: element.outerHTML,
                parentNode: element.parentNode,
                nextSibling: element.nextSibling
            });
            
            // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„ÅçÂâäÈô§
            element.style.transition = 'all 0.3s ease';
            element.style.opacity = '0';
            element.style.transform = 'translateX(-100%)';
            
            setTimeout(() => {
                element.remove();
                console.log(`‚úÖ UIË¶ÅÁ¥†ÂâäÈô§ÂÆå‰∫Ü: ${targetId}`);
                
                // ÊàêÂäüÈÄöÁü•
                if (window.NAGANO3_KICHO?.uiController?.showNotification) {
                    window.NAGANO3_KICHO.uiController.showNotification('success', `Ë¶ÅÁ¥† ${targetId} „ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`);
                }
            }, 300);
            
            return true;
        };
        
        // 5. Âç≥Â∫ßÂæ©ÂÖÉÈñ¢Êï∞
        window.immediateRestore = function() {
            console.log(`üîÑ UIË¶ÅÁ¥†Âæ©ÂÖÉÂÆüË°å: ${window.deletedItemsBackup.length}ÂÄã`);
            
            window.deletedItemsBackup.forEach(backup => {
                if (!document.getElementById(backup.id)) {
                    const div = document.createElement('div');
                    div.innerHTML = backup.html;
                    const element = div.firstChild;
                    
                    if (backup.nextSibling && backup.nextSibling.parentNode) {
                        backup.nextSibling.parentNode.insertBefore(element, backup.nextSibling);
                    } else if (backup.parentNode) {
                        backup.parentNode.appendChild(element);
                    }
                    
                    console.log(`‚úÖ UIË¶ÅÁ¥†Âæ©ÂÖÉÂÆå‰∫Ü: ${backup.id}`);
                }
            });
            
            const restoredCount = window.deletedItemsBackup.length;
            window.deletedItemsBackup = [];
            
            if (window.NAGANO3_KICHO?.uiController?.showNotification) {
                window.NAGANO3_KICHO.uiController.showNotification('success', `${restoredCount}ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÂæ©ÂÖÉ„Åó„Åæ„Åó„Åü`);
            }
        };
        
        // 6. ÂÖ®ÂâäÈô§Èñ¢Êï∞
        window.immediateDeleteAll = function() {
            const items = document.querySelectorAll('.deletable-item');
            console.log(`üóëÔ∏è ÂÖ®UIË¶ÅÁ¥†ÂâäÈô§ÂÆüË°å: ${items.length}ÂÄã`);
            
            items.forEach((item, index) => {
                setTimeout(() => {
                    if (item.id) {
                        window.immediateDelete(item.id);
                    }
                }, index * 200);
            });
        };
        
        // 7. ajaxManager„ÅÆÂá¶ÁêÜ„Çí‰∏äÊõ∏„Åç
        window.NAGANO3_KICHO.ajaxManager.executeAction = function(action, data = {}) {
            console.log(`üéØ „Ç¢„ÇØ„Ç∑„Éß„É≥Âá¶ÁêÜ: ${action}`);
            
            // „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÂ∞ÇÁî®Âá¶ÁêÜ„ÅÆÂ†¥Âêà
            if (window.FRONTEND_ONLY_ACTIONS.includes(action)) {
                console.log(`üñ•Ô∏è „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÂ∞ÇÁî®Âá¶ÁêÜÂÆüË°å: ${action}`);
                
                if (action === 'delete-ui-element') {
                    const targetId = data.target || 
                                   document.querySelector('[data-action="delete-ui-element"]')?.getAttribute('data-target');
                    if (targetId) {
                        return Promise.resolve(window.immediateDelete(targetId));
                    }
                } else if (action === 'delete-all-items') {
                    return Promise.resolve(window.immediateDeleteAll());
                } else if (action === 'restore-all-items') {
                    return Promise.resolve(window.immediateRestore());
                }
                
                return Promise.resolve(true);
            } else {
                // ÈÄöÂ∏∏„ÅÆAjaxÂá¶ÁêÜÔºàÊó¢Â≠òÊ©üËÉΩÔºâ
                console.log(`üåê AjaxÂá¶ÁêÜÂÆüË°å: ${action}`);
                return originalExecuteAction.call(this, action, data);
            }
        };
        
        console.log("‚úÖ KICHO UIÂâäÈô§Ê©üËÉΩ‰øÆÊ≠£„Éë„ÉÉ„ÉÅÈÅ©Áî®ÂÆå‰∫Ü");
        console.log("üìã ÂØæÂøú„Ç¢„ÇØ„Ç∑„Éß„É≥:", window.FRONTEND_ONLY_ACTIONS);
        
        // „ÉÜ„Çπ„ÉàÁî®Èñ¢Êï∞„Çí„Ç∞„É≠„Éº„Éê„É´„Å´Ë®≠ÂÆö
        window.testUIDelete = function(targetId = 'deletable-item-1') {
            return window.immediateDelete(targetId);
        };
        
        window.testUIRestore = function() {
            return window.immediateRestore();
        };
        
        // ÈÅ©Áî®ÂÆå‰∫Ü„Ç§„Éô„É≥„ÉàÁô∫Ë°å
        window.dispatchEvent(new CustomEvent('kichoUIFixApplied', {
            detail: { version: '1.0.0', timestamp: new Date().toISOString() }
        }));
    }
    
    // ÂàùÊúüÂåñÂÆüË°å
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeUIFix);
    } else {
        initializeUIFix();
    }
    
})();

console.log("üì¶ KICHO UIÂâäÈô§Ê©üËÉΩ‰øÆÊ≠£„Éë„ÉÉ„ÉÅË™≠„ÅøËæº„ÅøÂÆå‰∫Ü");
