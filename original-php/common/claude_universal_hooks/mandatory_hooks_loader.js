
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * üî• NAGANO-3ÂøÖÈ†àHooks„É≠„Éº„ÉÄ„Éº„ÄêËá™ÂãïÊ§úÁü•Áâà„Äë
 * 
 * Ê©üËÉΩ:
 * ‚úÖ Ëá™ÂãïJS„Éï„Ç°„Ç§„É´Ê§úÁü•
 * ‚úÖ ÂøÖÈ†à„ÉªÊ±éÁî®„ÉªÂ∞ÇÁî®„ÅÆÂàÜÈ°û
 * ‚úÖ ‰æùÂ≠òÈñ¢‰øÇÁÆ°ÁêÜ
 * ‚úÖ „Ç®„É©„ÉºÂá¶ÁêÜ„Éª„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
 * 
 * ÈÖçÁΩÆ: /NAGANO-3/N3-Development/common/js/mandatory_hooks_loader.js
 * ‰ΩøÁî®: „Åô„Åπ„Å¶„ÅÆ„Éö„Éº„Ç∏„ÅßËá™ÂãïË™≠„ÅøËæº„Åø
 */

(function() {
    'use strict';
    
    console.log('üî• NAGANO-3ÂøÖÈ†àHooks„É≠„Éº„ÉÄ„ÉºÈñãÂßã');
    
    // =====================================
    // üìã HooksÂàÜÈ°ûÂÆöÁæ©
    // =====================================
    
    const HOOKS_CLASSIFICATION = {
        // ÂøÖÈ†àÔºà„Åô„Åπ„Å¶„ÅÆ„Éö„Éº„Ç∏Ôºâ
        MANDATORY: [
            'base_system',
            'error_handler', 
            'security_manager',
            'directory_manager'
        ],
        
        // Ê±éÁî®ÔºàË§áÊï∞„Éö„Éº„Ç∏„Åß‰ΩøÁî®Ôºâ
        UNIVERSAL: [
            'ui_controller',
            'ajax_manager',
            'csv_handler',
            'ai_integration',
            'api_connector',
            'notification_system'
        ],
        
        // Â∞ÇÁî®ÔºàÁâπÂÆö„Éö„Éº„Ç∏„ÅÆ„ÅøÔºâ
        SPECIALIZED: {
            'kicho_content': ['kicho_specialized'],
            'dashboard': ['dashboard_specialized'],
            'auth': ['auth_specialized']
        }
    };
    
    // =====================================
    // üîç Ëá™ÂãïJS„Éï„Ç°„Ç§„É´Ê§úÁü•„Ç∑„Çπ„ÉÜ„É†
    // =====================================
    
    class AutoJSDetector {
        constructor() {
            this.detectedFiles = new Map();
            this.loadedFiles = new Set();
        }
        
        // JS„Éï„Ç°„Ç§„É´Ëá™ÂãïÊ§úÁü•
        async detectJSFiles() {
            console.log('üîç JS„Éï„Ç°„Ç§„É´Ëá™ÂãïÊ§úÁü•ÈñãÂßã');
            
            const searchPaths = [
                '/common/js/',
                '/common/hooks/',
                '/common/claude_universal_hooks/js/',
                '/modules/'
            ];
            
            const detectedFiles = {};
            
            // „Éë„ÇπÂà•Ê§úÁ¥¢
            for (const path of searchPaths) {
                try {
                    const files = await this.scanDirectory(path);
                    detectedFiles[path] = files;
                } catch (error) {
                    console.warn(`‚ö†Ô∏è „Éë„ÇπÊ§úÁ¥¢Â§±Êïó: ${path}`, error.message);
                }
            }
            
            console.log('üìÅ Ê§úÁü•„Åï„Çå„ÅüJS„Éï„Ç°„Ç§„É´:', detectedFiles);
            return detectedFiles;
        }
        
        // „Éá„Ç£„É¨„ÇØ„Éà„É™„Çπ„Ç≠„É£„É≥ÔºàDOMËß£Êûê„Å´„Çà„ÇãÔºâ
        async scanDirectory(path) {
            // ÂÆüÈöõ„ÅÆ„Éï„Ç°„Ç§„É´Â≠òÂú®Á¢∫Ë™ç
            const testFiles = [
                'kicho.js', 'kicho_dynamic.js', 'main.js',
                'ui_controller.js', 'ajax_manager.js',
                'hooks_loader.js', 'universal_hooks.js'
            ];
            
            const existingFiles = [];
            
            for (const file of testFiles) {
                const fullPath = path + file;
                if (await this.fileExists(fullPath)) {
                    existingFiles.push({
                        name: file,
                        path: fullPath,
                        classification: this.classifyFile(file)
                    });
                }
            }
            
            return existingFiles;
        }
        
        // „Éï„Ç°„Ç§„É´Â≠òÂú®Á¢∫Ë™ç
        async fileExists(path) {
            try {
                const response = await fetch(path, { method: 'HEAD' });
                return response.ok;
            } catch {
                return false;
            }
        }
        
        // „Éï„Ç°„Ç§„É´ÂàÜÈ°û
        classifyFile(filename) {
            const name = filename.toLowerCase();
            
            if (HOOKS_CLASSIFICATION.MANDATORY.some(hook => name.includes(hook))) {
                return 'MANDATORY';
            }
            
            if (HOOKS_CLASSIFICATION.UNIVERSAL.some(hook => name.includes(hook))) {
                return 'UNIVERSAL';
            }
            
            return 'SPECIALIZED';
        }
    }
    
    // =====================================
    // üîß ÂøÖÈ†àHooks„É≠„Éº„ÉÄ„Éº
    // =====================================
    
    class MandatoryHooksLoader {
        constructor() {
            this.detector = new AutoJSDetector();
            this.loadQueue = [];
            this.loadedHooks = new Set();
            this.errors = [];
        }
        
        // „É°„Ç§„É≥ÂàùÊúüÂåñ
        async initialize() {
            console.log('üöÄ ÂøÖÈ†àHooks„É≠„Éº„ÉÄ„ÉºÂàùÊúüÂåñ');
            
            try {
                // 1. ÁèæÂú®„ÅÆ„Éö„Éº„Ç∏„Çø„Ç§„ÉóÊ§úÂá∫
                const pageType = this.detectPageType();
                console.log(`üìÑ „Éö„Éº„Ç∏„Çø„Ç§„Éó: ${pageType}`);
                
                // 2. JS„Éï„Ç°„Ç§„É´Ëá™ÂãïÊ§úÁü•
                const detectedFiles = await this.detector.detectJSFiles();
                
                // 3. Ë™≠„ÅøËæº„ÅøÈ†ÜÂ∫èÊ±∫ÂÆö
                const loadOrder = this.determineLoadOrder(detectedFiles, pageType);
                
                // 4. È†ÜÊ¨°Ë™≠„ÅøËæº„Åø
                await this.loadHooksInOrder(loadOrder);
                
                // 5. ÂàùÊúüÂåñÂÆå‰∫Ü
                this.finalizeInitialization();
                
                console.log('‚úÖ ÂøÖÈ†àHooks„É≠„Éº„ÉÄ„ÉºÂàùÊúüÂåñÂÆå‰∫Ü');
                
            } catch (error) {
                console.error('‚ùå ÂøÖÈ†àHooks„É≠„Éº„ÉÄ„ÉºÂàùÊúüÂåñÂ§±Êïó:', error);
                this.handleInitializationError(error);
            }
        }
        
        // „Éö„Éº„Ç∏„Çø„Ç§„ÉóÊ§úÂá∫
        detectPageType() {
            const url = window.location.href;
            const params = new URLSearchParams(window.location.search);
            
            if (params.get('page')) {
                return params.get('page');
            }
            
            if (url.includes('kicho')) return 'kicho_content';
            if (url.includes('dashboard')) return 'dashboard';
            if (url.includes('auth')) return 'auth';
            
            return 'default';
        }
        
        // Ë™≠„ÅøËæº„ÅøÈ†ÜÂ∫èÊ±∫ÂÆö
        determineLoadOrder(detectedFiles, pageType) {
            const loadOrder = {
                mandatory: [],
                universal: [],
                specialized: []
            };
            
            // ÂÖ®„Éï„Ç°„Ç§„É´„ÇíÂàÜÈ°û
            Object.values(detectedFiles).flat().forEach(file => {
                switch (file.classification) {
                    case 'MANDATORY':
                        loadOrder.mandatory.push(file);
                        break;
                    case 'UNIVERSAL':
                        loadOrder.universal.push(file);
                        break;
                    case 'SPECIALIZED':
                        if (this.isRelevantForPage(file, pageType)) {
                            loadOrder.specialized.push(file);
                        }
                        break;
                }
            });
            
            console.log('üìã Ë™≠„ÅøËæº„ÅøÈ†ÜÂ∫è:', loadOrder);
            return loadOrder;
        }
        
        // „Éö„Éº„Ç∏Èñ¢ÈÄ£ÊÄß„ÉÅ„Çß„ÉÉ„ÇØ
        isRelevantForPage(file, pageType) {
            const filename = file.name.toLowerCase();
            const pageName = pageType.toLowerCase();
            
            return filename.includes(pageName) || 
                   HOOKS_CLASSIFICATION.SPECIALIZED[pageType]?.some(hook => 
                       filename.includes(hook)
                   );
        }
        
        // È†ÜÊ¨°Ë™≠„ÅøËæº„Åø
        async loadHooksInOrder(loadOrder) {
            console.log('üì¶ HooksÈ†ÜÊ¨°Ë™≠„ÅøËæº„ÅøÈñãÂßã');
            
            // 1. ÂøÖÈ†àHooksÔºàÈ†ÜÊ¨°Ôºâ
            for (const file of loadOrder.mandatory) {
                await this.loadScript(file, true);
            }
            
            // 2. Ê±éÁî®HooksÔºà‰∏¶ÂàóÔºâ
            await Promise.all(
                loadOrder.universal.map(file => this.loadScript(file, false))
            );
            
            // 3. Â∞ÇÁî®HooksÔºà‰∏¶ÂàóÔºâ
            await Promise.all(
                loadOrder.specialized.map(file => this.loadScript(file, false))
            );
        }
        
        // „Çπ„ÇØ„É™„Éó„ÉàË™≠„ÅøËæº„Åø
        loadScript(file, sequential = false) {
            return new Promise((resolve, reject) => {
                if (this.loadedHooks.has(file.path)) {
                    resolve();
                    return;
                }
                
                console.log(`üì• Ë™≠„ÅøËæº„Åø‰∏≠: ${file.name}`);
                
                const script = document.createElement('script');
                script.src = file.path + '?v=' + Date.now();
                script.async = !sequential;
                
                script.onload = () => {
                    this.loadedHooks.add(file.path);
                    console.log(`‚úÖ Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü: ${file.name}`);
                    resolve();
                };
                
                script.onerror = (error) => {
                    console.error(`‚ùå Ë™≠„ÅøËæº„ÅøÂ§±Êïó: ${file.name}`, error);
                    this.errors.push({ file: file.name, error });
                    resolve(); // „Ç®„É©„Éº„Åß„ÇÇÁ∂öË°å
                };
                
                document.head.appendChild(script);
            });
        }
        
        // ÂàùÊúüÂåñÂÆå‰∫ÜÂá¶ÁêÜ
        finalizeInitialization() {
            // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞Ë®≠ÂÆö
            window.NAGANO3_HOOKS_LOADED = true;
            window.NAGANO3_HOOKS_ERRORS = this.errors;
            
            // „Ç§„Éô„É≥„ÉàÁô∫ÁÅ´
            window.dispatchEvent(new CustomEvent('nagano3HooksLoaded', {
                detail: {
                    loadedHooks: Array.from(this.loadedHooks),
                    errors: this.errors
                }
            }));
            
            console.log('üéâ NAGANO-3 HooksÂàùÊúüÂåñÂÆå‰∫Ü');
        }
        
        // ÂàùÊúüÂåñ„Ç®„É©„ÉºÂá¶ÁêÜ
        handleInitializationError(error) {
            console.error('üö® Ëá¥ÂëΩÁöÑ„Ç®„É©„Éº:', error);
            
            // Âü∫Êú¨Ê©üËÉΩ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
            this.setupFallbackFunctions();
        }
        
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üËÉΩ
        setupFallbackFunctions() {
            console.log('üîÑ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üËÉΩ„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó');
            
            // ÊúÄ‰ΩéÈôê„ÅÆUIÂà∂Âæ°
            window.NAGANO3_FALLBACK = {
                deleteElement: (id) => {
                    const element = document.getElementById(id);
                    if (element) element.remove();
                },
                showNotification: (type, message) => {
                    console.log(`${type.toUpperCase()}: ${message}`);
                }
            };
        }
    }
    
    // =====================================
    // üöÄ Ëá™ÂãïÂàùÊúüÂåñ
    // =====================================
    
    function autoInitialize() {
        const loader = new MandatoryHooksLoader();
        
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => loader.initialize());
        } else {
            loader.initialize();
        }
    }
    
    // Âç≥Â∫ßÂÆüË°å
    autoInitialize();
    
})();

console.log('üî• NAGANO-3ÂøÖÈ†àHooks„É≠„Éº„ÉÄ„ÉºË™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
