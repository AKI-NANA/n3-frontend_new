
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * üèóÔ∏è NAGANO-3 Page Handlers („Éö„Éº„Ç∏Âõ∫ÊúâÊ©üËÉΩ)
 * „Éï„Ç°„Ç§„É´: common/js/page_handlers.js
 * 
 * ‚úÖ „Éö„Éº„Ç∏Âà•Ê©üËÉΩ + ÂãïÁöÑ„É¢„Ç∏„É•„Éº„É´
 * ‚úÖ modules/kicho, modules/juchu, dashboardÁµ±Âêà
 * ‚úÖ „É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞„ÉªUI interaction
 * ‚úÖ ÈÅÖÂª∂Ë™≠„ÅøËæº„Åø„ÉªÂøÖË¶ÅÊôÇ„ÅÆ„ÅøÂÆüË°å
 * ‚úÖ „Ç≠„É£„ÉÉ„Ç∑„É•ÂäπÁéáÂåñ
 * 
 * @version 2.0.0-modular
 */

"use strict";

    console.log('üèóÔ∏è NAGANO-3 Page Handlers loading...');

// =====================================
// üèóÔ∏è Page ModulesÂàùÊúüÂåñ
// =====================================

if (!window.NAGANO3?.core) {
    console.log('üèóÔ∏è NAGANO-3 Page Modules loaded');
}error('‚ùå NAGANO3 Core System not found. Core system required.');
} else {
    
    // Page ModulesÂêçÂâçÁ©∫Èñì
    NAGANO3.pageModules = {
        version: '2.0.0-modular',
        initialized: false,
        loadStartTime: Date.now(),
        activeModules: new Set(),
        currentPage: NAGANO3.config.current_page || 'dashboard'
    };

    // =====================================
    // üìä Dashboard Page Module
    // =====================================

    NAGANO3.pageModules.dashboard = {
        name: 'dashboard',
        initialized: false,
        refreshInterval: null,
        
        /**
         * DashboardÂàùÊúüÂåñ
         */
        init: function() {
            if (this.initialized) return;
            
            console.log('üìä Dashboard module initializing...');
            
            try {
                // Áµ±Ë®à„Ç´„Éº„ÉâÂàùÊúüÂåñ
                this.initStatCards();
                
                // „É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞Ë®≠ÂÆö
                this.setupRealTimeUpdates();
                
                // UI „Ç§„Éô„É≥„ÉàË®≠ÂÆö
                this.setupUIEvents();
                
                this.initialized = true;
                console.log('‚úÖ Dashboard module initialized');
                
            } catch (error) {
                console.error('‚ùå Dashboard module initialization failed:', error);
            }
        },
        
        /**
         * Áµ±Ë®à„Ç´„Éº„ÉâÂàùÊúüÂåñ
         */
        initStatCards: function() {
            const statCards = document.querySelectorAll('.stat-card, .dashboard-stat');
            
            statCards.forEach(card => {
                // „Éõ„Éê„ÉºÂäπÊûú
                card.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-2px)';
                    this.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
                });
                
                card.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0)';
                    this.style.boxShadow = '';
                });
            });
            
            console.log(`üìä ${statCards.length} stat cards initialized`);
        },
        
        /**
         * „É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞Ë®≠ÂÆö
         */
        setupRealTimeUpdates: function() {
            // Êó¢Â≠ò„ÅÆ„Ç§„É≥„Çø„Éº„Éê„É´„Çí„ÇØ„É™„Ç¢
            if (this.refreshInterval) {
                clearInterval(this.refreshInterval);
            }
            
            // 30Áßí„Åî„Å®„Å´Áµ±Ë®àÊõ¥Êñ∞
            this.refreshInterval = setInterval(() => {
                if (document.visibilityState === 'visible') {
                    NAGANO3.dashboard.loadStats();
                }
            }, 30000);
            
            // „Éö„Éº„Ç∏Ë°®Á§∫ÊôÇ„Å´Âç≥Â∫ß„Å´Êõ¥Êñ∞
            document.addEventListener('visibilitychange', () => {
                if (document.visibilityState === 'visible') {
                    setTimeout(() => {
                        NAGANO3.dashboard.loadStats();
                    }, 500);
                }
            });
            
            console.log('‚è∞ Real-time updates configured (30s interval)');
        },
        
        /**
         * UI „Ç§„Éô„É≥„ÉàË®≠ÂÆö
         */
        setupUIEvents: function() {
            // „É™„Éï„É¨„ÉÉ„Ç∑„É•„Éú„Çø„É≥
            const refreshBtn = NAGANO3.dom.safeGet('#refresh-stats, .refresh-button');
            if (refreshBtn) {
                refreshBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    refreshBtn.disabled = true;
                    refreshBtn.textContent = 'Êõ¥Êñ∞‰∏≠...';
                    
                    NAGANO3.dashboard.loadStats().finally(() => {
                        refreshBtn.disabled = false;
                        refreshBtn.textContent = 'Êõ¥Êñ∞';
                    });
                });
            }
            
            // API KeyÁÆ°ÁêÜ„Éú„Çø„É≥
            document.addEventListener('click', (e) => {
                if (e.target.matches('.test-api-key')) {
                    const keyId = e.target.dataset.keyId;
                    if (keyId) {
                        NAGANO3.dashboard.testAPIKey(keyId);
                    }
                }
                
                if (e.target.matches('.delete-api-key')) {
                    const keyId = e.target.dataset.keyId;
                    if (keyId) {
                        NAGANO3.dashboard.deleteAPIKey(keyId);
                    }
                }
            });
        },
        
        /**
         * ÁµÇ‰∫ÜÂá¶ÁêÜ
         */
        destroy: function() {
            if (this.refreshInterval) {
                clearInterval(this.refreshInterval);
                this.refreshInterval = null;
            }
            this.initialized = false;
            console.log('üóëÔ∏è Dashboard module destroyed');
        }
    };

    // =====================================
    // üí∞ Kicho Page Module
    // =====================================

    NAGANO3.pageModules.kicho = {
        name: 'kicho',
        initialized: false,
        
        /**
         * KichoÂàùÊúüÂåñ
         */
        init: function() {
            if (this.initialized) return;
            
            console.log('üí∞ Kicho module initializing...');
            
            try {
                // CSVÂá¶ÁêÜÊ©üËÉΩ
                this.initCSVProcessing();
                
                // AIÊ©üËÉΩÁµ±Âêà
                this.initAIFeatures();
                
                // „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
                this.initFileUpload();
                
                // Ë®òÂ∏≥„Éá„Éº„ÇøÁÆ°ÁêÜ
                this.initBookkeepingData();
                
                this.initialized = true;
                console.log('‚úÖ Kicho module initialized');
                
            } catch (error) {
                console.error('‚ùå Kicho module initialization failed:', error);
            }
        },
        
        /**
         * CSVÂá¶ÁêÜÊ©üËÉΩÂàùÊúüÂåñ
         */
        initCSVProcessing: function() {
            const csvUpload = NAGANO3.dom.safeGet('#csv-upload, .csv-upload-input');
            if (csvUpload) {
                csvUpload.addEventListener('change', (e) => {
                    const file = e.target.files[0];
                    if (file) {
                        this.processCSVFile(file);
                    }
                });
            }
            
            // CSVÂá¶ÁêÜ„Éú„Çø„É≥
            const processBtn = NAGANO3.dom.safeGet('#process-csv-btn');
            if (processBtn) {
                processBtn.addEventListener('click', () => {
                    this.startCSVProcessing();
                });
            }
        },
        
        /**
         * CSV „Éï„Ç°„Ç§„É´Âá¶ÁêÜ
         */
        processCSVFile: async function(file) {
            try {
                window.showNotification('CSV„Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜ‰∏≠...', 'info');
                
                const formData = new FormData();
                formData.append('csv_file', file);
                
                const response = await NAGANO3.ajax.request('process_csv', { csv_file: file });
                
                if (response.success) {
                    window.showNotification('CSV„Éï„Ç°„Ç§„É´„ÅÆÂá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', 'success');
                    this.displayCSVResults(response.data);
                } else {
                    throw new Error(response.error);
                }
                
            } catch (error) {
                console.error('CSVÂá¶ÁêÜ„Ç®„É©„Éº:', error);
                window.showNotification('CSV„Éï„Ç°„Ç§„É´„ÅÆÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message, 'error');
            }
        },
        
        /**
         * CSVÁµêÊûúË°®Á§∫
         */
        displayCSVResults: function(data) {
            const resultsContainer = NAGANO3.dom.safeGet('#csv-results');
            if (resultsContainer && data) {
                const html = `
                    <div class="csv-results">
                        <h3>Âá¶ÁêÜÁµêÊûú</h3>
                        <p>Âá¶ÁêÜ‰ª∂Êï∞: ${data.processed_count || 0}‰ª∂</p>
                        <p>„Ç®„É©„Éº‰ª∂Êï∞: ${data.error_count || 0}‰ª∂</p>
                        ${data.errors ? `<div class="errors">${data.errors.join('<br>')}</div>` : ''}
                    </div>
                `;
                resultsContainer.innerHTML = html;
            }
        },
        
        /**
         * AIÊ©üËÉΩÂàùÊúüÂåñ
         */
        initAIFeatures: function() {
            const aiBtn = NAGANO3.dom.safeGet('#ai-auto-categorize, .ai-button');
            if (aiBtn) {
                aiBtn.addEventListener('click', () => {
                    this.runAICategorization();
                });
            }
        },
        
        /**
         * AIËá™ÂãïÂàÜÈ°ûÂÆüË°å
         */
        runAICategorization: async function() {
            try {
                window.showNotification('AIËá™ÂãïÂàÜÈ°û„ÇíÂÆüË°å‰∏≠...', 'info');
                
                const response = await NAGANO3.ajax.request('ai_auto_categorize');
                
                if (response.success) {
                    window.showNotification('AIËá™ÂãïÂàÜÈ°û„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', 'success');
                    // ÁµêÊûúÂèçÊò†
                    if (response.data) {
                        this.updateCategorizationResults(response.data);
                    }
                } else {
                    throw new Error(response.error);
                }
                
            } catch (error) {
                console.error('AIÂàÜÈ°û„Ç®„É©„Éº:', error);
                window.showNotification('AIËá™ÂãïÂàÜÈ°û„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message, 'error');
            }
        },
        
        /**
         * „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂàùÊúüÂåñ
         */
        initFileUpload: function() {
            const uploadArea = NAGANO3.dom.safeGet('.file-upload-area');
            if (uploadArea) {
                // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó
                uploadArea.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    uploadArea.classList.add('dragover');
                });
                
                uploadArea.addEventListener('dragleave', () => {
                    uploadArea.classList.remove('dragover');
                });
                
                uploadArea.addEventListener('drop', (e) => {
                    e.preventDefault();
                    uploadArea.classList.remove('dragover');
                    
                    const files = e.dataTransfer.files;
                    if (files.length > 0) {
                        this.handleFileUpload(files[0]);
                    }
                });
            }
        },
        
        /**
         * „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ
         */
        handleFileUpload: async function(file) {
            // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ
            if (file.size > 10 * 1024 * 1024) { // 10MB
                window.showNotification('„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅØ10MB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'error');
                return;
            }
            
            // „Éï„Ç°„Ç§„É´ÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ
            const allowedTypes = ['text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
            if (!allowedTypes.includes(file.type)) {
                window.showNotification('CSV „Åæ„Åü„ÅØ Excel „Éï„Ç°„Ç§„É´„ÅÆ„Åø„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„Åß„Åô', 'error');
                return;
            }
            
            await this.processCSVFile(file);
        },
        
        /**
         * Ë®òÂ∏≥„Éá„Éº„ÇøÁÆ°ÁêÜÂàùÊúüÂåñ
         */
        initBookkeepingData: function() {
            // „Éá„Éº„Çø„ÉÜ„Éº„Éñ„É´ÂàùÊúüÂåñ
            const dataTable = NAGANO3.dom.safeGet('#bookkeeping-data-table');
            if (dataTable) {
                this.initDataTable(dataTable);
            }
            
            // Ê§úÁ¥¢Ê©üËÉΩ
            const searchInput = NAGANO3.dom.safeGet('#data-search');
            if (searchInput) {
                let searchTimeout;
                searchInput.addEventListener('input', (e) => {
                    clearTimeout(searchTimeout);
                    searchTimeout = setTimeout(() => {
                        this.filterData(e.target.value);
                    }, 300);
                });
            }
        },
        
        /**
         * „Éá„Éº„Çø„ÉÜ„Éº„Éñ„É´ÂàùÊúüÂåñ
         */
        initDataTable: function(table) {
            // „ÇΩ„Éº„ÉàÊ©üËÉΩ
            const headers = table.querySelectorAll('th[data-sort]');
            headers.forEach(header => {
                header.style.cursor = 'pointer';
                header.addEventListener('click', () => {
                    const sortKey = header.dataset.sort;
                    this.sortTable(table, sortKey);
                });
            });
        },
        
        /**
         * „Éá„Éº„Çø„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
         */
        filterData: function(searchTerm) {
            const table = NAGANO3.dom.safeGet('#bookkeeping-data-table');
            if (!table) return;
            
            const rows = table.querySelectorAll('tbody tr');
            let visibleCount = 0;
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                const matches = text.includes(searchTerm.toLowerCase());
                
                row.style.display = matches ? '' : 'none';
                if (matches) visibleCount++;
            });
            
            // ÁµêÊûúË°®Á§∫
            const resultInfo = NAGANO3.dom.safeGet('#search-results-info');
            if (resultInfo) {
                resultInfo.textContent = `${visibleCount}‰ª∂„ÅÆÁµêÊûú`;
            }
        }
    };

    // =====================================
    // üì¶ Juchu Page Module
    // =====================================

    NAGANO3.pageModules.juchu = {
        name: 'juchu',
        initialized: false,
        
        /**
         * JuchuÂàùÊúüÂåñ
         */
        init: function() {
            if (this.initialized) return;
            
            console.log('üì¶ Juchu module initializing...');
            
            try {
                // ÂèóÊ≥®ÁÆ°ÁêÜÊ©üËÉΩ
                this.initOrderManagement();
                
                // „É™„Ç¢„É´„Çø„Ç§„É†ÈÄöÁü•ÔºàÊó¢Â≠òJuchu‰∫íÊèõÔºâ
                this.initRealTimeNotifications();
                
                // Âú®Â∫´ÈÄ£Êê∫
                this.initInventorySync();
                
                this.initialized = true;
                console.log('‚úÖ Juchu module initialized');
                
            } catch (error) {
                console.error('‚ùå Juchu module initialization failed:', error);
            }
        },
        
        /**
         * ÂèóÊ≥®ÁÆ°ÁêÜÂàùÊúüÂåñ
         */
        initOrderManagement: function() {
            // ÂèóÊ≥®‰∏ÄË¶ßÊõ¥Êñ∞
            const refreshOrders = NAGANO3.dom.safeGet('#refresh-orders');
            if (refreshOrders) {
                refreshOrders.addEventListener('click', () => {
                    this.loadOrders();
                });
            }
            
            // ÂèóÊ≥®„Çπ„ÉÜ„Éº„Çø„ÇπÊõ¥Êñ∞
            document.addEventListener('change', (e) => {
                if (e.target.matches('.order-status-select')) {
                    const orderId = e.target.dataset.orderId;
                    const newStatus = e.target.value;
                    this.updateOrderStatus(orderId, newStatus);
                }
            });
        },
        
        /**
         * „É™„Ç¢„É´„Çø„Ç§„É†ÈÄöÁü•ÂàùÊúüÂåñÔºàJuchuÂΩ¢ÂºèÂØæÂøúÔºâ
         */
        initRealTimeNotifications: function() {
            // JuchuÂ∞ÇÁî®showNotificationÔºàÊó¢Â≠ò‰∫íÊèõÊÄßÔºâ
            if (!window.JuchuCompat) {
                window.JuchuCompat = {
                    showNotification: function(type, title, message, duration) {
                        return window.showNotification(message || title, type, duration);
                    }
                };
            }
            
            // Êñ∞Ë¶èÂèóÊ≥®ÈÄöÁü•„ÉÅ„Çß„ÉÉ„ÇØ
            this.checkNewOrders();
            setInterval(() => {
                this.checkNewOrders();
            }, 60000); // 1ÂàÜ„Åî„Å®
        },
        
        /**
         * Êñ∞Ë¶èÂèóÊ≥®„ÉÅ„Çß„ÉÉ„ÇØ
         */
        checkNewOrders: async function() {
            try {
                const response = await NAGANO3.ajax.request('check_new_orders');
                
                if (response.success && response.data?.new_orders > 0) {
                    // JuchuÂΩ¢ÂºèÈÄöÁü•
                    window.JuchuCompat.showNotification(
                        'info',
                        'Êñ∞Ë¶èÂèóÊ≥®',
                        `${response.data.new_orders}‰ª∂„ÅÆÊñ∞„Åó„ÅÑÂèóÊ≥®„Åå„ÅÇ„Çä„Åæ„Åô`,
                        10000
                    );
                }
                
            } catch (error) {
                console.error('Êñ∞Ë¶èÂèóÊ≥®„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
            }
        },
        
        /**
         * Âú®Â∫´ÈÄ£Êê∫ÂàùÊúüÂåñ
         */
        initInventorySync: function() {
            const syncBtn = NAGANO3.dom.safeGet('#sync-inventory');
            if (syncBtn) {
                syncBtn.addEventListener('click', () => {
                    this.syncInventory();
                });
            }
        },
        
        /**
         * Âú®Â∫´ÂêåÊúüÂÆüË°å
         */
        syncInventory: async function() {
            try {
                window.showNotification('Âú®Â∫´ÊÉÖÂ†±„ÇíÂêåÊúü‰∏≠...', 'info');
                
                const response = await NAGANO3.ajax.request('sync_inventory');
                
                if (response.success) {
                    window.showNotification('Âú®Â∫´ÂêåÊúü„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', 'success');
                } else {
                    throw new Error(response.error);
                }
                
            } catch (error) {
                console.error('Âú®Â∫´ÂêåÊúü„Ç®„É©„Éº:', error);
                window.showNotification('Âú®Â∫´ÂêåÊúü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message, 'error');
            }
        }
    };

    // =====================================
    // üéØ Page Module Manager
    // =====================================

    NAGANO3.pageModules.manager = {
        /**
         * ÁèæÂú®„Éö„Éº„Ç∏„Å´Âøú„Åò„Åü„É¢„Ç∏„É•„Éº„É´ÂàùÊúüÂåñ
         */
        initCurrentPage: function() {
            const currentPage = NAGANO3.pageModules.currentPage;
            
            console.log(`üéØ Initializing modules for page: ${currentPage}`);
            
            // ÂÖ±ÈÄö„É¢„Ç∏„É•„Éº„É´ÔºàÂÖ®„Éö„Éº„Ç∏Ôºâ
            // „Å™„ÅóÔºàCore„ÅßÂá¶ÁêÜÊ∏à„ÅøÔºâ
            
            // „Éö„Éº„Ç∏Âõ∫Êúâ„É¢„Ç∏„É•„Éº„É´
            switch (currentPage) {
                case 'dashboard':
                    NAGANO3.pageModules.dashboard.init();
                    NAGANO3.pageModules.activeModules.add('dashboard');
                    break;
                    
                case 'kicho':
                case 'kicho_content':
                    NAGANO3.pageModules.kicho.init();
                    NAGANO3.pageModules.activeModules.add('kicho');
                    break;
                    
                case 'juchu':
                case 'juchu_content':
                    NAGANO3.pageModules.juchu.init();
                    NAGANO3.pageModules.activeModules.add('juchu');
                    break;
                    
                default:
                    console.log(`‚ÑπÔ∏è No specific module for page: ${currentPage}`);
            }
            
            console.log(`‚úÖ Active modules: ${Array.from(NAGANO3.pageModules.activeModules).join(', ')}`);
        },
        
        /**
         * Êú™‰ΩøÁî®„É¢„Ç∏„É•„Éº„É´„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
         */
        cleanup: function() {
            // Dashboard‰ª•Â§ñ„ÅÆ„Éö„Éº„Ç∏„Åß„ÅØDashboard„É¢„Ç∏„É•„Éº„É´„ÇíÂÅúÊ≠¢
            if (NAGANO3.pageModules.currentPage !== 'dashboard' && 
                NAGANO3.pageModules.dashboard.initialized) {
                NAGANO3.pageModules.dashboard.destroy();
                NAGANO3.pageModules.activeModules.delete('dashboard');
            }
        }
    };

    // =====================================
    // üöÄ Page ModulesÂàùÊúüÂåñ
    // =====================================

    NAGANO3.pageModules.initialize = function() {
        try {
            console.log('üèóÔ∏è NAGANO-3 Page Handlers initialization starting...');
            
            // 1. ÁèæÂú®„Éö„Éº„Ç∏„ÅÆ„É¢„Ç∏„É•„Éº„É´ÂàùÊúüÂåñ
            this.manager.initCurrentPage();
            
            // 2. „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
            this.manager.cleanup();
            
            // 3. ÂàùÊúüÂåñÂÆå‰∫Ü
            this.initialized = true;
            this.initializationTime = Date.now() - this.loadStartTime;
            
            console.log(`‚úÖ NAGANO-3 Page Handlers initialized (${this.initializationTime}ms)`);
            
            // Ready „Ç§„Éô„É≥„ÉàÁô∫ÁÅ´
            window.dispatchEvent(new CustomEvent('nagano3:pageModules:ready', {
                detail: {
                    currentPage: this.currentPage,
                    activeModules: Array.from(this.activeModules),
                    initTime: this.initializationTime
                }
            }));
            
        } catch (error) {
            console.error('üí• NAGANO-3 Page Handlers initialization failed:', error);
            NAGANO3.errorBoundary?.handleError(error, 'pageModules-initialization');
        }
    };

    // =====================================
    // üéØ Ëá™ÂãïÂàùÊúüÂåñÔºàCoreÊ∫ñÂÇôÂÆå‰∫ÜÂæåÔºâ
    // =====================================

    if (NAGANO3.core?.initialized) {
        // CoreÊó¢„Å´ÂàùÊúüÂåñÊ∏à„Åø
        NAGANO3.pageModules.initialize();
    } else {
        // CoreÂàùÊúüÂåñÂæÖ„Å°
        window.addEventListener('nagano3:core:ready', function() {
            NAGANO3.pageModules.initialize();
        });
    }

    // „Éá„Éê„ÉÉ„Ç∞Áî®
    window.nagano3PageModulesStatus = function() {
        return {
            initialized: NAGANO3.pageModules.initialized,
            currentPage: NAGANO3.pageModules.currentPage,
            activeModules: Array.from(NAGANO3.pageModules.activeModules),
            initTime: NAGANO3.pageModules.initializationTime
        };
    };

    console.