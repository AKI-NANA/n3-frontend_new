
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * „Ç∞„É≠„Éº„Éê„É´CSSÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÄêÂÆåÊàêÁâà„Äë
 * ÈÖçÁΩÆÂÖà: common/js/core/global-css-manager.js
 *
 * ‚úÖ 404„Ç®„É©„ÉºÂÆåÂÖ®Ëß£Ê±∫
 * ‚úÖ „É≠„Éº„Éá„Ç£„É≥„Ç∞È´ò„ÅïÂïèÈ°åÂØæÁ≠ñ
 * ‚úÖ Êó¢Â≠ò„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®‰øùË≠∑
 */

"use strict";

// ÈáçË§áË™≠„ÅøËæº„ÅøÈò≤Ê≠¢
if (window.NAGANO3_GLOBAL_CSS_MANAGER_LOADED) {
  console.warn("‚ö†Ô∏è Global CSS Manager already loaded");
} else {
  window.NAGANO3_GLOBAL_CSS_MANAGER_LOADED = true;

  console.log("üé® Global CSS Manager ÂàùÊúüÂåñÈñãÂßã");

  class GlobalCSSManager {
    constructor() {
      this.version = "1.0.0-complete";
      this.loadedCSS = new Set();
      this.failedCSS = new Set();
      this.retryCount = new Map();
      this.maxRetries = 3;

      // ÂøÖÈ†àCSS‰∏ÄË¶ß
      this.criticalCSS = [
        "common/css/core/loading-supplement.css", // ‚Üê ÂÆüÂú®„Åô„Çã„Éï„Ç°„Ç§„É´„ÅÆ„Åø
      ];

      this.init();
    }

    init() {
      // DOMÊ∫ñÂÇôÂÆå‰∫ÜÂæå„Å´Ëá™ÂãïÂÆüË°å
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () => this.autoLoad());
      } else {
        setTimeout(() => this.autoLoad(), 0);
      }
    }

    async autoLoad() {
      console.log("üöÄ „Ç∞„É≠„Éº„Éê„É´CSSËá™ÂãïË™≠„ÅøËæº„ÅøÈñãÂßã");

      try {
        // Âç≥Â∫ß„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØCSSÊ≥®ÂÖ•
        this.injectFallbackCSS();

        // ÂøÖÈ†àCSSË™≠„ÅøËæº„ÅøË©¶Ë°å
        await this.loadCriticalCSS();

        // ÂÆå‰∫Ü„Ç§„Éô„É≥„ÉàÁô∫ÁÅ´
        this.dispatchLoadCompleteEvent();
      } catch (error) {
        console.error("‚ùå CSSË™≠„ÅøËæº„ÅøÂ§±Êïó:", error);
        this.handleLoadError();
      }
    }

    async loadCriticalCSS() {
      console.log(`üéØ ÂøÖÈ†àCSSË™≠„ÅøËæº„ÅøÈñãÂßã: ${this.criticalCSS.length}‰ª∂`);

      // ÂêÑCSS„Éï„Ç°„Ç§„É´„ÅÆË™≠„ÅøËæº„ÅøË©¶Ë°å
      for (const cssFile of this.criticalCSS) {
        try {
          const success = await this.loadSingleCSSWithRetry(cssFile);
          if (success) {
            console.log(`‚úÖ CSSË™≠„ÅøËæº„ÅøÊàêÂäü: ${cssFile}`);
            break; // 1„Å§„Åß„ÇÇÊàêÂäü„Åô„Çå„Å∞ÂçÅÂàÜ
          }
        } catch (error) {
          console.warn(`‚ö†Ô∏è CSSË™≠„ÅøËæº„ÅøÂ§±Êïó: ${cssFile}`, error);
        }
      }

      // ÂÖ®„Å¶Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂà©Áî®
      if (this.loadedCSS.size === 0) {
        console.log("üì¶ ÂÖ®CSSË™≠„ÅøËæº„ÅøÂ§±Êïó - „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØCSSÂà©Áî®");
      }
    }

    async loadSingleCSSWithRetry(cssFile) {
      const retries = this.retryCount.get(cssFile) || 0;

      if (retries >= this.maxRetries) {
        throw new Error(`ÊúÄÂ§ßÂÜçË©¶Ë°åÂõûÊï∞Âà∞ÈÅî: ${cssFile}`);
      }

      try {
        return await this.loadSingleCSS(cssFile);
      } catch (error) {
        this.retryCount.set(cssFile, retries + 1);
        console.warn(
          `üîÑ CSSË™≠„ÅøËæº„ÅøÂÜçË©¶Ë°å ${retries + 1}/${this.maxRetries}: ${cssFile}`
        );

        // Â∞ë„ÅóÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å
        await new Promise((resolve) => setTimeout(resolve, 1000));
        return await this.loadSingleCSSWithRetry(cssFile);
      }
    }

    loadSingleCSS(cssFile) {
      return new Promise((resolve, reject) => {
        // Êó¢Â≠ò„ÉÅ„Çß„ÉÉ„ÇØ
        const existing = document.querySelector(
          `link[href="${cssFile}"], link[href*="${cssFile.split("/").pop()}"]`
        );
        if (existing) {
          console.log(`‚è≠Ô∏è „Çπ„Ç≠„ÉÉ„Éó: ${cssFile} (Êó¢Â≠ò)`);
          this.loadedCSS.add(cssFile);
          resolve(true);
          return;
        }

        const link = document.createElement("link");
        link.rel = "stylesheet";
        link.href = cssFile;
        link.type = "text/css";

        // „Çø„Ç§„É†„Ç¢„Ç¶„ÉàË®≠ÂÆö
        const timeout = setTimeout(() => {
          link.remove();
          const error = new Error(`CSSË™≠„ÅøËæº„Åø„Çø„Ç§„É†„Ç¢„Ç¶„Éà: ${cssFile}`);
          reject(error);
        }, 5000);

        link.onload = () => {
          clearTimeout(timeout);
          this.loadedCSS.add(cssFile);
          console.log(`‚úÖ CSSË™≠„ÅøËæº„ÅøÊàêÂäü: ${cssFile}`);
          resolve(true);
        };

        link.onerror = () => {
          clearTimeout(timeout);
          link.remove();
          this.failedCSS.add(cssFile);
          const error = new Error(`CSSË™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${cssFile}`);
          reject(error);
        };

        // DOMËøΩÂä†
        document.head.appendChild(link);
        console.log(`üì• CSSË™≠„ÅøËæº„ÅøÈñãÂßã: ${cssFile}`);
      });
    }

    injectFallbackCSS() {
      const styleId = "nagano3-loading-fallback-css";
      if (document.getElementById(styleId)) {
        return; // Êó¢Â≠ò„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
      }

      const style = document.createElement("style");
      style.id = styleId;
      style.type = "text/css";
      style.textContent = `
                /* NAGANO-3 „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë£úÂÆåCSS - „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁâà */
                
                /* ÂÖ®„É≠„Éº„Éá„Ç£„É≥„Ç∞Ë¶ÅÁ¥†„ÅÆÂü∫Êú¨Ë®≠ÂÆö */
                [class*="loading"],
                [id*="loading"],
                [class*="spinner"] {
                    box-sizing: border-box !important;
                }
                
                /* „Ç™„Éº„Éê„Éº„É¨„Ç§Á≥ª„ÅÆÁ¢∫ÂÆü„Å™ÂÖ®ÁîªÈù¢Ë°®Á§∫ */
                .loading-overlay,
                #loading-overlay,
                [class*="loading"][class*="overlay"],
                [id*="loading"][id*="overlay"] {
                    position: fixed !important;
                    top: 0 !important;
                    left: 0 !important;
                    right: 0 !important;
                    bottom: 0 !important;
                    width: 100vw !important;
                    height: 100vh !important;
                    min-height: 100vh !important;
                    z-index: 999999 !important;
                    display: flex !important;
                    align-items: center !important;
                    justify-content: center !important;
                    background: rgba(255, 255, 255, 0.95) !important;
                    backdrop-filter: blur(2px) !important;
                }
                
                /* „Çπ„Éî„Éä„ÉºË¶ÅÁ¥†„ÅÆÁ¢∫ÂÆü„Å™Ë°®Á§∫ */
                .loading-spinner,
                [class*="loading"][class*="spinner"],
                [class*="spinner"] {
                    width: 50px !important;
                    height: 50px !important;
                    min-width: 50px !important;
                    min-height: 50px !important;
                    border: 4px solid #f3f3f3 !important;
                    border-top: 4px solid #007bff !important;
                    border-radius: 50% !important;
                    animation: nagano3-fallback-spin 1s linear infinite !important;
                    display: block !important;
                    margin: 0 auto 20px auto !important;
                }
                
                /* „É≠„Éº„Éá„Ç£„É≥„Ç∞„ÉÜ„Ç≠„Çπ„Éà */
                .loading-text,
                [data-loading="text"] {
                    color: #333 !important;
                    font-size: 16px !important;
                    text-align: center !important;
                    margin-top: 10px !important;
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
                }
                
                /* „Çπ„Éî„Éä„Éº„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ */
                @keyframes nagano3-fallback-spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                /* È´ò„Åï0„ÅÆÂïèÈ°åË¶ÅÁ¥†„ÇíÂº∑Âà∂‰øÆÊ≠£ */
                [class*="loading"][style*="height: 0"],
                [id*="loading"][style*="height: 0"],
                [class*="spinner"][style*="height: 0"] {
                    height: auto !important;
                    min-height: 50px !important;
                }
                
                /* ÈùûË°®Á§∫Áä∂ÊÖã„ÅÆË¶ÅÁ¥†„ÇÇÈÅ©Âàá„Å™„Çµ„Ç§„Ç∫„Çí‰øùÊåÅ */
                [class*="loading"][style*="display: none"],
                [id*="loading"][style*="display: none"] {
                    min-height: 50px !important;
                }
                
                /* „Éï„É¨„ÉÉ„ÇØ„Çπ„Éú„ÉÉ„ÇØ„ÇπÂÜÖ„Åß„ÅÆÈÅ©Âàá„Å™Ë°®Á§∫ */
                [class*="loading"] {
                    flex-shrink: 0 !important;
                }
                
                /* „É¢„Éê„Ç§„É´ÂØæÂøú */
                @media (max-width: 768px) {
                    .loading-overlay,
                    #loading-overlay {
                        padding: 20px !important;
                    }
                    
                    [class*="loading"][class*="spinner"],
                    .loading-spinner {
                        width: 40px !important;
                        height: 40px !important;
                        min-width: 40px !important;
                        min-height: 40px !important;
                    }
                }
                
                /* Âç∞Âà∑ÊôÇ„ÅÆÈùûË°®Á§∫ */
                @media print {
                    [class*="loading"],
                    [id*="loading"] {
                        display: none !important;
                    }
                }
                
                /* ÁúÅÈõªÂäõ„É¢„Éº„ÉâÂØæÂøú */
                @media (prefers-reduced-motion: reduce) {
                    [class*="spinner"] {
                        animation: none !important;
                    }
                }
            `;

      document.head.appendChild(style);
      console.log("üíâ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØCSSÊ≥®ÂÖ•ÂÆå‰∫Ü");
    }

    handleLoadError() {
      // Êó¢„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØCSSÊ≥®ÂÖ•Ê∏à„Åø

      // NAGANO3„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´„Ç®„É©„ÉºÊÉÖÂ†±‰øùÂ≠ò
      if (window.NAGANO3) {
        window.NAGANO3.css_load_errors = Array.from(this.failedCSS);
        window.NAGANO3.css_fallback_active = true;
      }

      console.log("üõ°Ô∏è CSSË™≠„ÅøËæº„Åø„Ç®„É©„ÉºÂØæÂøúÂÆå‰∫Ü - „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂà©Áî®");
    }

    dispatchLoadCompleteEvent() {
      const event = new CustomEvent("NAGANO3:css-manager-ready", {
        detail: {
          loadedCSS: Array.from(this.loadedCSS),
          failedCSS: Array.from(this.failedCSS),
          totalRequired: this.criticalCSS.length,
          fallbackActive: this.loadedCSS.size === 0,
          version: this.version,
          timestamp: Date.now(),
        },
      });

      document.dispatchEvent(event);
      window.dispatchEvent(event);

      console.log("üì° CSS Manager ÂÆå‰∫Ü„Ç§„Éô„É≥„ÉàÁô∫ÁÅ´");
    }

    // ÊâãÂãïCSSËøΩÂä†
    async addCSS(cssFile, isCritical = false) {
      try {
        const success = await this.loadSingleCSS(cssFile);
        if (success) {
          console.log(`‚úÖ ÊâãÂãïCSSËøΩÂä†ÊàêÂäü: ${cssFile}`);
          return true;
        }
      } catch (error) {
        console.error(`‚ùå ÊâãÂãïCSSËøΩÂä†Â§±Êïó: ${cssFile}`, error);
      }
      return false;
    }

    // „Çπ„ÉÜ„Éº„Çø„ÇπÂèñÂæó
    getStatus() {
      return {
        version: this.version,
        loadedCSS: Array.from(this.loadedCSS),
        failedCSS: Array.from(this.failedCSS),
        criticalCSS: this.criticalCSS,
        loadSuccess: this.loadedCSS.size > 0,
        fallbackActive: this.loadedCSS.size === 0,
        retryCount: Object.fromEntries(this.retryCount),
      };
    }
  }

  // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞Ë®≠ÂÆö
  window.NAGANO3_CSS_MANAGER = new GlobalCSSManager();

  // NAGANO3„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´Áµ±Âêà
  if (window.NAGANO3) {
    if (!window.NAGANO3.system) {
      window.NAGANO3.system = {};
    }
    window.NAGANO3.system.cssManager = window.NAGANO3_CSS_MANAGER;
  }

  // „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞Êèê‰æõ
  window.addGlobalCSS = function (cssFile, isCritical = false) {
    return window.NAGANO3_CSS_MANAGER.addCSS(cssFile, isCritical);
  };

  window.getCSSStatus = function () {
    return window.NAGANO3_CSS_MANAGER.getStatus();
  };

  // Êó¢Â≠ò„ÅÆshowLoading/hideLoadingÈñ¢Êï∞„ÅåÁÑ°„ÅÑÂ†¥Âêà„ÅÆÁ∑äÊÄ•‰ª£Êõø
  if (!window.showLoading) {
    window.showLoading = function (text = "Ë™≠„ÅøËæº„Åø‰∏≠...") {
      // Êó¢Â≠òË¶ÅÁ¥†Á¢∫Ë™ç
      let overlay = document.getElementById("nagano3-temp-loading");
      if (overlay) {
        overlay.querySelector(".loading-text").textContent = text;
        overlay.style.display = "flex";
        return;
      }

      // Êñ∞Ë¶è‰ΩúÊàê
      overlay = document.createElement("div");
      overlay.id = "nagano3-temp-loading";
      overlay.className = "loading-overlay";
      overlay.innerHTML = `
                <div>
                    <div class="loading-spinner"></div>
                    <div class="loading-text">${text}</div>
                </div>
            `;
      overlay.style.display = "flex";

      document.body.appendChild(overlay);
      console.log("‚úÖ Á∑äÊÄ•„É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫:", text);
    };
  }

  if (!window.hideLoading) {
    window.hideLoading = function () {
      const overlay = document.getElementById("nagano3-temp-loading");
      if (overlay) {
        overlay.style.display = "none";
        console.log("‚úÖ Á∑äÊÄ•„É≠„Éº„Éá„Ç£„É≥„Ç∞ÈùûË°®Á§∫");
      }
    };
  }

  // Á∑äÊÄ•„É≠„Éº„Éá„Ç£„É≥„Ç∞Âº∑Âà∂ÈùûË°®Á§∫
  window.forceHideAllLoadings = function () {
    const allLoadings = document.querySelectorAll(
      '[class*="loading"], [id*="loading"]'
    );
    allLoadings.forEach((el) => {
      el.style.display = "none";
    });
    console.log(`üßπ ÂÖ®„É≠„Éº„Éá„Ç£„É≥„Ç∞Ë¶ÅÁ¥†Âº∑Âà∂ÈùûË°®Á§∫: ${allLoadings.length}ÂÄã`);
  };

  // Ê≠£Â∏∏Ë°®Á§∫Á¢∫Ë™çÁî®Èñ¢Êï∞
  window.properShowLoading = function (text = "Âá¶ÁêÜ‰∏≠...") {
    window.hideLoading(); // Êó¢Â≠ò„ÇíÈö†„Åô
    setTimeout(() => {
      window.showLoading(text);
    }, 100);
  };

  console.log("‚úÖ Global CSS Manager ÂàùÊúüÂåñÂÆå‰∫Ü („Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂØæÂøú)");
}
