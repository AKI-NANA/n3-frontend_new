/**
 * NAGANO-3 スマートパス解決システム
 * common/js/utils/smart_path_resolver.js
 * 
 * ✅ フォルダ移動対応の自動検出
 * ✅ 複数パターンでファイル検索
 * ✅ 破損リンクの自動修復
 * ✅ 段階的移行サポート
 * 
 * @version 1.0.0
 * @created 2025-07-06
 */

"use strict";

/**
 * スマートパス解決クラス
 */
class SmartPathResolver {
    constructor() {
        this.searchPaths = [
            // 🎯 推奨構造
            'common/js/core/',
            'common/js/ui/', 
            'common/js/debug/',
            'common/js/utils/',
            'common/js/modules/',
            
            // 🔄 従来構造（後方互換）
            'common/js/',
            
            // 📦 モジュール内構造
            'modules/{module}/js/',
            'modules/{module}/assets/',
            'modules/{module}/',
            
            // 🔧 その他候補
            'assets/js/',
            'js/',
            'scripts/',
            'static/js/'
        ];
        
        this.fileCache = new Map();
        this.notFoundCache = new Set();
        this.moveHistory = new Map();
        
        this.initializeMoveHistory();
        
        console.log('🎯 SmartPathResolver: 初期化完了');
    }
    
    /**
     * ファイル移動履歴の初期化
     */
    initializeMoveHistory() {
        try {
            const stored = localStorage.getItem('nagano3_file_moves');
            if (stored) {
                const moves = JSON.parse(stored);
                this.moveHistory = new Map(moves);
                console.log(`📋 移動履歴復元: ${this.moveHistory.size}件`);
            }
        } catch (error) {
            console.warn('移動履歴の復元に失敗:', error);
        }
    }
    
    /**
     * メイン: ファイル検索・解決
     */
    async findFile(filename, moduleName = null, options = {}) {
        const cacheKey = this.getCacheKey(filename, moduleName);
        
        // キャッシュチェック
        if (this.fileCache.has(cacheKey)) {
            const cached = this.fileCache.get(cacheKey);
            console.log(`📦 キャッシュヒット: ${filename} → ${cached}`);
            return cached;
        }
        
        // Not Found キャッシュチェック
        if (this.notFoundCache.has(cacheKey)) {
            console.log(`❌ Not Found キャッシュ: ${filename}`);
            return null;
        }
        
        console.log(`🔍 ファイル検索開始: ${filename}${moduleName ? ` (module: ${moduleName})` : ''}`);
        
        // 1. 移動履歴から検索
        const fromHistory = await this.searchMoveHistory(filename);
        if (fromHistory) {
            this.fileCache.set(cacheKey, fromHistory);
            return fromHistory;
        }
        
        // 2. パターンマッチング検索
        const fromPattern = await this.searchByPatterns(filename, moduleName);
        if (fromPattern) {
            this.fileCache.set(cacheKey, fromPattern);
            return fromPattern;
        }
        
        // 3. 推測による検索
        const fromGuess = await this.searchByGuess(filename, moduleName);
        if (fromGuess) {
            this.fileCache.set(cacheKey, fromGuess);
            return fromGuess;
        }
        
        // 4. 見つからない場合
        console.warn(`⚠️ ファイル未発見: ${filename}`);
        this.notFoundCache.add(cacheKey);
        
        if (options.createFallback) {
            return this.createFallbackPath(filename, moduleName);
        }
        
        return null;
    }
    
    /**
     * 移動履歴から検索
     */
    async searchMoveHistory(filename) {
        for (const [oldPath, newPath] of this.moveHistory) {
            if (oldPath.endsWith(filename)) {
                if (await this.fileExists(newPath)) {
                    console.log(`📋 移動履歴から発見: ${filename} → ${newPath}`);
                    return newPath;
                }
            }
        }
        return null;
    }
    
    /**
     * パターンマッチング検索
     */
    async searchByPatterns(filename, moduleName) {
        for (const basePath of this.searchPaths) {
            const path = moduleName ? 
                basePath.replace('{module}', moduleName) : 
                basePath;
            
            const fullPath = path + filename;
            
            if (await this.fileExists(fullPath)) {
                console.log(`📍 パターンマッチ: ${filename} → ${fullPath}`);
                return fullPath;
            }
        }
        return null;
    }
    
    /**
     * 推測による検索
     */
    async searchByGuess(filename, moduleName) {
        const guessedPaths = this.generateGuessedPaths(filename, moduleName);
        
        for (const guessedPath of guessedPaths) {
            if (await this.fileExists(guessedPath)) {
                console.log(`🔮 推測ヒット: ${filename} → ${guessedPath}`);
                return guessedPath;
            }
        }
        
        return null;
    }
    
    /**
     * 推測パス生成
     */
    generateGuessedPaths(filename, moduleName) {
        const paths = [];
        
        // ファイル名による分類推測
        if (filename.includes('debug')) {
            paths.push(`common/js/debug/${filename}`);
        }
        
        if (filename.includes('theme')) {
            paths.push(`common/js/ui/${filename}`);
        }
        
        if (filename.includes('ajax')) {
            paths.push(`common/js/core/${filename}`);
        }
        
        if (filename.includes('notification')) {
            paths.push(`common/js/ui/${filename}`);
        }
        
        if (filename.includes('config')) {
            paths.push(`common/js/core/${filename}`);
        }
        
        if (filename.includes('util') || filename.includes('helper')) {
            paths.push(`common/js/utils/${filename}`);
        }
        
        // モジュール名による推測
        if (moduleName) {
            paths.push(`modules/${moduleName}/${filename}`);
            paths.push(`modules/${moduleName}/js/${filename}`);
            paths.push(`modules/${moduleName}/assets/${filename}`);
            paths.push(`common/js/modules/${moduleName}/${filename}`);
        }
        
        return paths;
    }
    
    /**
     * ファイル存在確認
     */
    async fileExists(path) {
        try {
            const response = await fetch(path, { 
                method: 'HEAD',
                cache: 'no-cache' 
            });
            return response.status === 200;
        } catch {
            return false;
        }
    }
    
    /**
     * ファイル移動の記録
     */
    recordMove(oldPath, newPath) {
        this.moveHistory.set(oldPath, newPath);
        
        try {
            localStorage.setItem('nagano3_file_moves', 
                JSON.stringify(Array.from(this.moveHistory.entries())));
            console.log(`📝 移動記録: ${oldPath} → ${newPath}`);
        } catch (error) {
            console.warn('移動記録の保存に失敗:', error);
        }
    }
    
    /**
     * フォールバックパス作成
     */
    createFallbackPath(filename, moduleName) {
        if (moduleName) {
            return `modules/${moduleName}/${filename}`;
        }
        
        // ファイル種別による推測
        if (filename.endsWith('.js')) {
            return `common/js/${filename}`;
        }
        
        return `assets/${filename}`;
    }
    
    /**
     * キャッシュキー生成
     */
    getCacheKey(filename, moduleName) {
        return moduleName ? `${moduleName}:${filename}` : filename;
    }
    
    /**
     * キャッシュクリア
     */
    clearCache() {
        this.fileCache.clear();
        this.notFoundCache.clear();
        console.log('🧹 パスキャッシュクリア完了');
    }
    
    /**
     * 統計情報
     */
    getStats() {
        return {
            cached_files: this.fileCache.size,
            not_found_cache: this.notFoundCache.size,
            move_history: this.moveHistory.size,
            search_patterns: this.searchPaths.length
        };
    }
    
    /**
     * デバッグ情報表示
     */
    showDebugInfo() {
        console.group('🎯 SmartPathResolver Debug Info');
        console.log('Stats:', this.getStats());
        console.log('Search Paths:', this.searchPaths);
        console.log('File Cache:', Array.from(this.fileCache.entries()));
        console.log('Move History:', Array.from(this.moveHistory.entries()));
        console.groupEnd();
    }
}

/**
 * 互換性ブリッジクラス
 */
class CompatibilityBridge {
    constructor(pathResolver) {
        this.pathResolver = pathResolver;
        this.setupAliases();
        this.setupPathRedirects();
        
        console.log('🔗 CompatibilityBridge: 初期化完了');
    }
    
    setupAliases() {
        // 旧関数名のエイリアス
        if (window.NAGANO3) {
            window.NAGANO3_OLD = {
                loadScript: window.NAGANO3.loadScript,
                ajax: window.NAGANO3.ajax
            };
            
            // 短縮エイリアス
            window.N3 = window.NAGANO3;
        }
    }
    
    setupPathRedirects() {
        // 旧パスから新パスへの自動リダイレクト
        const pathRedirects = {
            'common/js/ajax.js': 'common/js/core/ajax.js',
            'common/js/notifications.js': 'common/js/ui/notifications.js',
            'common/js/theme.js': 'common/js/ui/theme.js',
            'common/js/debug_safe.js': 'common/js/debug/debug_safe.js',
            'common/js/module_loader.js': 'common/js/utils/module_loader.js'
        };
        
        // パスリダイレクトを記録
        for (const [oldPath, newPath] of Object.entries(pathRedirects)) {
            this.pathResolver.recordMove(oldPath, newPath);
        }
        
        window.NAGANO3_PATH_REDIRECTS = pathRedirects;
    }
    
    /**
     * 旧パスの自動変換
     */
    async resolveOldPath(oldPath) {
        // リダイレクト辞書から検索
        if (window.NAGANO3_PATH_REDIRECTS[oldPath]) {
            return window.NAGANO3_PATH_REDIRECTS[oldPath];
        }
        
        // パスリゾルバーで検索
        const filename = oldPath.split('/').pop();
        return await this.pathResolver.findFile(filename);
    }
}

/**
 * 段階的移行ヘルパー
 */
class MigrationHelper {
    constructor(pathResolver) {
        this.pathResolver = pathResolver;
        this.migrationSteps = [];
        this.currentStep = 0;
        
        console.log('🔄 MigrationHelper: 初期化完了');
    }
    
    addMigrationStep(description, actions) {
        this.migrationSteps.push({ 
            description, 
            actions: typeof actions === 'function' ? actions : () => actions
        });
    }
    
    async executeMigration() {
        console.log('🔄 段階的移行開始');
        
        for (let i = 0; i < this.migrationSteps.length; i++) {
            const step = this.migrationSteps[i];
            console.log(`📋 Step ${i+1}: ${step.description}`);
            
            try {
                await step.actions();
                console.log(`✅ Step ${i+1} 完了`);
                this.currentStep = i + 1;
            } catch (error) {
                console.error(`❌ Step ${i+1} 失敗:`, error);
                break;
            }
        }
        
        console.log(`🎉 移行完了: ${this.currentStep}/${this.migrationSteps.length} steps`);
    }
    
    async checkFileMove(oldPath, newPath) {
        const exists = await this.pathResolver.fileExists(newPath);
        if (exists) {
            this.pathResolver.recordMove(oldPath, newPath);
            console.log(`✅ ファイル移動確認: ${oldPath} → ${newPath}`);
        } else {
            console.warn(`⚠️ ファイル移動未完了: ${newPath} が見つかりません`);
        }
    }
}

// =====================================
// グローバル初期化
// =====================================

// インスタンス作成
const smartPathResolver = new SmartPathResolver();
const compatibilityBridge = new CompatibilityBridge(smartPathResolver);
const migrationHelper = new MigrationHelper(smartPathResolver);

// NAGANO3統合
if (window.NAGANO3) {
    window.NAGANO3.pathResolver = smartPathResolver;
    window.NAGANO3.compatibility = compatibilityBridge;
    window.NAGANO3.migration = migrationHelper;
} else {
    window.NAGANO3_PATH_RESOLVER = smartPathResolver;
}

// グローバル関数
window.findFile = (filename, moduleName) => smartPathResolver.findFile(filename, moduleName);
window.recordFileMove = (oldPath, newPath) => smartPathResolver.recordMove(oldPath, newPath);
window.showPathDebug = () => smartPathResolver.showDebugInfo();

// =====================================
// 事前定義済み移行ステップ
// =====================================

// Core JSファイルの移行
migrationHelper.addMigrationStep(
    'Core JSファイルの移動確認',
    async () => {
        await migrationHelper.checkFileMove('common/js/ajax.js', 'common/js/core/ajax.js');
        await migrationHelper.checkFileMove('common/js/config.js', 'common/js/core/config.js');
        await migrationHelper.checkFileMove('common/js/error_handling.js', 'common/js/core/error_handling.js');
    }
);

// UI JSファイルの移行
migrationHelper.addMigrationStep(
    'UI JSファイルの移動確認',
    async () => {
        await migrationHelper.checkFileMove('common/js/notifications.js', 'common/js/ui/notifications.js');
        await migrationHelper.checkFileMove('common/js/theme.js', 'common/js/ui/theme.js');
        await migrationHelper.checkFileMove('common/js/loading-control.js', 'common/js/ui/loading-control.js');
    }
);

// Debug JSファイルの移行
migrationHelper.addMigrationStep(
    'Debug JSファイルの移動確認',
    async () => {
        await migrationHelper.checkFileMove('common/js/debug_safe.js', 'common/js/debug/debug_safe.js');
        await migrationHelper.checkFileMove('common/js/debug_emergency_fallback.js', 'common/js/debug/debug_emergency_fallback.js');
    }
);

console.log('🎯 SmartPathResolver システム初期化完了');

// 自動移行実行（デバッグモード時）
if (window.location.search.includes('auto_migrate=true')) {
    setTimeout(() => {
        console.log('🚀 自動移行実行開始');
        migrationHelper.executeMigration();
    }, 1000);
}