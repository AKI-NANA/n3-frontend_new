/**
 * 棚卸しシステム 純粋Webツール版 JavaScript
 * ファイル: tanaoroshi_inventory.js
 * 方針: hooks完全排除・標準JavaScript・直接API呼び出し
 * 参照: inventory_system_fixed.html の動作を完全再現
 */

(function() {
    'use strict';
    
    // ========================================
    // グローバル変数（シンプル管理）
    // ========================================
    window.TanaoroshiInventory = {
        selectedProducts: [],
        allProducts: [],
        filteredProducts: [],
        exchangeRate: 150.25,
        currentView: 'grid', // 'grid' | 'list'
        isLoading: false,
        apiEndpoint: 'modules/tanaoroshi_inline_complete/tanaoroshi_ajax_handler.php'
    };
    
    // 短縮アクセス
    const State = window.TanaoroshiInventory;
    
    // ========================================
    // DOM初期化（DOMContentLoaded）
    // ========================================
    document.addEventListener('DOMContentLoaded', function() {
        console.log('🚀 棚卸しシステム（純粋Webツール版）初期化開始');
        
        try {
            initializeInventorySystem();
        } catch (error) {
            console.error('❌ 初期化エラー:', error);
            showErrorMessage('システムの初期化に失敗しました: ' + error.message);
        }
    });
    
    // ========================================
    // メインシステム初期化
    // ========================================
    function initializeInventorySystem() {
        // イベントリスナー設定
        setupEventListeners();
        
        // データ読み込み開始
        loadInventoryData();
        
        // 為替レート更新
        updateExchangeRateDisplay();
        
        console.log('✅ 棚卸しシステム初期化完了');
    }
    
    // ========================================
    // イベントリスナー設定
    // ========================================
    function setupEventListeners() {
        // ビュー切り替えボタン
        const cardViewBtn = document.getElementById('card-view-btn');
        const listViewBtn = document.getElementById('list-view-btn');
        
        if (cardViewBtn) {
            cardViewBtn.addEventListener('click', () => switchView('grid'));
        }
        if (listViewBtn) {
            listViewBtn.addEventListener('click', () => switchView('list'));
        }
        
        // フィルター関連
        const filterSelects = document.querySelectorAll('.inventory__filter-select');
        filterSelects.forEach(select => {
            select.addEventListener('change', applyFilters);
        });
        
        // フィルターボタン
        const applyBtn = document.querySelector('.btn[onclick="applyFilters()"]');
        const resetBtn = document.querySelector('.btn[onclick="resetFilters()"]');
        
        if (applyBtn) {
            applyBtn.removeAttribute('onclick');
            applyBtn.addEventListener('click', applyFilters);
        }
        if (resetBtn) {
            resetBtn.removeAttribute('onclick');
            resetBtn.addEventListener('click', resetFilters);
        }
        
        // 検索機能
        const searchInput = document.getElementById('search-input');
        if (searchInput) {
            searchInput.addEventListener('input', debounce(handleSearch, 300));
        }
        
        // セット品作成ボタン
        const createSetBtn = document.getElementById('create-set-btn');
        if (createSetBtn) {
            createSetBtn.addEventListener('click', handleCreateSet);
        }
        
        // 新規商品登録ボタン
        const addProductBtn = document.getElementById('add-product-btn');
        if (addProductBtn) {
            addProductBtn.addEventListener('click', handleAddProduct);
        }
        
        console.log('✅ イベントリスナー設定完了');
    }
    
    // ========================================
    // データ読み込み（fetch API使用）
    // ========================================
    async function loadInventoryData() {
        if (State.isLoading) {
            console.log('⏳ 既にデータ読み込み中です');
            return;
        }
        
        State.isLoading = true;
        showLoadingIndicator(true);
        
        try {
            console.log('📡 PostgreSQLデータ取得開始:', State.apiEndpoint);
            
            const response = await fetch(State.apiEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: new URLSearchParams({
                    action: 'get_inventory',
                    limit: '50',
                    dev_mode: '1'
                }),
                cache: 'no-cache'
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || 'データ取得に失敗しました');
            }
            
            // データ保存
            State.allProducts = data.data || [];
            State.filteredProducts = [...State.allProducts];
            
            console.log(`✅ データ取得成功: ${State.allProducts.length}件`);
            
            // UI更新
            updateProductDisplay();
            updateStatisticsDisplay(data.statistics);
            
            // 成功メッセージ
            showSuccessMessage(`${State.allProducts.length}件の商品データを読み込みました`);
            
        } catch (error) {
            console.error('❌ データ取得エラー:', error);
            
            // エラー時はサンプルデータ表示
            console.log('🔄 サンプルデータにフォールバック');
            loadSampleData();
            
            showErrorMessage(`データ取得エラー: ${error.message}`);
            
        } finally {
            State.isLoading = false;
            showLoadingIndicator(false);
        }
    }
    
    // ========================================
    // サンプルデータ（フォールバック用）
    // ========================================
    function loadSampleData() {
        const sampleData = [
            {
                id: 1,
                name: 'Vintage Japanese Kimono Traditional Silk',
                sku: 'EB-KIMONO01',
                type: 'stock',
                condition: 'used',
                priceUSD: 89.99,
                costUSD: 58.49,
                profitUSD: 31.50,
                stock: 1,
                category: 'Clothing',
                channels: ['ebay'],
                image: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=300&h=200&fit=crop',
                listing_status: 'active',
                watchers_count: 24,
                views_count: 342
            },
            {
                id: 2,
                name: 'Nintendo Game Boy Color Pokemon Edition',
                sku: 'EB-GBCPOKE',
                type: 'stock',
                condition: 'used',
                priceUSD: 156.78,
                costUSD: 101.91,
                profitUSD: 54.87,
                stock: 1,
                category: 'Electronics',
                channels: ['ebay'],
                image: 'https://images.unsplash.com/photo-1606144042614-b2417e99c4e3?w=300&h=200&fit=crop',
                listing_status: 'active',
                watchers_count: 67,
                views_count: 1234
            },
            {
                id: 3,
                name: 'Sony Walkman Vintage Cassette Player',
                sku: 'EB-WALKMAN',
                type: 'dropship',
                condition: 'used',
                priceUSD: 234.56,
                costUSD: 152.46,
                profitUSD: 82.10,
                stock: 0,
                category: 'Electronics',
                channels: ['ebay'],
                image: 'https://images.unsplash.com/photo-1493020258366-be3ead61c4bb?w=300&h=200&fit=crop',
                listing_status: 'active',
                watchers_count: 43,
                views_count: 876
            }
        ];
        
        State.allProducts = sampleData;
        State.filteredProducts = [...sampleData];
        
        updateProductDisplay();
        updateStatisticsDisplay({
            total: 3,
            stock: 2,
            dropship: 1,
            hybrid: 0,
            set: 0,
            total_value_usd: 481.33
        });
        
        console.log('📋 サンプルデータ表示完了: 3件');
    }
    
    // ========================================
    // 商品表示更新
    // ========================================
    function updateProductDisplay() {
        if (State.currentView === 'grid') {
            updateCardView();
        } else {
            updateListView();
        }
    }
    
    // ========================================
    // カードビュー更新
    // ========================================
    function updateCardView() {
        const container = document.getElementById('card-view');
        if (!container) {
            console.error('❌ card-view container not found');
            return;
        }
        
        if (State.filteredProducts.length === 0) {
            container.innerHTML = `
                <div style="grid-column: 1 / -1; text-align: center; padding: 2rem; color: var(--text-secondary);">
                    <i class="fas fa-inbox" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                    <p>表示する商品がありません</p>
                </div>
            `;
            return;
        }
        
        const cardsHTML = State.filteredProducts.map(product => createProductCard(product)).join('');
        container.innerHTML = cardsHTML;
        
        // カードイベントリスナー設定
        setupCardEventListeners();
        
        console.log(`🎨 カードビュー更新完了: ${State.filteredProducts.length}件`);
    }
    
    // ========================================
    // 商品カード生成
    // ========================================
    function createProductCard(product) {
        const badgeClass = `inventory__badge--${product.type}`;
        const badgeText = {
            'stock': '有在庫',
            'dropship': '無在庫',
            'set': 'セット品',
            'hybrid': 'ハイブリッド'
        }[product.type] || '不明';
        
        const priceJPY = Math.round(product.priceUSD * State.exchangeRate);
        
        const imageHTML = product.image ? 
            `<img src="${product.image}" alt="${product.name}" class="inventory__card-img">` :
            `<div class="inventory__card-placeholder">
                <i class="fas fa-image"></i>
                <span>画像なし</span>
            </div>`;
        
        const stockInfo = (product.type === 'stock' || product.type === 'hybrid') ?
            `<span style="color: var(--color-success); font-size: 0.7rem; font-weight: 600;">在庫:${product.stock}</span>` :
            `<span style="color: var(--color-info); font-size: 0.7rem;">${product.listing_status}</span>`;
        
        return `
            <div class="inventory__card" data-id="${product.id}" data-type="${product.type}">
                <div class="inventory__card-image">
                    ${imageHTML}
                    <div class="inventory__card-badges">
                        <span class="inventory__badge ${badgeClass}">${badgeText}</span>
                        <div class="inventory__channel-badges">
                            <span class="inventory__channel-badge inventory__channel-badge--ebay">E</span>
                        </div>
                    </div>
                </div>
                <div class="inventory__card-info">
                    <h3 class="inventory__card-title" title="${product.name}">${product.name}</h3>
                    <div class="inventory__card-price">
                        <div class="inventory__card-price-main">$${product.priceUSD.toFixed(2)}</div>
                        <div class="inventory__card-price-sub">¥${priceJPY.toLocaleString()}</div>
                    </div>
                    <div class="inventory__card-meta">
                        <div class="inventory__meta-item">
                            <span>仕入価格:</span>
                            <span class="inventory__meta-value">$${product.costUSD.toFixed(2)}</span>
                        </div>
                        <div class="inventory__meta-item">
                            <span>利益:</span>
                            <span class="inventory__meta-value">$${product.profitUSD.toFixed(2)}</span>
                        </div>
                    </div>
                    <div class="inventory__card-footer">
                        <span class="inventory__card-sku" title="${product.sku}">${product.sku}</span>
                        ${stockInfo}
                    </div>
                </div>
            </div>
        `;
    }
    
    // ========================================
    // カードイベントリスナー設定
    // ========================================
    function setupCardEventListeners() {
        const cards = document.querySelectorAll('.inventory__card');
        
        cards.forEach(card => {
            // クリック除外要素チェック
            card.addEventListener('click', function(e) {
                if (e.target.tagName === 'INPUT' || e.target.tagName === 'BUTTON' || e.target.closest('button')) {
                    return;
                }
                
                selectCard(this);
            });
        });
    }
    
    // ========================================
    // カード選択処理
    // ========================================
    function selectCard(cardElement) {
        const productId = parseInt(cardElement.dataset.id);
        
        if (isNaN(productId)) {
            console.error('❌ 無効な商品ID:', cardElement.dataset.id);
            return;
        }
        
        // 選択状態切り替え
        cardElement.classList.toggle('inventory__card--selected');
        
        if (cardElement.classList.contains('inventory__card--selected')) {
            // 選択追加
            if (!State.selectedProducts.includes(productId)) {
                State.selectedProducts.push(productId);
            }
        } else {
            // 選択解除
            State.selectedProducts = State.selectedProducts.filter(id => id !== productId);
        }
        
        updateSelectionUI();
        console.log('📋 選択商品:', State.selectedProducts);
    }
    
    // ========================================
    // 選択UI更新
    // ========================================
    function updateSelectionUI() {
        const createSetBtn = document.getElementById('create-set-btn');
        const setBtnText = document.getElementById('set-btn-text');
        
        if (createSetBtn && setBtnText) {
            const selectedCount = State.selectedProducts.length;
            
            if (selectedCount >= 2) {
                createSetBtn.disabled = false;
                createSetBtn.className = 'btn btn--warning';
                setBtnText.textContent = `選択商品でセット品作成 (${selectedCount}点)`;
            } else {
                createSetBtn.disabled = false;
                createSetBtn.className = 'btn btn--warning';
                setBtnText.textContent = '新規セット品作成';
            }
        }
    }
    
    // ========================================
    // ビュー切り替え
    // ========================================
    function switchView(view) {
        const cardView = document.getElementById('card-view');
        const excelView = document.getElementById('excel-view');
        const cardViewBtn = document.getElementById('card-view-btn');
        const listViewBtn = document.getElementById('list-view-btn');
        
        console.log('🔄 ビュー切り替え開始:', view);
        console.log('要素確認 - cardView:', !!cardView, 'excelView:', !!excelView);
        
        if (!cardView || !excelView || !cardViewBtn || !listViewBtn) {
            console.error('❌ ビュー要素が見つかりません');
            console.error('要素状態:', { cardView: !!cardView, excelView: !!excelView, cardViewBtn: !!cardViewBtn, listViewBtn: !!listViewBtn });
            return;
        }
        
        // ボタン状態更新
        cardViewBtn.classList.remove('inventory__view-btn--active');
        listViewBtn.classList.remove('inventory__view-btn--active');
        
        if (view === 'grid') {
            // 🔧 カードビュー表示
            cardView.classList.remove('inventory__view--hidden');
            cardView.classList.add('inventory__view--visible');
            excelView.classList.remove('inventory__view--visible');
            excelView.classList.add('inventory__view--hidden');
            cardViewBtn.classList.add('inventory__view-btn--active');
            listViewBtn.classList.remove('inventory__view-btn--active');
            State.currentView = 'grid';
            console.log('✅ カードビューに切り替え');
        } else {
            // 🔧 Excelビュー表示
            cardView.classList.remove('inventory__view--visible');
            cardView.classList.add('inventory__view--hidden');
            excelView.classList.remove('inventory__view--hidden');
            excelView.classList.add('inventory__view--visible');
            listViewBtn.classList.add('inventory__view-btn--active');
            cardViewBtn.classList.remove('inventory__view-btn--active');
            State.currentView = 'list';
            updateListView();
            console.log('✅ Excelビューに切り替え');
        }
    }
    
    // ========================================
    // リストビュー更新
    // ========================================
    function updateListView() {
        const tableBody = document.getElementById('excel-table-body');
        if (!tableBody) {
            console.error('❌ excel-table-body not found');
            return;
        }
        
        if (State.filteredProducts.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="13" style="text-align: center; padding: 2rem; color: var(--text-secondary);">
                        表示する商品がありません
                    </td>
                </tr>
            `;
            return;
        }
        
        const rowsHTML = State.filteredProducts.map(product => createTableRow(product)).join('');
        tableBody.innerHTML = rowsHTML;
        
        console.log(`📊 リストビュー更新完了: ${State.filteredProducts.length}件`);
    }
    
    // ========================================
    // テーブル行生成
    // ========================================
    function createTableRow(product) {
        const typeOptions = {
            'stock': '有在庫',
            'dropship': '無在庫',
            'set': 'セット品',
            'hybrid': 'ハイブリッド'
        };
        
        const conditionText = product.condition === 'new' ? '新品' : '中古';
        const profit = (product.priceUSD - product.costUSD).toFixed(2);
        
        return `
            <tr data-id="${product.id}">
                <td><input type="checkbox" class="excel-checkbox product-checkbox" data-id="${product.id}"></td>
                <td>
                    ${product.image ? 
                        `<img src="${product.image}" alt="商品画像" style="width: 40px; height: 32px; object-fit: cover; border-radius: 4px;">` :
                        `<div style="width: 40px; height: 32px; background: var(--bg-tertiary); border-radius: 4px; display: flex; align-items: center; justify-content: center;"><i class="fas fa-image" style="color: var(--text-muted);"></i></div>`
                    }
                </td>
                <td style="font-size: 0.75rem;">${product.name}</td>
                <td style="font-size: 0.75rem;">${product.sku}</td>
                <td style="font-size: 0.75rem; text-align: center;">${typeOptions[product.type] || product.type}</td>
                <td style="font-size: 0.75rem; text-align: center;">${conditionText}</td>
                <td style="font-size: 0.75rem; text-align: right;">$${product.priceUSD.toFixed(2)}</td>
                <td style="font-size: 0.75rem; text-align: center;">${product.stock}</td>
                <td style="font-size: 0.75rem; text-align: right;">$${product.costUSD.toFixed(2)}</td>
                <td style="font-size: 0.75rem; text-align: right; font-weight: 600; color: var(--color-success);">$${profit}</td>
                <td style="font-size: 0.75rem; text-align: center;">
                    <span style="padding: 1px 3px; background: #0064d2; color: white; border-radius: 2px; font-size: 0.6rem;">E</span>
                </td>
                <td style="font-size: 0.75rem;">${product.category}</td>
                <td>
                    <div style="display: flex; gap: 2px;">
                        <button class="excel-btn excel-btn--small" onclick="showProductDetail(${product.id})" title="詳細">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }
    
    // ========================================
    // フィルター機能
    // ========================================
    function applyFilters() {
        console.log('🎯 フィルター適用開始');
        
        const filterType = document.getElementById('filter-type')?.value || '';
        const filterChannel = document.getElementById('filter-channel')?.value || '';
        const filterStatus = document.getElementById('filter-stock-status')?.value || '';
        const filterPrice = document.getElementById('filter-price-range')?.value || '';
        const searchQuery = document.getElementById('search-input')?.value || '';
        
        State.filteredProducts = State.allProducts.filter(product => {
            // 種類フィルター
            if (filterType && product.type !== filterType) {
                return false;
            }
            
            // チャネルフィルター
            if (filterChannel && !product.channels.includes(filterChannel)) {
                return false;
            }
            
            // 在庫状況フィルター
            if (filterStatus) {
                if (filterStatus === 'sufficient' && product.stock < 10) return false;
                if (filterStatus === 'low' && (product.stock >= 10 || product.stock <= 0)) return false;
                if (filterStatus === 'out' && product.stock > 0) return false;
            }
            
            // 価格範囲フィルター
            if (filterPrice) {
                const price = product.priceUSD;
                switch (filterPrice) {
                    case '0-25': if (price < 0 || price > 25) return false; break;
                    case '25-50': if (price < 25 || price > 50) return false; break;
                    case '50-100': if (price < 50 || price > 100) return false; break;
                    case '100+': if (price < 100) return false; break;
                }
            }
            
            // 検索クエリ
            if (searchQuery) {
                const query = searchQuery.toLowerCase();
                const searchFields = [
                    product.name,
                    product.sku,
                    product.category
                ].join(' ').toLowerCase();
                
                if (!searchFields.includes(query)) {
                    return false;
                }
            }
            
            return true;
        });
        
        updateProductDisplay();
        updateFilteredStatistics();
        
        console.log(`✅ フィルター適用完了: ${State.filteredProducts.length}/${State.allProducts.length}件表示`);
    }
    
    function resetFilters() {
        console.log('🔄 フィルターリセット');
        
        // フィルター選択をリセット
        const filterSelects = document.querySelectorAll('.inventory__filter-select');
        filterSelects.forEach(select => select.value = '');
        
        // 検索入力をリセット
        const searchInput = document.getElementById('search-input');
        if (searchInput) searchInput.value = '';
        
        // 全商品を表示
        State.filteredProducts = [...State.allProducts];
        updateProductDisplay();
        updateFilteredStatistics();
        
        console.log('✅ フィルターリセット完了');
    }
    
    function handleSearch(event) {
        const query = event.target.value;
        console.log('🔍 検索:', query);
        applyFilters(); // フィルター適用を呼び出し
    }
    
    // ========================================
    // 統計情報更新
    // ========================================
    function updateStatisticsDisplay(stats) {
        const elements = {
            'total-products': stats.total,
            'stock-products': stats.stock,
            'dropship-products': stats.dropship,
            'set-products': stats.set || 0,
            'hybrid-products': stats.hybrid || 0,
            'total-value': `$${(stats.total_value_usd / 1000).toFixed(1)}K`
        };
        
        Object.entries(elements).forEach(([id, value]) => {
            const element = document.getElementById(id);
            if (element) {
                element.textContent = value.toLocaleString ? value.toLocaleString() : value;
            }
        });
        
        console.log('📊 統計情報更新完了:', stats);
    }
    
    function updateFilteredStatistics() {
        const filteredStats = {
            total: State.filteredProducts.length,
            stock: State.filteredProducts.filter(p => p.type === 'stock').length,
            dropship: State.filteredProducts.filter(p => p.type === 'dropship').length,
            hybrid: State.filteredProducts.filter(p => p.type === 'hybrid').length,
            set: State.filteredProducts.filter(p => p.type === 'set').length,
            total_value_usd: State.filteredProducts.reduce((sum, p) => sum + p.priceUSD, 0)
        };
        
        updateStatisticsDisplay(filteredStats);
    }
    
    // ========================================
    // UI状態制御
    // ========================================
    function showLoadingIndicator(show) {
        const container = document.getElementById('card-view');
        if (!container) return;
        
        if (show) {
            container.innerHTML = `
                <div style="grid-column: 1 / -1; text-align: center; padding: 3rem; color: var(--text-secondary);">
                    <i class="fas fa-spinner fa-spin" style="font-size: 2.5rem; margin-bottom: 1rem;"></i>
                    <p style="font-size: 1.1rem;">PostgreSQLからデータを読み込み中...</p>
                </div>
            `;
        }
    }
    
    // ========================================
    // 通知システム
    // ========================================
    function showSuccessMessage(message) {
        showNotification(message, 'success', 'fas fa-check-circle');
    }
    
    function showErrorMessage(message) {
        showNotification(message, 'error', 'fas fa-exclamation-triangle');
    }
    
    function showNotification(message, type, icon) {
        const colors = {
            success: 'var(--color-success)',
            error: 'var(--color-danger)',
            warning: 'var(--color-warning)',
            info: 'var(--color-info)'
        };
        
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${colors[type] || colors.info};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            box-shadow: var(--shadow-lg);
            z-index: 10000;
            font-size: 0.9rem;
            max-width: 400px;
            display: flex;
            align-items: center;
            gap: 8px;
        `;
        
        notification.innerHTML = `
            <i class="${icon}"></i>
            <div>${message}</div>
        `;
        
        document.body.appendChild(notification);
        
        // 自動削除
        setTimeout(() => {
            if (notification.parentNode) {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100px)';
                notification.style.transition = 'all 0.3s ease';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }
        }, type === 'error' ? 8000 : 5000);
    }
    
    // ========================================
    // ユーティリティ関数
    // ========================================
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    function updateExchangeRateDisplay() {
        const element = document.getElementById('exchange-rate');
        if (element) {
            element.textContent = `¥${State.exchangeRate}`;
        }
    }
    
    // ========================================
    // イベントハンドラー（簡易版）
    // ========================================
    function handleCreateSet() {
        if (State.selectedProducts.length >= 2) {
            alert(`${State.selectedProducts.length}点の商品でセット品を作成します。`);
        } else {
            alert('新規セット品作成画面を開きます。');
        }
    }
    
    function handleAddProduct() {
        alert('新規商品登録画面を開きます。');
    }
    
    // ========================================
    // グローバル関数（互換性）
    // ========================================
    window.switchView = switchView;
    window.applyFilters = applyFilters;
    window.resetFilters = resetFilters;
    window.showProductDetail = function(id) {
        console.log('商品詳細表示:', id);
        alert(`商品ID ${id} の詳細を表示します。`);
    };
    window.exportData = function() {
        console.log('データエクスポート');
        alert('エクスポート機能は実装中です。');
    };
    
    console.log('📜 棚卸しシステム（純粋Webツール版）JavaScript読み込み完了');
    
})();