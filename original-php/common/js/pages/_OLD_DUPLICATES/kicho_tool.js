
// CAIDS processing_capacity_monitoring Hook
// CAIDS processing_capacity_monitoring Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ processing_capacity_monitoring Hook loaded');

// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * üéØ kicho.js - Ë®òÂ∏≥Ëá™ÂãïÂåñ„ÉÑ„Éº„É´Â∞ÇÁî®JavaScript
 * common/js/kicho.js
 * 
 * ‚úÖ NAGANO-3Áµ±Âêà„Ç∑„Çπ„ÉÜ„É†ÂØæÂøú
 * ‚úÖ PHPÂåñÂÆåÂÖ®ÂØæÂøú
 * ‚úÖ ÂÖ®„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„ÉàÂØæÂøú
 * ‚úÖ „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Âº∑Âåñ
 * 
 * @package NAGANO3\Kicho\JavaScript
 * @version 1.0.0
 * @author NAGANO-3 Development Team
 */

"use strict";

console.log("üéØ NAGANO-3 kicho.js Ë™≠„ÅøËæº„ÅøÈñãÂßã");

// Âü∫Êú¨ÂêçÂâçÁ©∫ÈñìÁ¢∫‰øù
window.NAGANO3 = window.NAGANO3 || {};

// Ë®òÂ∏≥„Ç∑„Çπ„ÉÜ„É†„ÇØ„É©„ÇπÂÆöÁæ©
class KichoSystem {
    constructor() {
        this.config = {
            ajaxUrl: window.location.href,
            version: '1.0.0',
            debug: true,
            timeouts: {
                default: 30000,
                upload: 60000,
                learning: 120000
            }
        };
        
        this.state = {
            initialized: false,
            isProcessing: false,
            selectedDataCount: 0,
            approvalCount: 0,
            mfSendCount: 0,
            autoRefreshEnabled: false,
            autoRefreshInterval: null
        };
        
        this.elements = {};
        this.data = {
            importedItems: [],
            savedRules: [],
            approvedTransactions: [],
            aiSessions: []
        };
        
        console.log('üéØ Ë®òÂ∏≥„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÈñãÂßã');
    }
    
    // =====================================
    // ÂàùÊúüÂåñ„ÉªÂü∫Êú¨Ê©üËÉΩ
    // =====================================
    
    /**
     * „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ
     */
    async init() {
        try {
            // ‰æùÂ≠òÈñ¢‰øÇ„ÉÅ„Çß„ÉÉ„ÇØ
            if (!window.NAGANO3.ajax) {
                throw new Error('NAGANO3.ajax „ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì');
            }
            
            this.cacheElements();
            this.setupEventListeners();
            await this.loadInitialData();
            this.updateLastUpdateTime();
            this.state.initialized = true;
            
            console.log('‚úÖ Ë®òÂ∏≥„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü');
            this.showNotification('success', 'Ë®òÂ∏≥„Ç∑„Çπ„ÉÜ„É†„ÅåÊ≠£Â∏∏„Å´ÂàùÊúüÂåñ„Åï„Çå„Åæ„Åó„Åü');
        } catch (error) {
            console.error('‚ùå Ë®òÂ∏≥„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
            this.showNotification('error', `ÂàùÊúüÂåñ„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * DOMË¶ÅÁ¥†„Ç≠„É£„ÉÉ„Ç∑„É•
     */
    cacheElements() {
        // Áµ±Ë®àË¶ÅÁ¥†
        this.elements.pendingCount = document.getElementById('pending-count');
        this.elements.confirmedRules = document.getElementById('confirmed-rules');
        this.elements.automationRate = document.getElementById('automation-rate');
        this.elements.errorCount = document.getElementById('error-count');
        this.elements.monthlyCount = document.getElementById('monthly-count');
        
        // „Éá„Éº„Çø„Ç´„Ç¶„É≥„ÉàË¶ÅÁ¥†
        this.elements.mfDataCount = document.getElementById('mfDataCount');
        this.elements.csvDataCount = document.getElementById('csvDataCount');
        this.elements.textDataCount = document.getElementById('textDataCount');
        this.elements.selectedDataCount = document.getElementById('selectedDataCount');
        
        // AIÂ≠¶ÁøíÈñ¢ÈÄ£
        this.elements.learningDataCount = document.getElementById('learningDataCount');
        this.elements.estimatedRules = document.getElementById('estimatedRules');
        this.elements.estimatedTime = document.getElementById('estimatedTime');
        
        // ÊâøË™çÈñ¢ÈÄ£
        this.elements.approvalCount = document.getElementById('approvalCount');
        this.elements.mfSendCount = document.getElementById('mfSendCount');
        this.elements.errorPrediction = document.getElementById('errorPrediction');
        
        // ÊúÄÁµÇÊõ¥Êñ∞ÊôÇÂàª
        this.elements.lastUpdateTime = document.getElementById('lastUpdateTime');
        
        // „Éï„Ç°„Ç§„É´ÂÖ•Âäõ
        this.elements.csvFileInput = document.getElementById('csvFileInput');
        this.elements.rulesCSVInput = document.getElementById('rulesCSVInput');
        this.elements.approvalCSVInput = document.getElementById('approvalCSVInput');
        
        console.log('üì¶ DOMË¶ÅÁ¥†„Ç≠„É£„ÉÉ„Ç∑„É•ÂÆå‰∫Ü');
    }
    
    /**
     * „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆöÔºàÂÖ®„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„ÉàÂØæÂøúÔºâ
     */
    setupEventListeners() {
        // data-actionÂ±ûÊÄß„ÇíÊåÅ„Å§ÂÖ®Ë¶ÅÁ¥†„ÅÆ‰∏ÄÊã¨„Ç§„Éô„É≥„ÉàË®≠ÂÆö
        document.addEventListener('click', (event) => {
            const target = event.target.closest('[data-action]');
            if (!target) return;
            
            event.preventDefault();
            const action = target.getAttribute('data-action');
            this.handleAction(action, target, event);
        });
        
        // „Éï„Ç©„Éº„É†ÈÄÅ‰ø°„Ç§„Éô„É≥„Éà
        document.addEventListener('submit', (event) => {
            const form = event.target.closest('[data-form]');
            if (!form) return;
            
            event.preventDefault();
            const formType = form.getAttribute('data-form');
            this.handleFormSubmit(formType, form, event);
        });
        
        // „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„ÇπÂ§âÊõ¥„Ç§„Éô„É≥„Éà
        document.addEventListener('change', (event) => {
            if (event.target.matches('[data-checkbox="data-item"]')) {
                this.updateSelectedCount();
            }
        });
        
        // „Éï„Ç°„Ç§„É´ÈÅ∏Êäû„Ç§„Éô„É≥„Éà
        if (this.elements.csvFileInput) {
            this.elements.csvFileInput.addEventListener('change', (event) => {
                this.handleCSVUpload(event);
            });
        }
        
        if (this.elements.rulesCSVInput) {
            this.elements.rulesCSVInput.addEventListener('change', (event) => {
                this.handleRulesCSVUpload(event);
            });
        }
        
        if (this.elements.approvalCSVInput) {
            this.elements.approvalCSVInput.addEventListener('change', (event) => {
                this.handleApprovalCSVUpload(event);
            });
        }
        
        // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Ç§„Éô„É≥„Éà
        this.setupDragAndDropListeners();
        
        console.log('üéØ „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆöÂÆå‰∫Ü');
    }
    
    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥Áµ±‰∏Ä„Éè„É≥„Éâ„É©„Éº
     */
    async handleAction(action, element, event) {
        if (this.state.isProcessing) {
            this.showNotification('warning', 'Âá¶ÁêÜ‰∏≠„Åß„Åô„ÄÇ„Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ');
            return;
        }
        
        try {
            console.log(`üéØ „Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°å: ${action}`);
            
            switch (action) {
                // „Éò„ÉÉ„ÉÄ„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥
                case 'refresh-all':
                    await this.refreshAllData();
                    break;
                case 'toggle-auto-refresh':
                    this.toggleAutoRefresh();
                    break;
                
                // „Éá„Éº„ÇøÂèñ„ÇäËæº„ÅøÈñ¢ÈÄ£
                case 'show-import-history':
                    await this.showImportHistory();
                    break;
                case 'execute-mf-import':
                    await this.executeMFImport();
                    break;
                case 'show-mf-history':
                    await this.showMFHistory();
                    break;
                case 'execute-mf-recovery':
                    await this.executeMFRecovery();
                    break;
                case 'csv-upload':
                    this.triggerCSVUpload();
                    break;
                case 'process-csv-upload':
                    await this.processCSVUpload();
                    break;
                case 'show-duplicate-history':
                    await this.showDuplicateHistory();
                    break;
                case 'add-text-to-learning':
                    await this.addTextToLearningData();
                    break;
                case 'show-ai-learning-history':
                    await this.showAILearningHistory();
                    break;
                case 'show-optimization-suggestions':
                    await this.showOptimizationSuggestions();
                    break;
                
                // „Éá„Éº„ÇøÊìç‰Ωú
                case 'select-all-imported-data':
                    this.selectAllImportedData();
                    break;
                case 'select-by-date-range':
                    await this.selectByDateRange();
                    break;
                case 'select-by-source':
                    this.selectBySource(element.getAttribute('data-source'));
                    break;
                case 'delete-selected-data':
                    await this.deleteSelectedData();
                    break;
                case 'delete-data-item':
                    await this.deleteDataItem(element.getAttribute('data-item-id'));
                    break;
                
                // AIÂ≠¶Áøí
                case 'execute-integrated-ai-learning':
                    await this.executeIntegratedAILearning();
                    break;
                
                // „É´„Éº„É´ÁÆ°ÁêÜ
                case 'download-rules-csv':
                case 'download-all-rules-csv':
                    await this.downloadRulesCSV();
                    break;
                case 'create-new-rule':
                    await this.createNewRule();
                    break;
                case 'rules-csv-upload':
                    this.triggerRulesCSVUpload();
                    break;
                case 'save-uploaded-rules-as-database':
                    await this.saveUploadedRulesAsDatabase();
                    break;
                
                // ‰øùÂ≠òÊ∏à„Åø„É´„Éº„É´Êìç‰Ωú
                case 'edit-saved-rule':
                    await this.editSavedRule(element.getAttribute('data-rule-id'));
                    break;
                case 'delete-saved-rule':
                    await this.deleteSavedRule(element.getAttribute('data-rule-id'));
                    break;
                
                // ÊâøË™çÈñ¢ÈÄ£
                case 'download-pending-csv':
                case 'download-pending-transactions-csv':
                    await this.downloadPendingCSV();
                    break;
                case 'approval-csv-upload':
                    this.triggerApprovalCSVUpload();
                    break;
                case 'bulk-approve-transactions':
                    await this.bulkApproveTransactions();
                    break;
                
                // ÊâøË™çÊ∏à„ÅøÂèñÂºïÊìç‰Ωú
                case 'view-transaction-details':
                    await this.viewTransactionDetails(element.getAttribute('data-transaction-id'));
                    break;
                case 'delete-approved-transaction':
                    await this.deleteApprovedTransaction(element.getAttribute('data-transaction-id'));
                    break;
                
                // AIÂ±•Ê≠¥
                case 'refresh-ai-history':
                    await this.refreshAIHistory();
                    break;
                case 'load-more-sessions':
                    await this.loadMoreSessions();
                    break;
                
                // „Ç®„ÇØ„Çπ„Éù„Éº„Éà„ÉªÈÄÅ‰ø°
                case 'execute-full-backup':
                    await this.executeFullBackup();
                    break;
                case 'export-to-mf':
                    await this.exportToMF();
                    break;
                case 'create-manual-backup':
                    await this.createManualBackup();
                    break;
                case 'generate-advanced-report':
                    await this.generateAdvancedReport();
                    break;
                
                default:
                    console.warn(`‚ö†Ô∏è Êú™ÂÆöÁæ©„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥: ${action}`);
                    this.showNotification('warning', `Êú™ÂÆöÁæ©„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥: ${action}`);
            }
        } catch (error) {
            console.error(`‚ùå „Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°å„Ç®„É©„Éº [${action}]:`, error);
            this.showNotification('error', `Âá¶ÁêÜ„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * „Éï„Ç©„Éº„É†ÈÄÅ‰ø°„Éè„É≥„Éâ„É©„Éº
     */
    async handleFormSubmit(formType, form, event) {
        try {
            console.log(`üìù „Éï„Ç©„Éº„É†ÈÄÅ‰ø°: ${formType}`);
            
            const formData = new FormData(form);
            
            switch (formType) {
                case 'mf-import':
                    await this.submitMFImportForm(formData);
                    break;
                case 'csv-upload':
                    await this.submitCSVUploadForm(formData);
                    break;
                case 'ai-text-learning':
                    await this.submitAITextLearningForm(formData);
                    break;
                case 'report-generation':
                    await this.submitReportGenerationForm(formData);
                    break;
                default:
                    console.warn(`‚ö†Ô∏è Êú™ÂÆöÁæ©„ÅÆ„Éï„Ç©„Éº„É†: ${formType}`);
            }
        } catch (error) {
            console.error(`‚ùå „Éï„Ç©„Éº„É†ÈÄÅ‰ø°„Ç®„É©„Éº [${formType}]:`, error);
            this.showNotification('error', `„Éï„Ç©„Éº„É†ÈÄÅ‰ø°„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    // =====================================
    // „Éá„Éº„ÇøÁÆ°ÁêÜ„ÉªÊõ¥Êñ∞Ê©üËÉΩ
    // =====================================
    
    /**
     * ÂàùÊúü„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
     */
    async loadInitialData() {
        try {
            const response = await this.ajaxRequest('POST', {
                action: 'load_initial_data'
            });
            
            if (response.success) {
                this.updateStatistics(response.data.statistics);
                this.updateDataCounts(response.data.data_counts);
                this.data.importedItems = response.data.imported_items || [];
                this.data.savedRules = response.data.saved_rules || [];
                this.data.approvedTransactions = response.data.approved_transactions || [];
                this.data.aiSessions = response.data.ai_sessions || [];
            }
        } catch (error) {
            console.error('‚ùå ÂàùÊúü„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        }
    }
    
    /**
     * ÂÖ®„Éá„Éº„ÇøÊõ¥Êñ∞
     */
    async refreshAllData() {
        this.state.isProcessing = true;
        this.showNotification('info', 'ÂÖ®„Éá„Éº„ÇøÊõ¥Êñ∞„ÇíÈñãÂßã„Åó„Å¶„ÅÑ„Åæ„Åô...');
        
        try {
            const response = await this.ajaxRequest('POST', {
                action: 'refresh_all_data'
            });
            
            if (response.success) {
                await this.loadInitialData();
                this.updateLastUpdateTime();
                this.showNotification('success', 'ÂÖ®„Éá„Éº„Çø„ÅÆÊõ¥Êñ∞„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');
            } else {
                throw new Error(response.message || '„Éá„Éº„ÇøÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå „Éá„Éº„ÇøÊõ¥Êñ∞„Ç®„É©„Éº:', error);
            this.showNotification('error', `„Éá„Éº„ÇøÊõ¥Êñ∞„Ç®„É©„Éº: ${error.message}`);
        } finally {
            this.state.isProcessing = false;
        }
    }
    
    /**
     * Ëá™ÂãïÊõ¥Êñ∞Âàá„ÇäÊõø„Åà
     */
    toggleAutoRefresh() {
        const btn = document.querySelector('[data-action="toggle-auto-refresh"]');
        if (!btn) return;
        
        if (this.state.autoRefreshEnabled) {
            // Ëá™ÂãïÊõ¥Êñ∞ÂÅúÊ≠¢
            if (this.state.autoRefreshInterval) {
                clearInterval(this.state.autoRefreshInterval);
                this.state.autoRefreshInterval = null;
            }
            this.state.autoRefreshEnabled = false;
            btn.innerHTML = '<i class="fas fa-play"></i> Ëá™ÂãïÊõ¥Êñ∞ÈñãÂßã';
            btn.className = 'kicho__btn kicho__btn--success';
            this.showNotification('info', 'Ëá™ÂãïÊõ¥Êñ∞„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü');
        } else {
            // Ëá™ÂãïÊõ¥Êñ∞ÈñãÂßã
            this.state.autoRefreshInterval = setInterval(() => {
                this.refreshAllData();
            }, 60000); // 1ÂàÜÈñìÈöî
            this.state.autoRefreshEnabled = true;
            btn.innerHTML = '<i class="fas fa-stop"></i> Ëá™ÂãïÊõ¥Êñ∞ÂÅúÊ≠¢';
            btn.className = 'kicho__btn kicho__btn--warning';
            this.showNotification('success', 'Ëá™ÂãïÊõ¥Êñ∞„ÇíÈñãÂßã„Åó„Åæ„Åó„ÅüÔºà1ÂàÜÈñìÈöîÔºâ');
        }
    }
    
    /**
     * ÊúÄÁµÇÊõ¥Êñ∞ÊôÇÂàªÊõ¥Êñ∞
     */
    updateLastUpdateTime() {
        if (!this.elements.lastUpdateTime) return;
        
        const now = new Date();
        const timeString = now.getFullYear() + '-' + 
            String(now.getMonth() + 1).padStart(2, '0') + '-' + 
            String(now.getDate()).padStart(2, '0') + ' ' + 
            String(now.getHours()).padStart(2, '0') + ':' + 
            String(now.getMinutes()).padStart(2, '0');
        
        this.elements.lastUpdateTime.textContent = timeString;
    }
    
    /**
     * Áµ±Ë®à„Éá„Éº„ÇøÊõ¥Êñ∞
     */
    updateStatistics(stats) {
        if (!stats) return;
        
        this.safeSetText(this.elements.pendingCount, `${stats.pending_count || 0}‰ª∂`);
        this.safeSetText(this.elements.confirmedRules, `${stats.confirmed_rules || 0}‰ª∂`);
        this.safeSetText(this.elements.automationRate, `${stats.automation_rate || 0}%`);
        this.safeSetText(this.elements.errorCount, `${stats.error_count || 0}‰ª∂`);
        this.safeSetText(this.elements.monthlyCount, `${stats.monthly_count || 0}‰ª∂`);
    }
    
    /**
     * „Éá„Éº„Çø„Ç´„Ç¶„É≥„ÉàÊõ¥Êñ∞
     */
    updateDataCounts(counts) {
        if (!counts) return;
        
        this.safeSetText(this.elements.mfDataCount, counts.mf_data || 0);
        this.safeSetText(this.elements.csvDataCount, counts.csv_data || 0);
        this.safeSetText(this.elements.textDataCount, counts.text_data || 0);
    }
    
    // =====================================
    // MF„ÇØ„É©„Ç¶„ÉâÈÄ£Êê∫Ê©üËÉΩ
    // =====================================
    
    /**
     * MF„Ç§„É≥„Éù„Éº„ÉàÂÆüË°å
     */
    async executeMFImport() {
        this.state.isProcessing = true;
        
        try {
            const startDate = document.getElementById('mfStartDate')?.value;
            const endDate = document.getElementById('mfEndDate')?.value;
            const purpose = document.getElementById('mfPurpose')?.value;
            
            if (!startDate || !endDate) {
                throw new Error('ÂèñÂæóÊúüÈñì„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            }
            
            this.showNotification('info', `MF„ÇØ„É©„Ç¶„Éâ„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó„Åó„Å¶„ÅÑ„Åæ„Åô... (${startDate}„Äú${endDate})`);
            
            const response = await this.ajaxRequest('POST', {
                action: 'execute_mf_import',
                start_date: startDate,
                end_date: endDate,
                purpose: purpose
            }, this.config.timeouts.upload);
            
            if (response.success) {
                this.showNotification('success', `MF„Éá„Éº„Çø„ÅÆÂèñÂæó„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü (${purpose})`);
                await this.loadInitialData();
            } else {
                throw new Error(response.message || 'MF„Éá„Éº„ÇøÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå MF„Ç§„É≥„Éù„Éº„Éà„Ç®„É©„Éº:', error);
            this.showNotification('error', `MF„Éá„Éº„ÇøÂèñÂæó„Ç®„É©„Éº: ${error.message}`);
        } finally {
            this.state.isProcessing = false;
        }
    }
    
    /**
     * MF„Ç§„É≥„Éù„Éº„Éà„Éï„Ç©„Éº„É†ÈÄÅ‰ø°
     */
    async submitMFImportForm(formData) {
        // „Éï„Ç©„Éº„É†Áî®„ÅÆÂá¶ÁêÜ„ÅØ executeMFImport „Å®Âêå„Åò„É≠„Ç∏„ÉÉ„ÇØ„Çí‰ΩøÁî®
        await this.executeMFImport();
    }
    
    /**
     * MFÂ±•Ê≠¥Ë°®Á§∫
     */
    async showMFHistory() {
        try {
            const response = await this.ajaxRequest('POST', {
                action: 'get_mf_history'
            });
            
            if (response.success) {
                this.showModal('MFÈÄ£Êê∫Â±•Ê≠¥', this.renderMFHistory(response.data));
            } else {
                throw new Error(response.message || 'MFÂ±•Ê≠¥ÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå MFÂ±•Ê≠¥Ë°®Á§∫„Ç®„É©„Éº:', error);
            this.showNotification('error', `MFÂ±•Ê≠¥Ë°®Á§∫„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * MFËá™ÂãïÂæ©ÊóßÂÆüË°å
     */
    async executeMFRecovery() {
        if (!confirm('MFËá™ÂãïÂæ©Êóß„ÇíÂÆüË°å„Åó„Åæ„Åô„ÅãÔºü')) return;
        
        this.state.isProcessing = true;
        
        try {
            this.showNotification('info', 'MFËá™ÂãïÂæ©Êóß„ÇíÂÆüË°å„Åó„Å¶„ÅÑ„Åæ„Åô...');
            
            const response = await this.ajaxRequest('POST', {
                action: 'execute_mf_recovery'
            }, this.config.timeouts.default);
            
            if (response.success) {
                this.showNotification('success', 'MFËá™ÂãïÂæ©Êóß„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');
                await this.loadInitialData();
            } else {
                throw new Error(response.message || 'MFËá™ÂãïÂæ©Êóß„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå MFËá™ÂãïÂæ©Êóß„Ç®„É©„Éº:', error);
            this.showNotification('error', `MFËá™ÂãïÂæ©Êóß„Ç®„É©„Éº: ${error.message}`);
        } finally {
            this.state.isProcessing = false;
        }
    }
    
    // =====================================
    // CSV„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÊ©üËÉΩ
    // =====================================
    
    /**
     * CSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éà„É™„Ç¨„Éº
     */
    triggerCSVUpload() {
        if (this.elements.csvFileInput) {
            this.elements.csvFileInput.click();
        }
    }
    
    /**
     * CSV„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ
     */
    async handleCSVUpload(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        if (!file.name.toLowerCase().endsWith('.csv')) {
            this.showNotification('error', 'CSV„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }
        
        this.showNotification('info', `CSV„Éï„Ç°„Ç§„É´„Äå${file.name}„Äç„ÅÆÂá¶ÁêÜ„ÇíÈñãÂßã„Åó„Å¶„ÅÑ„Åæ„Åô...`);
        
        try {
            const formData = new FormData();
            formData.append('csv_file', file);
            formData.append('action', 'handle_csv_upload');
            
            const response = await this.ajaxRequest('POST', formData, this.config.timeouts.upload);
            
            if (response.success) {
                this.showNotification('success', `CSV„Éï„Ç°„Ç§„É´„Äå${file.name}„Äç„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`);
                await this.loadInitialData();
            } else {
                throw new Error(response.message || 'CSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå CSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
            this.showNotification('error', `CSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº: ${error.message}`);
        }
        
        // „Éï„Ç°„Ç§„É´ÂÖ•Âäõ„Çí„É™„Çª„ÉÉ„Éà
        event.target.value = '';
    }
    
    /**
     * CSVÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ&„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
     */
    async processCSVUpload() {
        try {
            const strategy = document.getElementById('duplicateStrategy')?.value;
            const resolution = document.getElementById('resolutionStrategy')?.value;
            
            if (!strategy || !resolution) {
                throw new Error('ÈáçË§áÊ§úÂá∫ÊñπÂºè„Å®Ëß£Ê±∫ÊñπÊ≥ï„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            }
            
            this.showNotification('info', `ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å„Åó„Å¶„ÅÑ„Åæ„Åô... (${strategy}, ${resolution})`);
            
            const response = await this.ajaxRequest('POST', {
                action: 'process_csv_duplicate_check',
                duplicate_strategy: strategy,
                resolution_strategy: resolution
            });
            
            if (response.success) {
                this.showNotification('success', 'ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÔºÜ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');
                await this.loadInitialData();
            } else {
                throw new Error(response.message || 'ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå CSVÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
            this.showNotification('error', `ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * CSV„Éï„Ç©„Éº„É†ÈÄÅ‰ø°
     */
    async submitCSVUploadForm(formData) {
        // CSVÈñ¢ÈÄ£„ÅÆ„Éï„Ç©„Éº„É†Âá¶ÁêÜ
        await this.processCSVUpload();
    }
    
    /**
     * ÈáçË§áÂá¶ÁêÜÂ±•Ê≠¥Ë°®Á§∫
     */
    async showDuplicateHistory() {
        try {
            const response = await this.ajaxRequest('POST', {
                action: 'get_duplicate_history'
            });
            
            if (response.success) {
                this.showModal('ÈáçË§áÂá¶ÁêÜÂ±•Ê≠¥', this.renderDuplicateHistory(response.data));
            } else {
                throw new Error(response.message || 'ÈáçË§áÂá¶ÁêÜÂ±•Ê≠¥ÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå ÈáçË§áÂá¶ÁêÜÂ±•Ê≠¥Ë°®Á§∫„Ç®„É©„Éº:', error);
            this.showNotification('error', `ÈáçË§áÂá¶ÁêÜÂ±•Ê≠¥Ë°®Á§∫„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    // =====================================
    // AIÂ≠¶ÁøíÊ©üËÉΩ
    // =====================================
    
    /**
     * AI„ÉÜ„Ç≠„Çπ„ÉàÂ≠¶Áøí„Éá„Éº„ÇøËøΩÂä†
     */
    async addTextToLearningData() {
        try {
            const textInput = document.getElementById('aiTextInput');
            const learningMode = document.getElementById('learningMode')?.value;
            const ruleCategory = document.getElementById('ruleCategory')?.value;
            
            if (!textInput || !textInput.value.trim()) {
                throw new Error('Â≠¶Áøí„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            }
            
            this.showNotification('info', `AIÂ≠¶Áøí„Éá„Éº„Çø„Å´ËøΩÂä†„Åó„Å¶„ÅÑ„Åæ„Åô... (${learningMode}, ${ruleCategory})`);
            
            const response = await this.ajaxRequest('POST', {
                action: 'add_text_to_learning',
                learning_text: textInput.value.trim(),
                learning_mode: learningMode,
                rule_category: ruleCategory
            });
            
            if (response.success) {
                this.showNotification('success', 'AIÂ≠¶Áøí„Éá„Éº„Çø„Å´ËøΩÂä†„Åï„Çå„Åæ„Åó„Åü');
                textInput.value = '';
                await this.loadInitialData();
            } else {
                throw new Error(response.message || 'AIÂ≠¶Áøí„Éá„Éº„ÇøËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå AIÂ≠¶Áøí„Éá„Éº„ÇøËøΩÂä†„Ç®„É©„Éº:', error);
            this.showNotification('error', `AIÂ≠¶Áøí„Éá„Éº„ÇøËøΩÂä†„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * AI„ÉÜ„Ç≠„Çπ„ÉàÂ≠¶Áøí„Éï„Ç©„Éº„É†ÈÄÅ‰ø°
     */
    async submitAITextLearningForm(formData) {
        await this.addTextToLearningData();
    }
    
    /**
     * Áµ±ÂêàAIÂ≠¶ÁøíÂÆüË°å
     */
    async executeIntegratedAILearning() {
        try {
            const mode = document.getElementById('integratedLearningMode')?.value;
            const selectedCount = this.state.selectedDataCount;
            
            if (selectedCount === 0) {
                throw new Error('Â≠¶Áøí„Åô„Çã„Éá„Éº„Çø„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            }
            
            if (!confirm(`${selectedCount}‰ª∂„ÅÆ„Éá„Éº„Çø„ÅßAIÂ≠¶Áøí„ÇíÂÆüË°å„Åó„Åæ„Åô„ÅãÔºü\n\nÊé®ÂÆöÂá¶ÁêÜÊôÇÈñì: Á¥Ñ${Math.ceil(selectedCount * 0.5)}ÂàÜ`)) {
                return;
            }
            
            this.state.isProcessing = true;
            this.showNotification('info', `Áµ±ÂêàAIÂ≠¶Áøí„ÇíÂÆüË°å„Åó„Å¶„ÅÑ„Åæ„Åô... (${mode}, ${selectedCount}‰ª∂„ÅÆ„Éá„Éº„Çø)`);
            
            const selectedItems = this.getSelectedDataItems();
            
            const response = await this.ajaxRequest('POST', {
                action: 'execute_integrated_ai_learning',
                learning_mode: mode,
                selected_items: selectedItems
            }, this.config.timeouts.learning);
            
            if (response.success) {
                this.showNotification('success', `Áµ±ÂêàAIÂ≠¶Áøí„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü (${selectedCount}‰ª∂„ÅÆ„Éá„Éº„Çø„Åã„ÇâÊñ∞„Åó„ÅÑ„É´„Éº„É´„ÇíÁîüÊàê)`);
                await this.loadInitialData();
                // ÈÅ∏ÊäûËß£Èô§
                this.clearAllSelections();
            } else {
                throw new Error(response.message || 'Áµ±ÂêàAIÂ≠¶Áøí„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå Áµ±ÂêàAIÂ≠¶Áøí„Ç®„É©„Éº:', error);
            this.showNotification('error', `Áµ±ÂêàAIÂ≠¶Áøí„Ç®„É©„Éº: ${error.message}`);
        } finally {
            this.state.isProcessing = false;
        }
    }
    
    /**
     * AIÂ≠¶ÁøíÂ±•Ê≠¥Ë°®Á§∫
     */
    async showAILearningHistory() {
        try {
            const response = await this.ajaxRequest('POST', {
                action: 'get_ai_learning_history'
            });
            
            if (response.success) {
                this.showModal('AIÂ≠¶ÁøíÂ±•Ê≠¥„ÉªÂàÜÊûê', this.renderAILearningHistory(response.data));
            } else {
                throw new Error(response.message || 'AIÂ≠¶ÁøíÂ±•Ê≠¥ÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå AIÂ≠¶ÁøíÂ±•Ê≠¥Ë°®Á§∫„Ç®„É©„Éº:', error);
            this.showNotification('error', `AIÂ≠¶ÁøíÂ±•Ê≠¥Ë°®Á§∫„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ÊúÄÈÅ©ÂåñÊèêÊ°àË°®Á§∫
     */
    async showOptimizationSuggestions() {
        try {
            const response = await this.ajaxRequest('POST', {
                action: 'get_optimization_suggestions'
            });
            
            if (response.success) {
                this.showModal('ÊúÄÈÅ©ÂåñÊèêÊ°à', this.renderOptimizationSuggestions(response.data));
            } else {
                throw new Error(response.message || 'ÊúÄÈÅ©ÂåñÊèêÊ°àÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå ÊúÄÈÅ©ÂåñÊèêÊ°àË°®Á§∫„Ç®„É©„Éº:', error);
            this.showNotification('error', `ÊúÄÈÅ©ÂåñÊèêÊ°àË°®Á§∫„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    // =====================================
    // „Éá„Éº„ÇøÈÅ∏Êäû„ÉªÊìç‰ΩúÊ©üËÉΩ
    // =====================================
    
    /**
     * ÈÅ∏Êäû„Éá„Éº„ÇøÊï∞Êõ¥Êñ∞
     */
    updateSelectedCount() {
        try {
            const checkboxes = document.querySelectorAll('[data-checkbox="data-item"]:checked');
            const count = checkboxes.length;
            this.state.selectedDataCount = count;
            
            this.safeSetText(this.elements.selectedDataCount, count);
            this.safeSetText(this.elements.learningDataCount, `${count}‰ª∂ÈÅ∏Êäû‰∏≠`);
            
            // Êé®ÂÆöÂÄ§„ÅÆÊõ¥Êñ∞
            const estimatedRules = count === 0 ? '0-0‰ª∂' : `${Math.ceil(count * 0.3)}-${Math.ceil(count * 0.7)}‰ª∂`;
            const estimatedTime = count === 0 ? 'Êú™ÈÅ∏Êäû' : `Á¥Ñ${Math.ceil(count * 0.5)}ÂàÜ`;
            
            this.safeSetText(this.elements.estimatedRules, estimatedRules);
            this.safeSetText(this.elements.estimatedTime, estimatedTime);
        } catch (error) {
            console.error('‚ùå ÈÅ∏Êäû„Éá„Éº„ÇøÊï∞Êõ¥Êñ∞„Ç®„É©„Éº:', error);
        }
    }
    
    /**
     * ÂÖ®„Éá„Éº„ÇøÈÅ∏Êäû
     */
    selectAllImportedData() {
        try {
            const checkboxes = document.querySelectorAll('[data-checkbox="data-item"]');
            checkboxes.forEach(checkbox => {
                checkbox.checked = true;
            });
            this.updateSelectedCount();
            this.showNotification('success', 'ÂÖ®„Å¶„ÅÆ„Éá„Éº„Çø„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü');
        } catch (error) {
            console.error('‚ùå ÂÖ®„Éá„Éº„ÇøÈÅ∏Êäû„Ç®„É©„Éº:', error);
            this.showNotification('error', 'ÂÖ®ÈÅ∏Êäû„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
        }
    }
    
    /**
     * ÊúüÈñìÈÅ∏Êäû
     */
    async selectByDateRange() {
        try {
            const startDate = prompt('ÈñãÂßãÊó•„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ (YYYY-MM-DD):');
            const endDate = prompt('ÁµÇ‰∫ÜÊó•„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ (YYYY-MM-DD):');
            
            if (!startDate || !endDate) {
                this.showNotification('warning', 'ÊúüÈñì„ÅåÂÖ•Âäõ„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü');
                return;
            }
            
            // ÊúüÈñì„Å´Ë©≤ÂΩì„Åô„Çã„Éá„Éº„Çø„Ç¢„Ç§„ÉÜ„É†„ÇíÈÅ∏Êäû
            const dataItems = document.querySelectorAll('.kicho__data-item');
            let selectedCount = 0;
            
            dataItems.forEach(item => {
                const checkbox = item.querySelector('[data-checkbox="data-item"]');
                const detailsText = item.querySelector('.kicho__data-details')?.textContent || '';
                
                // Á∞°ÊòìÁöÑ„Å™Êó•‰ªò„Éû„ÉÉ„ÉÅ„É≥„Ç∞ÔºàÂÆüÈöõ„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„ÅØ„Çà„ÇäÂé≥ÂØÜ„Å´Ôºâ
                if (detailsText.includes(startDate.substr(0, 7)) || detailsText.includes(endDate.substr(0, 7))) {
                    checkbox.checked = true;
                    selectedCount++;
                } else {
                    checkbox.checked = false;
                }
            });
            
            this.updateSelectedCount();
            this.showNotification('success', `ÊúüÈñìÈÅ∏Êäû: ${selectedCount}‰ª∂„ÅÆ„Éá„Éº„Çø„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü`);
        } catch (error) {
            console.error('‚ùå ÊúüÈñìÈÅ∏Êäû„Ç®„É©„Éº:', error);
            this.showNotification('error', 'ÊúüÈñìÈÅ∏Êäû„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
        }
    }
    
    /**
     * „ÇΩ„Éº„ÇπÂà•ÈÅ∏Êäû
     */
    selectBySource(source) {
        try {
            const checkboxes = document.querySelectorAll('[data-checkbox="data-item"]');
            let selectedCount = 0;
            
            checkboxes.forEach(checkbox => {
                const item = checkbox.closest('.kicho__data-item');
                if (item && item.dataset.source === source) {
                    checkbox.checked = true;
                    selectedCount++;
                } else {
                    checkbox.checked = false;
                }
            });
            
            this.updateSelectedCount();
            this.showNotification('success', `${source}„Éá„Éº„Çø„ÅÆ„Åø„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü (${selectedCount}‰ª∂)`);
        } catch (error) {
            console.error('‚ùå „ÇΩ„Éº„ÇπÂà•ÈÅ∏Êäû„Ç®„É©„Éº:', error);
            this.showNotification('error', '„Éá„Éº„ÇøÈÅ∏Êäû„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
        }
    }
    
    /**
     * ÈÅ∏Êäû„Éá„Éº„ÇøÂâäÈô§
     */
    async deleteSelectedData() {
        try {
            const selectedCount = this.state.selectedDataCount;
            if (selectedCount === 0) {
                throw new Error('ÂâäÈô§„Åô„Çã„Éá„Éº„Çø„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            }
            
            if (!confirm(`ÈÅ∏Êäû„Åó„Åü${selectedCount}‰ª∂„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) {
                return;
            }
            
            this.showNotification('info', `${selectedCount}‰ª∂„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Å¶„ÅÑ„Åæ„Åô...`);
            
            const selectedItems = this.getSelectedDataItems();
            
            const response = await this.ajaxRequest('POST', {
                action: 'delete_selected_data',
                selected_items: selectedItems
            });
            
            if (response.success) {
                this.showNotification('success', `${selectedCount}‰ª∂„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`);
                await this.loadInitialData();
                this.clearAllSelections();
            } else {
                throw new Error(response.message || '„Éá„Éº„ÇøÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå ÈÅ∏Êäû„Éá„Éº„ÇøÂâäÈô§„Ç®„É©„Éº:', error);
            this.showNotification('error', `„Éá„Éº„ÇøÂâäÈô§„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ÂÄãÂà•„Éá„Éº„ÇøÂâäÈô§
     */
    async deleteDataItem(itemId) {
        try {
            const item = document.querySelector(`[data-item-id="${itemId}"]`);
            if (!item) {
                throw new Error('ÂâäÈô§ÂØæË±°„ÅÆ„Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            }
            
            const name = item.querySelector('.kicho__data-name')?.textContent || '„Éá„Éº„Çø';
            if (!confirm(`„Äå${name}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) {
                return;
            }
            
            const response = await this.ajaxRequest('POST', {
                action: 'delete_data_item',
                item_id: itemId
            });
            
            if (response.success) {
                item.remove();
                this.showNotification('success', `„Äå${name}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`);
                this.updateSelectedCount();
                await this.loadInitialData();
            } else {
                throw new Error(response.message || '„Éá„Éº„ÇøÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå „Éá„Éº„ÇøÂâäÈô§„Ç®„É©„Éº:', error);
            this.showNotification('error', `„Éá„Éº„ÇøÂâäÈô§„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ÈÅ∏Êäû„Éá„Éº„Çø„Ç¢„Ç§„ÉÜ„É†ÂèñÂæó
     */
    getSelectedDataItems() {
        const selectedItems = [];
        const checkedBoxes = document.querySelectorAll('[data-checkbox="data-item"]:checked');
        
        checkedBoxes.forEach(checkbox => {
            const item = checkbox.closest('.kicho__data-item');
            if (item) {
                selectedItems.push({
                    id: item.dataset.itemId,
                    source: item.dataset.source,
                    name: item.querySelector('.kicho__data-name')?.textContent || ''
                });
            }
        });
        
        return selectedItems;
    }
    
    /**
     * ÂÖ®ÈÅ∏ÊäûËß£Èô§
     */
    clearAllSelections() {
        const checkboxes = document.querySelectorAll('[data-checkbox="data-item"]');
        checkboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
        this.updateSelectedCount();
    }
    
    // =====================================
    // „É´„Éº„É´ÁÆ°ÁêÜÊ©üËÉΩ
    // =====================================
    
    /**
     * „É´„Éº„É´CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
     */
    async downloadRulesCSV() {
        try {
            this.showNotification('info', '„É´„Éº„É´CSV„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê„Åó„Å¶„ÅÑ„Åæ„Åô...');
            
            const response = await this.ajaxRequest('POST', {
                action: 'download_rules_csv'
            });
            
            if (response.success) {
                this.downloadFile(response.data.csv_content, response.data.filename, 'text/csv');
                this.showNotification('success', '„É´„Éº„É´CSV„Éï„Ç°„Ç§„É´„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü');
            } else {
                throw new Error(response.message || '„É´„Éº„É´CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå „É´„Éº„É´CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
            this.showNotification('error', `„É´„Éº„É´CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * Êñ∞Ë¶è„É´„Éº„É´‰ΩúÊàê
     */
    async createNewRule() {
        try {
            const response = await this.ajaxRequest('POST', {
                action: 'create_new_rule'
            });
            
            if (response.success) {
                this.showModal('Êñ∞Ë¶è„É´„Éº„É´‰ΩúÊàê', this.renderNewRuleForm(response.data));
            } else {
                throw new Error(response.message || 'Êñ∞Ë¶è„É´„Éº„É´‰ΩúÊàêÁîªÈù¢„ÅÆË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå Êñ∞Ë¶è„É´„Éº„É´‰ΩúÊàê„Ç®„É©„Éº:', error);
            this.showNotification('error', `Êñ∞Ë¶è„É´„Éº„É´‰ΩúÊàê„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * „É´„Éº„É´CSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éà„É™„Ç¨„Éº
     */
    triggerRulesCSVUpload() {
        if (this.elements.rulesCSVInput) {
            this.elements.rulesCSVInput.click();
        }
    }
    
    /**
     * „É´„Éº„É´CSV„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ
     */
    async handleRulesCSVUpload(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        if (!file.name.toLowerCase().endsWith('.csv')) {
            this.showNotification('error', 'CSV„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }
        
        try {
            this.showNotification('info', `„É´„Éº„É´CSV„Éï„Ç°„Ç§„É´„Äå${file.name}„Äç„ÇíÂá¶ÁêÜ„Åó„Å¶„ÅÑ„Åæ„Åô...`);
            
            const formData = new FormData();
            formData.append('rules_csv_file', file);
            formData.append('action', 'handle_rules_csv_upload');
            
            const response = await this.ajaxRequest('POST', formData, this.config.timeouts.upload);
            
            if (response.success) {
                // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂæå„ÅÆÁµ±Ë®à„ÇíÊõ¥Êñ∞
                this.state.approvalCount = response.data.approval_count || 0;
                this.state.mfSendCount = response.data.mf_send_count || 0;
                
                this.safeSetText(this.elements.approvalCount, `${this.state.approvalCount}‰ª∂`);
                this.safeSetText(this.elements.mfSendCount, `${this.state.mfSendCount}‰ª∂`);
                this.safeSetText(this.elements.errorPrediction, `${response.data.error_prediction || 0}‰ª∂`);
                
                this.showNotification('success', `„É´„Éº„É´CSV„Éï„Ç°„Ç§„É´„Äå${file.name}„Äç„ÅÆË™≠„ÅøËæº„Åø„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`);
            } else {
                throw new Error(response.message || '„É´„Éº„É´CSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå „É´„Éº„É´CSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
            this.showNotification('error', `„É´„Éº„É´CSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº: ${error.message}`);
        }
        
        // „Éï„Ç°„Ç§„É´ÂÖ•Âäõ„Çí„É™„Çª„ÉÉ„Éà
        event.target.value = '';
    }
    
    /**
     * „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„É´„Éº„É´„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
     */
    async saveUploadedRulesAsDatabase() {
        try {
            const saveMode = document.querySelector('input[name="rule_save_mode"]:checked')?.value;
            
            if (!saveMode) {
                throw new Error('‰øùÂ≠ò„É¢„Éº„Éâ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            }
            
            this.showNotification('info', `„É´„Éº„É´„Çí„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò„Åó„Å¶„ÅÑ„Åæ„Åô... (${saveMode}„É¢„Éº„Éâ)`);
            
            const response = await this.ajaxRequest('POST', {
                action: 'save_uploaded_rules_as_database',
                save_mode: saveMode
            });
            
            if (response.success) {
                this.showNotification('success', `„É´„Éº„É´„Åå„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü (${saveMode}„É¢„Éº„Éâ)`);
                await this.loadInitialData();
            } else {
                throw new Error(response.message || '„É´„Éº„É´‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå „É´„Éº„É´‰øùÂ≠ò„Ç®„É©„Éº:', error);
            this.showNotification('error', `„É´„Éº„É´‰øùÂ≠ò„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ‰øùÂ≠òÊ∏à„Åø„É´„Éº„É´Á∑®ÈõÜ
     */
    async editSavedRule(ruleId) {
        try {
            const response = await this.ajaxRequest('POST', {
                action: 'get_saved_rule_for_edit',
                rule_id: ruleId
            });
            
            if (response.success) {
                this.showModal('„É´„Éº„É´Á∑®ÈõÜ', this.renderRuleEditForm(response.data));
            } else {
                throw new Error(response.message || '„É´„Éº„É´Á∑®ÈõÜÁîªÈù¢„ÅÆË°®Á§∫„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå „É´„Éº„É´Á∑®ÈõÜ„Ç®„É©„Éº:', error);
            this.showNotification('error', `„É´„Éº„É´Á∑®ÈõÜ„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ‰øùÂ≠òÊ∏à„Åø„É´„Éº„É´ÂâäÈô§
     */
    async deleteSavedRule(ruleId) {
        try {
            const ruleItem = document.querySelector(`[data-rule-id="${ruleId}"]`);
            const ruleName = ruleItem?.querySelector('.kicho__saved-rule__name')?.textContent || `„É´„Éº„É´${ruleId}`;
            
            if (!confirm(`„Äå${ruleName}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) {
                return;
            }
            
            this.showNotification('info', `„Äå${ruleName}„Äç„ÇíÂâäÈô§„Åó„Å¶„ÅÑ„Åæ„Åô...`);
            
            const response = await this.ajaxRequest('POST', {
                action: 'delete_saved_rule',
                rule_id: ruleId
            });
            
            if (response.success) {
                if (ruleItem) {
                    ruleItem.remove();
                    this.updateSavedRulesCount();
                }
                this.showNotification('success', `„Äå${ruleName}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`);
            } else {
                throw new Error(response.message || '„É´„Éº„É´ÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå „É´„Éº„É´ÂâäÈô§„Ç®„É©„Éº:', error);
            this.showNotification('error', `„É´„Éº„É´ÂâäÈô§„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    // =====================================
    // ÊâøË™ç„ÉªÂèñÂºïÁÆ°ÁêÜÊ©üËÉΩ
    // =====================================
    
    /**
     * ÊâøË™çÂæÖ„Å°CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
     */
    async downloadPendingCSV() {
        try {
            this.showNotification('info', 'ÊâøË™çÂæÖ„Å°ÂèñÂºïCSV„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê„Åó„Å¶„ÅÑ„Åæ„Åô...');
            
            const response = await this.ajaxRequest('POST', {
                action: 'download_pending_csv'
            });
            
            if (response.success) {
                this.downloadFile(response.data.csv_content, response.data.filename, 'text/csv');
                this.showNotification('success', 'ÊâøË™çÂæÖ„Å°ÂèñÂºïCSV„Éï„Ç°„Ç§„É´„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü');
            } else {
                throw new Error(response.message || 'ÊâøË™çÂæÖ„Å°CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå ÊâøË™çÂæÖ„Å°CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
            this.showNotification('error', `ÊâøË™çÂæÖ„Å°CSV„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ÊâøË™çCSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Éà„É™„Ç¨„Éº
     */
    triggerApprovalCSVUpload() {
        if (this.elements.approvalCSVInput) {
            this.elements.approvalCSVInput.click();
        }
    }
    
    /**
     * ÊâøË™çCSV„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ
     */
    async handleApprovalCSVUpload(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        if (!file.name.toLowerCase().endsWith('.csv')) {
            this.showNotification('error', 'CSV„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }
        
        try {
            this.showNotification('info', `ÊâøË™çCSV„Éï„Ç°„Ç§„É´„Äå${file.name}„Äç„ÇíÂá¶ÁêÜ„Åó„Å¶„ÅÑ„Åæ„Åô...`);
            
            const formData = new FormData();
            formData.append('approval_csv_file', file);
            formData.append('action', 'handle_approval_csv_upload');
            
            const response = await this.ajaxRequest('POST', formData, this.config.timeouts.upload);
            
            if (response.success) {
                // „Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂæå„ÅÆÁµ±Ë®à„ÇíÊõ¥Êñ∞
                this.state.approvalCount = response.data.approval_count || 0;
                this.state.mfSendCount = response.data.mf_send_count || 0;
                
                this.safeSetText(this.elements.approvalCount, `${this.state.approvalCount}‰ª∂`);
                this.safeSetText(this.elements.mfSendCount, `${this.state.mfSendCount}‰ª∂`);
                this.safeSetText(this.elements.errorPrediction, `${response.data.error_prediction || 0}‰ª∂`);
                
                this.showNotification('success', `ÊâøË™çCSV„Éï„Ç°„Ç§„É´„Äå${file.name}„Äç„ÅÆË™≠„ÅøËæº„Åø„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`);
            } else {
                throw new Error(response.message || 'ÊâøË™çCSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå ÊâøË™çCSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
            this.showNotification('error', `ÊâøË™çCSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº: ${error.message}`);
        }
        
        // „Éï„Ç°„Ç§„É´ÂÖ•Âäõ„Çí„É™„Çª„ÉÉ„Éà
        event.target.value = '';
    }
    
    /**
     * ‰∏ÄÊã¨ÊâøË™çÂÆüË°å
     */
    async bulkApproveTransactions() {
        try {
            const approvalCount = this.state.approvalCount;
            const mfSendCount = this.state.mfSendCount;
            
            if (approvalCount === 0) {
                throw new Error('ÊâøË™ç„Åô„Çã„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
            }
            
            if (!confirm(`${approvalCount}‰ª∂„ÅÆÂèñÂºï„Çí‰∏ÄÊã¨ÊâøË™ç„Åó„Åæ„Åô„ÅãÔºü\n\n${mfSendCount}‰ª∂„ÇíMFÈÄÅ‰ø°ÂæÖ„Å°„Å´ËøΩÂä†„Åó„Åæ„Åô„ÄÇ`)) {
                return;
            }
            
            this.showNotification('info', `${approvalCount}‰ª∂„ÅÆÂèñÂºï„Çí‰∏ÄÊã¨ÊâøË™ç„Åó„Å¶„ÅÑ„Åæ„Åô...`);
            
            const response = await this.ajaxRequest('POST', {
                action: 'bulk_approve_transactions',
                approval_count: approvalCount,
                mf_send_count: mfSendCount
            });
            
            if (response.success) {
                this.showNotification('success', `${approvalCount}‰ª∂„ÅÆÂèñÂºï„Åå‰∏ÄÊã¨ÊâøË™ç„Åï„Çå„Åæ„Åó„Åü (${mfSendCount}‰ª∂„ÇíMFÈÄÅ‰ø°ÂæÖ„Å°„Å´ËøΩÂä†)`);
                await this.loadInitialData();
                
                // ÊâøË™ç„Ç´„Ç¶„É≥„Çø„Éº„É™„Çª„ÉÉ„Éà
                this.state.approvalCount = 0;
                this.state.mfSendCount = 0;
                this.safeSetText(this.elements.approvalCount, '0‰ª∂');
                this.safeSetText(this.elements.mfSendCount, '0‰ª∂');
                this.safeSetText(this.elements.errorPrediction, '0‰ª∂');
            } else {
                throw new Error(response.message || '‰∏ÄÊã¨ÊâøË™ç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå ‰∏ÄÊã¨ÊâøË™ç„Ç®„É©„Éº:', error);
            this.showNotification('error', `‰∏ÄÊã¨ÊâøË™ç„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ÂèñÂºïË©≥Á¥∞Ë°®Á§∫
     */
    async viewTransactionDetails(transactionId) {
        try {
            const response = await this.ajaxRequest('POST', {
                action: 'get_transaction_details',
                transaction_id: transactionId
            });
            
            if (response.success) {
                this.showModal('ÂèñÂºïË©≥Á¥∞', this.renderTransactionDetails(response.data));
            } else {
                throw new Error(response.message || 'ÂèñÂºïË©≥Á¥∞ÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå ÂèñÂºïË©≥Á¥∞Ë°®Á§∫„Ç®„É©„Éº:', error);
            this.showNotification('error', `ÂèñÂºïË©≥Á¥∞Ë°®Á§∫„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ÊâøË™çÊ∏à„ÅøÂèñÂºïÂâäÈô§
     */
    async deleteApprovedTransaction(transactionId) {
        try {
            const transactionItem = document.querySelector(`[data-transaction-id="${transactionId}"]`);
            const transactionName = transactionItem?.querySelector('.kicho__approved-transaction__name')?.textContent || `ÂèñÂºï${transactionId}`;
            
            if (!confirm(`„Äå${transactionName}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`)) {
                return;
            }
            
            this.showNotification('info', `„Äå${transactionName}„Äç„ÇíÂâäÈô§„Åó„Å¶„ÅÑ„Åæ„Åô...`);
            
            const response = await this.ajaxRequest('POST', {
                action: 'delete_approved_transaction',
                transaction_id: transactionId
            });
            
            if (response.success) {
                if (transactionItem) {
                    transactionItem.remove();
                    this.updateApprovedTransactionsCount();
                }
                this.showNotification('success', `„Äå${transactionName}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü`);
            } else {
                throw new Error(response.message || 'ÊâøË™çÂèñÂºïÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå ÊâøË™çÂèñÂºïÂâäÈô§„Ç®„É©„Éº:', error);
            this.showNotification('error', `ÊâøË™çÂèñÂºïÂâäÈô§„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    // =====================================
    // AIÂ±•Ê≠¥„Éª„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊ©üËÉΩ
    // =====================================
    
    /**
     * AIÂ±•Ê≠¥Êõ¥Êñ∞
     */
    async refreshAIHistory() {
        try {
            this.showNotification('info', 'AIÂ≠¶ÁøíÂ±•Ê≠¥„ÇíÊõ¥Êñ∞„Åó„Å¶„ÅÑ„Åæ„Åô...');
            
            const response = await this.ajaxRequest('POST', {
                action: 'refresh_ai_history'
            });
            
            if (response.success) {
                this.updateAIHistoryDisplay(response.data.sessions);
                this.showNotification('success', 'AIÂ≠¶ÁøíÂ±•Ê≠¥„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü');
            } else {
                throw new Error(response.message || 'AIÂ±•Ê≠¥Êõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå AIÂ±•Ê≠¥Êõ¥Êñ∞„Ç®„É©„Éº:', error);
            this.showNotification('error', `AIÂ±•Ê≠¥Êõ¥Êñ∞„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * AIÂ±•Ê≠¥ËøΩÂä†Ë™≠„ÅøËæº„Åø
     */
    async loadMoreSessions() {
        try {
            const currentCount = document.querySelectorAll('.kicho__session-item').length;
            
            const response = await this.ajaxRequest('POST', {
                action: 'load_more_ai_sessions',
                offset: currentCount
            });
            
            if (response.success) {
                this.appendAIHistoryDisplay(response.data.sessions);
                this.showNotification('info', `${response.data.sessions.length}‰ª∂„ÅÆÂ±•Ê≠¥„ÇíËøΩÂä†Ë™≠„ÅøËæº„Åø„Åó„Åæ„Åó„Åü`);
            } else {
                throw new Error(response.message || 'Â±•Ê≠¥ËøΩÂä†Ë™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå AIÂ±•Ê≠¥ËøΩÂä†Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            this.showNotification('error', `Â±•Ê≠¥ËøΩÂä†Ë™≠„ÅøËæº„Åø„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ÂÆåÂÖ®„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÂÆüË°å
     */
    async executeFullBackup() {
        try {
            this.showNotification('info', 'ÂÆåÂÖ®„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å„Åó„Å¶„ÅÑ„Åæ„Åô...');
            
            const response = await this.ajaxRequest('POST', {
                action: 'execute_full_backup'
            }, this.config.timeouts.upload);
            
            if (response.success) {
                this.downloadFile(response.data.backup_content, response.data.filename, 'application/zip');
                this.showNotification('success', 'ÂÆåÂÖ®„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éï„Ç°„Ç§„É´„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü');
            } else {
                throw new Error(response.message || 'ÂÆåÂÖ®„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå ÂÆåÂÖ®„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç®„É©„Éº:', error);
            this.showNotification('error', `ÂÆåÂÖ®„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * MF„ÇØ„É©„Ç¶„Éâ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
     */
    async exportToMF() {
        try {
            const exportMode = document.getElementById('exportMode')?.value;
            
            if (!confirm(`MF„ÇØ„É©„Ç¶„Éâ„Å´ÈÄÅ‰ø°„Åó„Åæ„Åô„ÅãÔºü\n\nÈÄÅ‰ø°„É¢„Éº„Éâ: ${exportMode}`)) {
                return;
            }
            
            this.showNotification('info', 'MF„ÇØ„É©„Ç¶„Éâ„Å∏„ÅÆÈÄÅ‰ø°„ÇíÈñãÂßã„Åó„Å¶„ÅÑ„Åæ„Åô...');
            
            const response = await this.ajaxRequest('POST', {
                action: 'export_to_mf',
                export_mode: exportMode
            }, this.config.timeouts.upload);
            
            if (response.success) {
                this.showNotification('success', `MF„ÇØ„É©„Ç¶„Éâ„Å∏„ÅÆÈÄÅ‰ø°„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü (${response.data.sent_count}‰ª∂)`);
                await this.loadInitialData();
            } else {
                throw new Error(response.message || 'MF„ÇØ„É©„Ç¶„ÉâÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå MF„ÇØ„É©„Ç¶„Éâ„Ç®„ÇØ„Çπ„Éù„Éº„Éà„Ç®„É©„Éº:', error);
            this.showNotification('error', `MF„ÇØ„É©„Ç¶„ÉâÈÄÅ‰ø°„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ÊâãÂãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó‰ΩúÊàê
     */
    async createManualBackup() {
        try {
            const backupFormat = document.getElementById('backupFormat')?.value;
            
            this.showNotification('info', `ÊâãÂãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å„Åó„Å¶„ÅÑ„Åæ„Åô... (${backupFormat}ÂΩ¢Âºè)`);
            
            const response = await this.ajaxRequest('POST', {
                action: 'create_manual_backup',
                backup_format: backupFormat
            }, this.config.timeouts.upload);
            
            if (response.success) {
                this.downloadFile(response.data.backup_content, response.data.filename, response.data.mime_type);
                this.showNotification('success', `ÊâãÂãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éï„Ç°„Ç§„É´(${backupFormat}ÂΩ¢Âºè)„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü`);
            } else {
                throw new Error(response.message || 'ÊâãÂãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå ÊâãÂãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç®„É©„Éº:', error);
            this.showNotification('error', `ÊâãÂãï„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * Êã°Âºµ„É¨„Éù„Éº„ÉàÁîüÊàê
     */
    async generateAdvancedReport() {
        try {
            const reportType = document.getElementById('reportType')?.value;
            const reportFormat = document.getElementById('reportFormat')?.value;
            const startDate = document.getElementById('reportStartDate')?.value;
            const endDate = document.getElementById('reportEndDate')?.value;
            
            if (!startDate || !endDate) {
                throw new Error('„É¨„Éù„Éº„ÉàÊúüÈñì„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            }
            
            this.showNotification('info', `Êã°Âºµ„É¨„Éù„Éº„Éà„ÇíÁîüÊàê„Åó„Å¶„ÅÑ„Åæ„Åô... (${reportType}, ${reportFormat}ÂΩ¢Âºè, ${startDate}„Äú${endDate})`);
            
            const response = await this.ajaxRequest('POST', {
                action: 'generate_advanced_report',
                report_type: reportType,
                report_format: reportFormat,
                start_date: startDate,
                end_date: endDate
            }, this.config.timeouts.upload);
            
            if (response.success) {
                this.downloadFile(response.data.report_content, response.data.filename, response.data.mime_type);
                this.showNotification('success', `Êã°Âºµ„É¨„Éù„Éº„Éà(${reportFormat}ÂΩ¢Âºè)„ÅÆÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`);
            } else {
                throw new Error(response.message || '„É¨„Éù„Éº„ÉàÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå Êã°Âºµ„É¨„Éù„Éº„ÉàÁîüÊàê„Ç®„É©„Éº:', error);
            this.showNotification('error', `„É¨„Éù„Éº„ÉàÁîüÊàê„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * „É¨„Éù„Éº„ÉàÁîüÊàê„Éï„Ç©„Éº„É†ÈÄÅ‰ø°
     */
    async submitReportGenerationForm(formData) {
        await this.generateAdvancedReport();
    }
    
    // =====================================
    // Â±•Ê≠¥Ë°®Á§∫Ê©üËÉΩ
    // =====================================
    
    /**
     * Âèñ„ÇäËæº„ÅøÂ±•Ê≠¥Ë°®Á§∫
     */
    async showImportHistory() {
        try {
            const response = await this.ajaxRequest('POST', {
                action: 'get_import_history'
            });
            
            if (response.success) {
                this.showModal('Âèñ„ÇäËæº„ÅøÂ±•Ê≠¥', this.renderImportHistory(response.data));
            } else {
                throw new Error(response.message || 'Âèñ„ÇäËæº„ÅøÂ±•Ê≠¥ÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            }
        } catch (error) {
            console.error('‚ùå Âèñ„ÇäËæº„ÅøÂ±•Ê≠¥Ë°®Á§∫„Ç®„É©„Éº:', error);
            this.showNotification('error', `Âèñ„ÇäËæº„ÅøÂ±•Ê≠¥Ë°®Á§∫„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    // =====================================
    // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóÊ©üËÉΩ
    // =====================================
    
    /**
     * „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„É™„Çπ„Éä„ÉºË®≠ÂÆö
     */
    setupDragAndDropListeners() {
        const uploadAreas = document.querySelectorAll('.kicho__upload-area');
        
        uploadAreas.forEach(area => {
            area.addEventListener('dragover', this.handleDragOver.bind(this));
            area.addEventListener('dragleave', this.handleDragLeave.bind(this));
            area.addEventListener('drop', this.handleDrop.bind(this));
        });
    }
    
    /**
     * „Éâ„É©„ÉÉ„Ç∞„Ç™„Éº„Éê„ÉºÂá¶ÁêÜ
     */
    handleDragOver(event) {
        event.preventDefault();
        event.currentTarget.style.borderColor = 'var(--kicho-primary)';
        event.currentTarget.style.background = 'rgba(139, 92, 246, 0.1)';
    }
    
    /**
     * „Éâ„É©„ÉÉ„Ç∞„É™„Éº„ÉñÂá¶ÁêÜ
     */
    handleDragLeave(event) {
        event.preventDefault();
        event.currentTarget.style.borderColor = 'var(--border-color)';
        event.currentTarget.style.background = 'var(--bg-primary)';
    }
    
    /**
     * „Éâ„É≠„ÉÉ„ÉóÂá¶ÁêÜ
     */
    async handleDrop(event) {
        event.preventDefault();
        
        const area = event.currentTarget;
        area.style.borderColor = 'var(--border-color)';
        area.style.background = 'var(--bg-primary)';
        
        const files = Array.from(event.dataTransfer.files);
        const csvFiles = files.filter(file => file.name.toLowerCase().endsWith('.csv'));
        
        if (csvFiles.length === 0) {
            this.showNotification('error', 'CSV„Éï„Ç°„Ç§„É´„Çí„Éâ„É≠„ÉÉ„Éó„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            return;
        }
        
        // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É™„Ç¢„ÅÆÁ®ÆÈ°û„ÇíÂà§ÂÆö
        const action = area.getAttribute('data-action');
        
        for (const file of csvFiles) {
            await this.processDroppedFile(file, action);
        }
    }
    
    /**
     * „Éâ„É≠„ÉÉ„Éó„Éï„Ç°„Ç§„É´Âá¶ÁêÜ
     */
    async processDroppedFile(file, action) {
        try {
            let inputElement = null;
            
            switch (action) {
                case 'csv-upload':
                    inputElement = this.elements.csvFileInput;
                    break;
                case 'rules-csv-upload':
                    inputElement = this.elements.rulesCSVInput;
                    break;
                case 'approval-csv-upload':
                    inputElement = this.elements.approvalCSVInput;
                    break;
                default:
                    throw new Error('Êú™ÂØæÂøú„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁ®ÆÈ°û„Åß„Åô');
            }
            
            if (inputElement) {
                // „Éï„Ç°„Ç§„É´ÂÖ•ÂäõË¶ÅÁ¥†„Å´„Éï„Ç°„Ç§„É´„ÇíË®≠ÂÆö
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file);
                inputElement.files = dataTransfer.files;
                
                // change„Ç§„Éô„É≥„Éà„ÇíÁô∫ÁÅ´
                const changeEvent = new Event('change', { bubbles: true });
                inputElement.dispatchEvent(changeEvent);
            }
        } catch (error) {
            console.error('‚ùå „Éâ„É≠„ÉÉ„Éó„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„Ç®„É©„Éº:', error);
            this.showNotification('error', `„Éï„Ç°„Ç§„É´Âá¶ÁêÜ„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    // =====================================
    // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„Éª„Éò„É´„Éë„ÉºÊ©üËÉΩ
    // =====================================
    
    /**
     * Ajax „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å
     */
    async ajaxRequest(method, data, timeout = this.config.timeouts.default) {
        try {
            // NAGANO3 Ajax „Ç∑„Çπ„ÉÜ„É†„Çí‰ΩøÁî®
            const response = await window.NAGANO3.ajax.request({
                url: this.config.ajaxUrl,
                method: method,
                data: data,
                timeout: timeout
            });
            
            return response;
        } catch (error) {
            console.error('‚ùå Ajax „É™„ÇØ„Ç®„Çπ„Éà„Ç®„É©„Éº:', error);
            throw error;
        }
    }
    
    /**
     * ÂÆâÂÖ®„Å™„ÉÜ„Ç≠„Çπ„ÉàË®≠ÂÆö
     */
    safeSetText(element, text) {
        if (element && element.textContent !== undefined) {
            element.textContent = text;
            return true;
        }
        return false;
    }
    
    /**
     * ÈÄöÁü•Ë°®Á§∫
     */
    showNotification(type, message) {
        // NAGANO3 ÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†„Çí‰ΩøÁî®
        if (window.NAGANO3.notifications) {
            window.NAGANO3.notifications.show(type, message);
        } else {
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
            console.log(`${type.toUpperCase()}: ${message}`);
            alert(`${type.toUpperCase()}: ${message}`);
        }
    }
    
    /**
     * „É¢„Éº„ÉÄ„É´Ë°®Á§∫
     */
    showModal(title, content) {
        // NAGANO3 „É¢„Éº„ÉÄ„É´„Ç∑„Çπ„ÉÜ„É†„Çí‰ΩøÁî®
        if (window.NAGANO3.modal) {
            window.NAGANO3.modal.show(title, content);
        } else {
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
            alert(`${title}\n\n${content}`);
        }
    }
    
    /**
     * „Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
     */
    downloadFile(content, filename, mimeType) {
        try {
            const blob = new Blob([content], { type: mimeType });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            
            URL.revokeObjectURL(url);
        } catch (error) {
            console.error('‚ùå „Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
            this.showNotification('error', `„Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº: ${error.message}`);
        }
    }
    
    /**
     * ‰øùÂ≠òÊ∏à„Åø„É´„Éº„É´Êï∞Êõ¥Êñ∞
     */
    updateSavedRulesCount() {
        const count = document.querySelectorAll('.kicho__saved-rule-item').length;
        const countElement = document.getElementById('savedRulesCount');
        if (countElement) {
            countElement.textContent = count;
        }
    }
    
    /**
     * ÊâøË™çÊ∏à„ÅøÂèñÂºïÊï∞Êõ¥Êñ∞
     */
    updateApprovedTransactionsCount() {
        const count = document.querySelectorAll('.kicho__approved-transaction-item').length;
        const countElement = document.getElementById('approvedTransactionsCount');
        if (countElement) {
            countElement.textContent = count;
        }
    }
    
    /**
     * AIÂ±•Ê≠¥Ë°®Á§∫Êõ¥Êñ∞
     */
    updateAIHistoryDisplay(sessions) {
        const sessionList = document.getElementById('aiSessionList');
        if (!sessionList) return;
        
        sessionList.innerHTML = '';
        sessions.forEach(session => {
            const sessionElement = this.createSessionElement(session);
            sessionList.appendChild(sessionElement);
        });
    }
    
    /**
     * AIÂ±•Ê≠¥ËøΩÂä†Ë°®Á§∫
     */
    appendAIHistoryDisplay(sessions) {
        const sessionList = document.getElementById('aiSessionList');
        if (!sessionList) return;
        
        sessions.forEach(session => {
            const sessionElement = this.createSessionElement(session);
            sessionList.appendChild(sessionElement);
        });
    }
    
    /**
     * „Çª„ÉÉ„Ç∑„Éß„É≥Ë¶ÅÁ¥†‰ΩúÊàê
     */
    createSessionElement(session) {
        const div = document.createElement('div');
        div.className = 'kicho__session-item';
        div.innerHTML = `
            <span class="kicho__session-datetime">${session.datetime}</span>
            <span class="kicho__session-status--success">${session.status}</span>
        `;
        return div;
    }
    
    // =====================================
    // „É¨„É≥„ÉÄ„É™„É≥„Ç∞Ê©üËÉΩÔºà„É¢„Éº„ÉÄ„É´Áî®Ôºâ
    // =====================================
    
    /**
     * MFÂ±•Ê≠¥„É¨„É≥„ÉÄ„É™„É≥„Ç∞
     */
    renderMFHistory(data) {
        // ÂÆüÈöõ„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Åß„ÅØÈÅ©Âàá„Å™HTML„ÇíÁîüÊàê
        return `
            <div class="kicho__modal-content">
                <h4>MFÈÄ£Êê∫Â±•Ê≠¥</h4>
                <div class="kicho__history-list">
                    ${data.history.map(item => `
                        <div class="kicho__history-item">
                            <span>${item.date}</span>
                            <span>${item.type}</span>
                            <span>${item.status}</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    /**
     * ÈáçË§áÂá¶ÁêÜÂ±•Ê≠¥„É¨„É≥„ÉÄ„É™„É≥„Ç∞
     */
    renderDuplicateHistory(data) {
        return `
            <div class="kicho__modal-content">
                <h4>ÈáçË§áÂá¶ÁêÜÂ±•Ê≠¥</h4>
                <div class="kicho__history-list">
                    ${data.history.map(item => `
                        <div class="kicho__history-item">
                            <span>${item.date}</span>
                            <span>${item.file_name}</span>
                            <span>${item.duplicate_count}‰ª∂„ÅÆÈáçË§á</span>
                            <span>${item.resolution}</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    /**
     * AIÂ≠¶ÁøíÂ±•Ê≠¥„É¨„É≥„ÉÄ„É™„É≥„Ç∞
     */
    renderAILearningHistory(data) {
        return `
            <div class="kicho__modal-content">
                <h4>AIÂ≠¶ÁøíÂ±•Ê≠¥„ÉªÂàÜÊûê</h4>
                <div class="kicho__analysis-charts">
                    <div>Á≤æÂ∫¶Êé®Áßª: ${data.accuracy_trend}</div>
                    <div>Â≠¶Áøí„Éá„Éº„ÇøÊï∞: ${data.learning_data_count}</div>
                    <div>ÁîüÊàê„É´„Éº„É´Êï∞: ${data.generated_rules_count}</div>
                </div>
            </div>
        `;
    }
    
    /**
     * ÊúÄÈÅ©ÂåñÊèêÊ°à„É¨„É≥„ÉÄ„É™„É≥„Ç∞
     */
    renderOptimizationSuggestions(data) {
        return `
            <div class="kicho__modal-content">
                <h4>ÊúÄÈÅ©ÂåñÊèêÊ°à</h4>
                <div class="kicho__suggestions-list">
                    ${data.suggestions.map(suggestion => `
                        <div class="kicho__suggestion-item">
                            <h5>${suggestion.title}</h5>
                            <p>${suggestion.description}</p>
                            <div class="kicho__suggestion-impact">ÊúüÂæÖÂäπÊûú: ${suggestion.impact}</div>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
    
    /**
     * Êñ∞Ë¶è„É´„Éº„É´„Éï„Ç©„Éº„É†„É¨„É≥„ÉÄ„É™„É≥„Ç∞
     */
    renderNewRuleForm(data) {
        return `
            <div class="kicho__modal-content">
                <h4>Êñ∞Ë¶è„É´„Éº„É´‰ΩúÊàê</h4>
                <form id="newRuleForm">
                    <div class="kicho__form-group">
                        <label>„É´„Éº„É´Âêç</label>
                        <input type="text" name="rule_name" class="kicho__form-input" required>
                    </div>
                    <div class="kicho__form-group">
                        <label>Êù°‰ª∂</label>
                        <textarea name="conditions" class="kicho__form-input" rows="3" required></textarea>
                    </div>
                    <div class="kicho__form-group">
                        <label>Âá¶ÁêÜÂÜÖÂÆπ</label>
                        <textarea name="actions" class="kicho__form-input" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="kicho__btn kicho__btn--primary">„É´„Éº„É´‰ΩúÊàê</button>
                </form>
            </div>
        `;
    }
    
    /**
     * „É´„Éº„É´Á∑®ÈõÜ„Éï„Ç©„Éº„É†„É¨„É≥„ÉÄ„É™„É≥„Ç∞
     */
    renderRuleEditForm(data) {
        return `
            <div class="kicho__modal-content">
                <h4>„É´„Éº„É´Á∑®ÈõÜ</h4>
                <form id="editRuleForm">
                    <input type="hidden" name="rule_id" value="${data.rule.id}">
                    <div class="kicho__form-group">
                        <label>„É´„Éº„É´Âêç</label>
                        <input type="text" name="rule_name" class="kicho__form-input" value="${data.rule.name}" required>
                    </div>
                    <div class="kicho__form-group">
                        <label>Êù°‰ª∂</label>
                        <textarea name="conditions" class="kicho__form-input" rows="3" required>${data.rule.conditions}</textarea>
                    </div>
                    <div class="kicho__form-group">
                        <label>Âá¶ÁêÜÂÜÖÂÆπ</label>
                        <textarea name="actions" class="kicho__form-input" rows="3" required>${data.rule.actions}</textarea>
                    </div>
                    <button type="submit" class="kicho__btn kicho__btn--primary">„É´„Éº„É´Êõ¥Êñ∞</button>
                </form>
            </div>
        `;
    }
    
    /**
     * ÂèñÂºïË©≥Á¥∞„É¨„É≥„ÉÄ„É™„É≥„Ç∞
     */
    renderTransactionDetails(data) {
        return `
            <div class="kicho__modal-content">
                <h4>ÂèñÂºïË©≥Á¥∞</h4>
                <div class="kicho__transaction-details">
                    <div><strong>ÂèñÂºïID:</strong> ${data.transaction.id}</div>
                    <div><strong>Êó•‰ªò:</strong> ${data.transaction.date}</div>
                    <div><strong>ÈáëÈ°ç:</strong> ${data.transaction.amount}</div>
                    <div><strong>ÊëòË¶Å:</strong> ${data.transaction.description}</div>
                    <div><strong>ÂãòÂÆöÁßëÁõÆ:</strong> ${data.transaction.account}</div>
                    <div><strong>Áä∂ÊÖã:</strong> ${data.transaction.status}</div>
                </div>
            </div>
        `;
    }
    
    /**
     * Âèñ„ÇäËæº„ÅøÂ±•Ê≠¥„É¨„É≥„ÉÄ„É™„É≥„Ç∞
     */
    renderImportHistory(data) {
        return `
            <div class="kicho__modal-content">
                <h4>Âèñ„ÇäËæº„ÅøÂ±•Ê≠¥</h4>
                <div class="kicho__history-list">
                    ${data.history.map(item => `
                        <div class="kicho__history-item">
                            <span>${item.date}</span>
                            <span>${item.source}</span>
                            <span>${item.file_name}</span>
                            <span>${item.record_count}‰ª∂</span>
                            <span>${item.status}</span>
                        </div>
                    `).join('')}
                </div>
            </div>
        `;
    }
}

// =====================================
// „Ç∞„É≠„Éº„Éê„É´ÂàùÊúüÂåñ„Éª„Ç®„ÇØ„Çπ„Éù„Éº„Éà
// =====================================

// NAGANO3ÂêçÂâçÁ©∫Èñì„Å´Ë®òÂ∏≥„Ç∑„Çπ„ÉÜ„É†„ÇíÁôªÈå≤
window.NAGANO3.kicho = new KichoSystem();

// DOMContentLoadedÂæå„Å´ÂàùÊúüÂåñÂÆüË°å
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        if (document.body.dataset.page === 'kicho') {
            window.NAGANO3.kicho.init();
        }
    });
} else {
    if (document.body.dataset.page === 'kicho') {
        window.NAGANO3.kicho.init();
    }
}

console.log('‚úÖ NAGANO-3 Ë®òÂ∏≥„ÉÑ„Éº„É´ JavaScriptË™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
                