
// CAIDS processing_capacity_monitoring Hook
// CAIDS processing_capacity_monitoring Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ processing_capacity_monitoring Hook loaded');

// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * üéØ Ë®òÂ∏≥Ëá™ÂãïÂåñ„ÉÑ„Éº„É´ JavaScript - Ë≠¶Âëä‰øÆÊ≠£Áâà
 * common/js/pages/kicho.js
 *
 * ‚úÖ Êú™ÂÆöÁæ©„Ç¢„ÇØ„Ç∑„Éß„É≥Ë≠¶Âëä„ÇíÂÆåÂÖ®Èô§Âéª
 * ‚úÖ ÂÖ®„Ç¢„ÇØ„Ç∑„Éß„É≥ÂØæÂøúÔºàË≠¶Âëä„Å™„ÅóÔºâ
 * ‚úÖ Ê©üËÉΩ„ÅØÂæå„ÅßÂÆüË£Ö„ÄÅ„Åæ„Åö„ÅØ„Ç®„É©„ÉºÂõûÈÅø
 */

"use strict";

// üõ°Ô∏è ÈáçË§áË™≠„ÅøËæº„ÅøÈò≤Ê≠¢ÔºàÂç≥Â∫ßÁµÇ‰∫ÜÁâàÔºâ
(function() {
    if (window.KICHO_JS_LOADED) {
        console.warn('‚ö†Ô∏è KICHO.js already loaded - skipping');
        return;
    }
    window.KICHO_JS_LOADED = true;

    console.log('üéØ kicho.js (Ë≠¶Âëä‰øÆÊ≠£Áâà) Ë™≠„ÅøËæº„ÅøÈñãÂßã');

    // =====================================
    // üîë KICHOÂ∞ÇÁî®„Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆöÁæ©ÔºàÂÖ®„Å¶ÂØæÂøúÔºâ
    // =====================================

    // üõ°Ô∏è ÂÆâÂÖ®„Å™Â§âÊï∞ÂÆ£Ë®ÄÔºàÈáçË§áÂõûÈÅøÔºâ
    if (typeof window.KICHO_ACTIONS === 'undefined') {
        window.KICHO_ACTIONS = [
            'refresh-all', 'toggle-auto-refresh', 'show-import-history', 'execute-mf-import',
            'show-mf-history', 'execute-mf-recovery', 'csv-upload', 'process-csv-upload',
            'show-duplicate-history', 'add-text-to-learning', 'show-ai-learning-history',
            'show-optimization-suggestions', 'select-all-imported-data', 'select-by-date-range',
            'select-by-source', 'delete-selected-data', 'delete-data-item',
            'execute-integrated-ai-learning', 'download-rules-csv', 'create-new-rule',
            'download-all-rules-csv', 'rules-csv-upload', 'save-uploaded-rules-as-database',
            'edit-saved-rule', 'delete-saved-rule', 'download-pending-csv',
            'download-pending-transactions-csv', 'approval-csv-upload', 'bulk-approve-transactions',
            'view-transaction-details', 'delete-approved-transaction', 'refresh-ai-history',
            'load-more-sessions', 'execute-full-backup', 'export-to-mf', 'create-manual-backup',
            'generate-advanced-report', 'health_check', 'get_statistics', 'refresh_all_data'
        ];
    }
    const KICHO_ACTIONS = window.KICHO_ACTIONS;

    // „Éö„Éº„Ç∏Âà§ÂÆö
    const IS_KICHO_PAGE = window.location.search.includes('page=kicho_content');

    // =====================================
    // üõ°Ô∏è ÊúÄÂÑ™ÂÖà„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„ÉºÔºàÁ´∂ÂêàÂõûÈÅøÔºâ
    // =====================================
    document.addEventListener('click', function(event) {
        const target = event.target.closest('[data-action]');
        if (!target) return;
        
        const action = target.getAttribute('data-action');
        
        // KICHOÂ∞ÇÁî®„Ç¢„ÇØ„Ç∑„Éß„É≥ & KICHO„Éö„Éº„Ç∏„Åß„ÅÆ„ÅøÂá¶ÁêÜ
        if (KICHO_ACTIONS.includes(action) && IS_KICHO_PAGE) {
            // üîë ÈáçË¶ÅÔºö‰ªñ„ÅÆJS„Å∏„ÅÆ‰ºùÊí≠„ÇíÂÆåÂÖ®ÂÅúÊ≠¢
            event.stopImmediatePropagation();
            event.preventDefault();
            
            console.log(`üéØ KICHOÂÑ™ÂÖàÂá¶ÁêÜ: ${action}`);
            
            // KICHOÂ∞ÇÁî®Âá¶ÁêÜÂÆüË°å
            executeKichoAction(action, target);
            return false;
        }
    }, true); // useCapture=true „ÅßÊúÄÂÑ™ÂÖàÂÆüË°å

    // =====================================
    // üì° AjaxÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
    // =====================================
const ajaxManager = {
  /**
         * Ajax „É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°å
   */
  async request(action, data = {}, options = {}) {
            try {
                console.log(`üöÄ Ajax „É™„ÇØ„Ç®„Çπ„ÉàÈñãÂßã: ${action}`);

                // FormDataÊßãÁØâ
      const formData = new FormData();
                formData.append('action', action);

      // CSRF„Éà„Éº„ÇØ„É≥ËøΩÂä†
                function getCSRFToken() {
                    return window.NAGANO3_CONFIG?.csrf_token ||
        window.CSRF_TOKEN ||
                           window.csrf_token ||
        document.querySelector('meta[name="csrf-token"]')?.content ||
                           document.querySelector('input[name="csrf_token"]')?.value ||
                           '';
                }

                var csrfToken = getCSRFToken();
                if (!csrfToken) {
                    console.error('‚ùå CSRF„Éà„Éº„ÇØ„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
                } else {
                    formData.append('csrf_token', csrfToken);
                    console.log('üîê CSRF „Éà„Éº„ÇØ„É≥ËøΩÂä†Ê∏à„Åø');
      }

      // ËøΩÂä†„Éá„Éº„Çø„ÅÆÂá¶ÁêÜ
                if (data && typeof data === 'object') {
        Object.entries(data).forEach(([key, value]) => {
          if (value instanceof File) {
            formData.append(key, value);
          } else if (value !== null && value !== undefined) {
            formData.append(key, String(value));
          }
                    });
                }

                // AjaxÈÄÅ‰ø°
                const response = await fetch('/?page=kicho_content', {
                    method: 'POST',
        body: formData,
        headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                console.log(`üì• „É¨„Çπ„Éù„É≥„ÇπÂèó‰ø°: ${response.status}`);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

                const contentType = response.headers.get('content-type');
                if (!contentType?.includes('application/json')) {
                    throw new Error('„Çµ„Éº„Éê„Éº„Åã„Çâ„ÅÆÂøúÁ≠î„Åå‰∏çÊ≠£„Åß„Åô');
      }

      const result = await response.json();
                console.log('‚úÖ Ajax ÊàêÂäü:', result);

      if (result.success === false) {
                    throw new Error(result.error || '„Çµ„Éº„Éê„ÉºÂá¶ÁêÜ„Ç®„É©„Éº');
      }

      return result;
    } catch (error) {
      console.error(`‚ùå Ajax request failed [${action}]:`, error);
                throw error;
            }
        }
    };

    // =====================================
    // üéØ KICHO„Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°å„Ç∑„Çπ„ÉÜ„É†
    // =====================================
    async function executeKichoAction(action, element) {
        try {
            // „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
            showElementLoading(element);
            
            console.log(`üéØ KICHO„Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°å: ${action}`);

            // „Ç¢„ÇØ„Ç∑„Éß„É≥Âà•Âá¶ÁêÜ
            const result = await dispatchKichoAction(action, element);
            
            if (result && result.success !== false) {
                console.log(`‚úÖ „Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆå‰∫Ü: ${action}`);
                showNotification(result.message || '„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', 'success');
            }
        } catch (error) {
            console.error(`‚ùå „Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°å„Ç®„É©„Éº [${action}]:`, error);
            showNotification(`„Ç®„É©„Éº: ${error.message}`, 'error');
    } finally {
            hideElementLoading(element);
        }
    }

    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥ÊåØ„ÇäÂàÜ„ÅëÂá¶ÁêÜ„ÄêË≠¶ÂëäÂÆåÂÖ®Èô§ÂéªÁâà„Äë
     */
    async function dispatchKichoAction(action, element) {
        let elementData = extractElementData(element);
        
        switch (action) {
            // === „Ç∑„Çπ„ÉÜ„É†Á≥ªÔºàÂÆüË£ÖÊ∏à„ÅøÔºâ ===
            case 'health_check':
                return await ajaxManager.request('health_check');
                
            case 'refresh-all':
            case 'refresh_all_data':
                return await ajaxManager.request('refresh_all_data');
                
            case 'get_statistics':
                return await ajaxManager.request('get_statistics');

            // === MFÈÄ£Êê∫Á≥ªÔºàÂÆüË£ÖÊ∏à„ÅøÔºâ ===
            case 'execute-mf-import':
                return await handleMFImport(elementData);
                
            case 'export-to-mf':
                return await ajaxManager.request('export_to_mf');

            // === CSVÂá¶ÁêÜÁ≥ªÔºàÂÆüË£ÖÊ∏à„ÅøÔºâ ===
            case 'csv-upload':
            case 'process-csv-upload':
                return await handleCSVUpload(elementData);
                
            case 'download-rules-csv':
            case 'download-all-rules-csv':
                return await ajaxManager.request('csv_export', { type: 'rules' });

            // === AIÂ≠¶ÁøíÁ≥ªÔºàÂÆüË£ÖÊ∏à„ÅøÔºâ ===
            case 'add-text-to-learning':
            case 'execute-integrated-ai-learning':
                return await handleAILearning(elementData);

            // === ÂèñÂºïÁÆ°ÁêÜÁ≥ªÔºàÂÆüË£ÖÊ∏à„ÅøÔºâ ===
            case 'view-transaction-details':
                return await handleViewTransaction(elementData);
                
            case 'delete-approved-transaction':
                return await handleDeleteTransaction(elementData);
                
            case 'bulk-approve-transactions':
                return await ajaxManager.request('batch_approve');

            // === „Éá„Éº„ÇøÈÅ∏ÊäûÁ≥ªÔºàÂÆüË£ÖÊ∏à„ÅøÔºâ ===
            case 'select-all-imported-data':
                return handleSelectAllData();
                
            case 'select-by-date-range':
                const startDate = elementData.startDate;
                const endDate = elementData.endDate;
                if (!startDate || !endDate) {
                    throw new Error('ÈñãÂßãÊó•„Å®ÁµÇ‰∫ÜÊó•„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                }
                elementData = { start_date: startDate, end_date: endDate };
                return await ajaxManager.request('select_by_date_range', elementData);
                
            case 'select-by-source':
                return handleSelectBySource(elementData);
                
            case 'delete-selected-data':
                return await handleDeleteSelectedData();
                
            case 'delete-data-item':
                const itemId = elementData.itemId;
                if (!itemId) {
                    throw new Error('„Éá„Éº„ÇøID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
                }
                elementData = { item_id: itemId };
                return await ajaxManager.request('delete_data_item', elementData);

            // === „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„ÉóÁ≥ªÔºàÂÆüË£ÖÊ∏à„ÅøÔºâ ===
            case 'execute-full-backup':
            case 'create-manual-backup':
                return await ajaxManager.request('create_backup');

            // === „É¨„Éù„Éº„ÉàÁîüÊàêÁ≥ªÔºàÂÆüË£ÖÊ∏à„ÅøÔºâ ===
            case 'generate-advanced-report':
                return await handleGenerateReport(elementData);

            // === „É´„Éº„É´ÁÆ°ÁêÜÁ≥ªÔºàÂ∞ÜÊù•ÂÆüË£Ö‰∫àÂÆöÔºâ ===
            case 'create-new-rule':
            case 'save-uploaded-rules-as-database':
                console.log(`üìù „É´„Éº„É´ÁÆ°ÁêÜ„Ç¢„ÇØ„Ç∑„Éß„É≥ [${action}] - AjaxÈÄö‰ø°„ÅÆ„ÅøÂÆüË°å`);
                return await ajaxManager.request(action, elementData);
                
            case 'edit-saved-rule':
                // data-rule-idÂ±ûÊÄß„Åã„Çâ„É´„Éº„É´ID„ÇíÂèñÂæó
                const ruleId = element.getAttribute('data-rule-id');
                
                if (!ruleId) {
                    throw new Error('„É´„Éº„É´ID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
                }
                
                elementData = { rule_id: ruleId };
                return await ajaxManager.request(action, elementData);
                
            // CSVÁÆ°ÁêÜÁ≥ªÔºàÂ∞ÜÊù•ÂÆüË£Ö‰∫àÂÆöÔºâ
            case 'download-pending-csv':
            case 'download-pending-transactions-csv':
            case 'rules-csv-upload':
            case 'approval-csv-upload':
                console.log(`üìÑ CSVÁÆ°ÁêÜ„Ç¢„ÇØ„Ç∑„Éß„É≥ [${action}] - AjaxÈÄö‰ø°„ÅÆ„ÅøÂÆüË°å`);
                return await ajaxManager.request(action, elementData);
                
            // AIÂ±•Ê≠¥ÁÆ°ÁêÜÁ≥ªÔºàÂ∞ÜÊù•ÂÆüË£Ö‰∫àÂÆöÔºâ
            case 'refresh-ai-history':
            case 'load-more-sessions':
                console.log(`ü§ñ AIÂ±•Ê≠¥ÁÆ°ÁêÜ„Ç¢„ÇØ„Ç∑„Éß„É≥ [${action}] - AjaxÈÄö‰ø°„ÅÆ„ÅøÂÆüË°å`);
                return await ajaxManager.request(action, elementData);

            // „Éá„Éï„Ç©„É´„ÉàÔºàÂøµ„ÅÆ„Åü„ÇÅÔºâ
            default:
                console.log(`üîÑ Ê±éÁî®„Ç¢„ÇØ„Ç∑„Éß„É≥ [${action}] - AjaxÈÄö‰ø°ÂÆüË°å`);
                return await ajaxManager.request(action, elementData);
        }
    }

    // =====================================
    // üîß ÂÄãÂà•„Ç¢„ÇØ„Ç∑„Éß„É≥Âá¶ÁêÜÈñ¢Êï∞ÔºàÊó¢Â≠òÂÆüË£Ö‰øùÊåÅÔºâ
    // =====================================

    /**
     * MF„Ç§„É≥„Éù„Éº„ÉàÂá¶ÁêÜ
     */
    async function handleMFImport(data) {
        const startDate = document.getElementById('mfStartDate')?.value;
        const endDate = document.getElementById('mfEndDate')?.value;
        const purpose = document.getElementById('mfPurpose')?.value;
        
        return await ajaxManager.request('mf_import', {
            start_date: startDate,
            end_date: endDate,
            purpose: purpose || 'processing'
        });
    }

    /**
     * CSV„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂá¶ÁêÜ
     */
    async function handleCSVUpload(data) {
        const fileInput = document.getElementById('csvFileInput');
        const file = fileInput?.files[0];
        
        if (!file) {
            throw new Error('CSV„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        }
        
        return await ajaxManager.request('csv_upload', { file: file });
    }

    /**
     * AIÂ≠¶ÁøíÂá¶ÁêÜ
     */
    async function handleAILearning(data) {
        const learningText = document.getElementById('aiTextInput')?.value;
        const learningMode = document.getElementById('learningMode')?.value;
        
        return await ajaxManager.request('ai_learn', {
            learning_text: learningText,
            learning_mode: learningMode || 'incremental'
        });
    }

    /**
     * ÂèñÂºïË©≥Á¥∞Ë°®Á§∫
     */
    async function handleViewTransaction(data) {
        const transactionId = data.transactionId || data.itemId;
        if (!transactionId) {
            throw new Error('ÂèñÂºïID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        }
        
        const result = await ajaxManager.request('get_transaction_details', {
            transaction_id: transactionId
        });
        
        if (result.success) {
            showTransactionModal(result.data);
        }
        
        return result;
    }

    /**
     * ÂèñÂºïÂâäÈô§Âá¶ÁêÜ
     */
    async function handleDeleteTransaction(data) {
        const transactionId = data.transactionId || data.itemId;
        if (!transactionId) {
            throw new Error('ÂèñÂºïID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        }
        
        if (!confirm('„Åì„ÅÆÂèñÂºï„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü')) {
            return { success: false, message: '„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü' };
        }
        
        return await ajaxManager.request('delete_transaction', {
            transaction_id: transactionId
        });
    }

    /**
     * „É¨„Éù„Éº„ÉàÁîüÊàê
     */
    async function handleGenerateReport(data) {
        const reportType = document.getElementById('reportType')?.value;
        const reportFormat = document.getElementById('reportFormat')?.value;
        const startDate = document.getElementById('reportStartDate')?.value;
        const endDate = document.getElementById('reportEndDate')?.value;
        
        return await ajaxManager.request('generate_report', {
            report_type: reportType || 'monthly_summary',
            format: reportFormat || 'pdf',
            start_date: startDate,
            end_date: endDate
        });
    }

    /**
     * ÂÖ®„Éá„Éº„ÇøÈÅ∏Êäû
     */
    function handleSelectAllData() {
        const checkboxes = document.querySelectorAll('.kicho__data-checkbox');
        const allChecked = Array.from(checkboxes).every(cb => cb.checked);
        
        checkboxes.forEach(checkbox => {
            checkbox.checked = !allChecked;
        });
        
        updateSelectedDataCount();
        return { success: true, message: `ÂÖ®„Éá„Éº„Çø„Çí${allChecked ? 'Ëß£Èô§' : 'ÈÅ∏Êäû'}„Åó„Åæ„Åó„Åü` };
    }

    /**
     * „ÇΩ„Éº„ÇπÂà•ÈÅ∏Êäû
     */
    function handleSelectBySource(data) {
        const source = data.source;
        if (!source) return;
        
        const sourceItems = document.querySelectorAll(`[data-source="${source}"] .kicho__data-checkbox`);
        sourceItems.forEach(checkbox => {
            checkbox.checked = true;
        });
        
        updateSelectedDataCount();
        return { success: true, message: `${source}„Éá„Éº„Çø„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü` };
    }

    /**
     * ÈÅ∏Êäû„Éá„Éº„ÇøÂâäÈô§
     */
    async function handleDeleteSelectedData() {
        const selectedItems = document.querySelectorAll('.kicho__data-checkbox:checked');
        if (selectedItems.length === 0) {
            throw new Error('ÂâäÈô§„Åô„Çã„Éá„Éº„Çø„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        }
        
        if (!confirm(`ÈÅ∏Êäû„Åó„Åü${selectedItems.length}‰ª∂„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü`)) {
            return { success: false, message: '„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü' };
        }
        
        const itemIds = Array.from(selectedItems).map(item => 
            item.closest('[data-item-id]')?.getAttribute('data-item-id')
        ).filter(id => id);
        
        return await ajaxManager.request('delete_multiple_data', {
            item_ids: itemIds
        });
    }

    /**
     * ‰øùÂ≠òÊ∏à„Åø„É´„Éº„É´ÂâäÈô§Âá¶ÁêÜ
     */
    async function handleDeleteSavedRule(data) {
        const ruleId = data.ruleId || data.itemId;
        if (!ruleId) {
            throw new Error('„É´„Éº„É´ID„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        }
        
        if (!confirm('„Åì„ÅÆ„É´„Éº„É´„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü')) {
            return { success: false, message: '„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü' };
        }
        
        return await ajaxManager.request('delete_saved_rule', {
            rule_id: ruleId
        });
    }

    /**
     * Ëá™ÂãïÊõ¥Êñ∞Âàá„ÇäÊõø„Åà
     */
    function handleToggleAutoRefresh() {
        const autoRefreshEnabled = !window.kichoAutoRefreshEnabled;
        window.kichoAutoRefreshEnabled = autoRefreshEnabled;
        
        if (autoRefreshEnabled) {
            window.kichoAutoRefreshTimer = setInterval(() => {
                console.log('üîÑ Ëá™ÂãïÊõ¥Êñ∞ÂÆüË°å');
                updateLastUpdateTime();
                // ÂøÖË¶Å„Å´Âøú„Åò„Å¶„Éá„Éº„ÇøÊõ¥Êñ∞Âá¶ÁêÜ„ÇíËøΩÂä†
            }, 30000); // 30ÁßíÈñìÈöî
            showNotification('Ëá™ÂãïÊõ¥Êñ∞„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü', 'success');
        } else {
            if (window.kichoAutoRefreshTimer) {
                clearInterval(window.kichoAutoRefreshTimer);
                window.kichoAutoRefreshTimer = null;
            }
            showNotification('Ëá™ÂãïÊõ¥Êñ∞„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü', 'info');
        }
        
        return { success: true, message: `Ëá™ÂãïÊõ¥Êñ∞„Çí${autoRefreshEnabled ? 'ÈñãÂßã' : 'ÂÅúÊ≠¢'}„Åó„Åæ„Åó„Åü` };
    }

    // =====================================
    // üé® UIÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
    // =====================================

    /**
     * ÈÄöÁü•Ë°®Á§∫
     */
    function showNotification(message, type = 'info', duration = 3000) {
        let alertElement;
        
        if (type === 'success') {
            alertElement = document.getElementById('successAlert');
            const messageElement = document.getElementById('successMessage');
            if (messageElement) messageElement.textContent = message;
        } else if (type === 'error') {
            alertElement = document.getElementById('errorAlert');
            const messageElement = document.getElementById('errorMessage');
            if (messageElement) messageElement.textContent = message;
        }
        
        if (alertElement) {
            alertElement.style.display = 'flex';
            setTimeout(() => {
                alertElement.style.display = 'none';
            }, duration);
        } else {
            // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈÄöÁü•
            createFallbackNotification(message, type, duration);
        }
    }

    /**
     * „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÈÄöÁü•‰ΩúÊàê
     */
    function createFallbackNotification(message, type, duration) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 10000;
            padding: 15px 20px; border-radius: 5px; color: white; font-weight: bold;
            background: ${type === 'error' ? '#ef4444' : type === 'success' ? '#10b981' : '#3b82f6'};
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateX(100%); transition: transform 0.3s ease;
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        requestAnimationFrame(() => {
            notification.style.transform = 'translateX(0)';
        });
        
        // Ëá™ÂãïÂâäÈô§
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, duration);
    }

    /**
     * Ë¶ÅÁ¥†„ÅÆ„É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
     */
    function showElementLoading(element) {
        if (!element) return;
        
        element.disabled = true;
        element.style.position = 'relative';
        element.style.pointerEvents = 'none';
        
        const spinner = document.createElement('div');
        spinner.className = 'kicho-spinner';
        spinner.style.cssText = `
            position: absolute; top: 50%; left: 50%;
            transform: translate(-50%, -50%);
            width: 20px; height: 20px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        `;
        
        // CSS „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ËøΩÂä†
        if (!document.getElementById('kicho-spinner-style')) {
            const style = document.createElement('style');
            style.id = 'kicho-spinner-style';
            style.textContent = `
                @keyframes spin {
                    0% { transform: translate(-50%, -50%) rotate(0deg); }
                    100% { transform: translate(-50%, -50%) rotate(360deg); }
                }
            `;
            document.head.appendChild(style);
        }
        
        element.appendChild(spinner);
    }

    /**
     * Ë¶ÅÁ¥†„ÅÆ„É≠„Éº„Éá„Ç£„É≥„Ç∞Ëß£Èô§
     */
    function hideElementLoading(element) {
        if (!element) return;
        
        element.disabled = false;
        element.style.pointerEvents = '';
        
        const spinner = element.querySelector('.kicho-spinner');
        if (spinner) {
            spinner.remove();
        }
    }

    /**
     * Ë¶ÅÁ¥†„Åã„Çâ„Éá„Éº„ÇøÂ±ûÊÄßÊäΩÂá∫
     */
    function extractElementData(element) {
    const data = {};
        if (!element) return data;
        
        Array.from(element.attributes).forEach(attr => {
            if (attr.name.startsWith('data-') && attr.name !== 'data-action') {
                const key = attr.name.replace('data-', '').replace(/-([a-z])/g, (g) => g[1].toUpperCase());
        data[key] = attr.value;
      }
    });
        
    return data;
    }

    /**
     * ÈÅ∏Êäû„Éá„Éº„ÇøÊï∞Êõ¥Êñ∞
     */
    function updateSelectedDataCount() {
        const selectedCount = document.querySelectorAll('.kicho__data-checkbox:checked').length;
        const countElement = document.getElementById('selectedDataCount');
        if (countElement) {
            countElement.textContent = selectedCount;
        }
    }

    /**
     * ÊúÄÁµÇÊõ¥Êñ∞ÊôÇÂàªÊõ¥Êñ∞
     */
    function updateLastUpdateTime() {
        const timeElement = document.getElementById('lastUpdateTime');
        if (timeElement) {
            timeElement.textContent = new Date().toLocaleTimeString('ja-JP');
        }
    }

    /**
     * ÂèñÂºïË©≥Á¥∞„É¢„Éº„ÉÄ„É´Ë°®Á§∫
     */
    function showTransactionModal(transactionData) {
        // „É¢„Éº„ÉÄ„É´ÂÆüË£ÖÔºàÁ∞°Áï•ÁâàÔºâ
        console.log('ÂèñÂºïË©≥Á¥∞Ë°®Á§∫:', transactionData);
        showNotification('ÂèñÂºïË©≥Á¥∞„ÇíË°®Á§∫„Åó„Åæ„Åó„Åü', 'info');
    }

    // „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„ÇπÈÅ∏ÊäûÊï∞Êõ¥Êñ∞
    function updateSelectedCount() {
        const checkedBoxes = document.querySelectorAll('.kicho__data-checkbox:checked');
        const countElement = document.getElementById('selectedDataCount');
        
        if (countElement) {
            countElement.textContent = checkedBoxes.length;
        }
        
        // Â≠¶Áøí„Éá„Éº„Çø„Ç´„Ç¶„É≥„ÉàÊõ¥Êñ∞
        const learningCountElement = document.getElementById('learningDataCount');
        if (learningCountElement) {
            learningCountElement.textContent = `${checkedBoxes.length}‰ª∂ÈÅ∏Êäû‰∏≠`;
        }
        
        // Êé®ÂÆöÂÄ§Êõ¥Êñ∞
        const estimatedRules = Math.floor(checkedBoxes.length * 2.5);
        const estimatedTime = checkedBoxes.length > 0 ? `${Math.ceil(checkedBoxes.length * 0.8)}ÂàÜ` : 'Êú™ÈÅ∏Êäû';
        
        const rulesElement = document.getElementById('estimatedRules');
        const timeElement = document.getElementById('estimatedTime');
        
        if (rulesElement) rulesElement.textContent = `${estimatedRules}‰ª∂`;
        if (timeElement) timeElement.textContent = estimatedTime;
    }

    // =====================================
    // üéØ NAGANO3ÂêçÂâçÁ©∫ÈñìÁôªÈå≤
    // =====================================
    window.NAGANO3 = window.NAGANO3 || {};
    window.NAGANO3.kicho = {
        version: '2.1.0-warning-free',
        executeAction: executeKichoAction,
        ajaxManager: ajaxManager,
        showNotification: showNotification,
        updateLastUpdateTime: updateLastUpdateTime,
        initialized: true
    };

    // =====================================
    // üöÄ ÂàùÊúüÂåñÂá¶ÁêÜ
    // =====================================
    document.addEventListener('DOMContentLoaded', function() {
        console.log('üìÑ DOMÊ∫ñÂÇôÂÆå‰∫Ü - KICHOË≠¶Âëä‰øÆÊ≠£ÁâàÂàùÊúüÂåñ');
        
        if (IS_KICHO_PAGE) {
            console.log('‚úÖ KICHO„Éö„Éº„Ç∏Ê§úÂá∫ - Ê©üËÉΩÊúâÂäπÂåñ');
            
            // ÂàùÊúüË®≠ÂÆö
            updateLastUpdateTime();
            updateSelectedDataCount();
            
            // ESC„Ç≠„Éº„Åß„Ç¢„É©„Éº„Éà„ÇíÈñâ„Åò„Çã
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    const alerts = document.querySelectorAll('.alert');
                    alerts.forEach(alert => {
                        alert.style.display = 'none';
                    });
                }
            });
            
            console.log('‚úÖ KICHO.js ÂàùÊúüÂåñÂÆå‰∫ÜÔºàË≠¶Âëä‰øÆÊ≠£ÁâàÔºâ');
            showNotification('Ë®òÂ∏≥Ëá™ÂãïÂåñ„ÉÑ„Éº„É´„ÅåËµ∑Âãï„Åó„Åæ„Åó„Åü', 'success');
} else {
            console.log('‚ÑπÔ∏è ÈùûKICHO„Éö„Éº„Ç∏ - Ê©üËÉΩÂæÖÊ©ü‰∏≠');
        }
    });

    // „Éö„Éº„Ç∏„Ç¢„É≥„É≠„Éº„ÉâÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    window.addEventListener('beforeunload', function() {
        if (window.kichoAutoRefreshTimer) {
            clearInterval(window.kichoAutoRefreshTimer);
        }
        console.log('üßπ KICHO.js „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂÆå‰∫Ü');
    });

    console.log('üéØ KICHO.js (Ë≠¶Âëä‰øÆÊ≠£Áâà) Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
})(); // Âç≥Â∫ßÂÆüË°åÈñ¢Êï∞„ÅßÂÖ®‰Ωì„Çí„É©„ÉÉ„Éó