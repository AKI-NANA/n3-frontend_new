
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * üéØ KichoË®òÂ∏≥„ÉÑ„Éº„É´ UIÂèØË¶ñÂåñÊõ¥Êñ∞„Ç∑„Çπ„ÉÜ„É† - DOMÁµ±‰∏Ä‰øÆÊ≠£Áâà
 * common/js/pages/kicho_ui_visual_fixed.js
 * 
 * ‰øÆÊ≠£ÂÜÖÂÆπ:
 * ‚úÖ Ajax URL„Éë„Çπ‰øÆÊ≠£ÂÆå‰∫Ü (./kicho_ajax_handler_postgresql.php)
 * ‚úÖ DOMË¶ÅÁ¥†ÂèÇÁÖß„ÇíÊó¢Â≠òHTML„ÇØ„É©„ÇπÂêç„Å´Áµ±‰∏Ä
 * ‚úÖ CSS„ÇØ„É©„ÇπÂêç„Éô„Éº„Çπ„ÅÆË¶ÅÁ¥†ÂèñÂæó„Å´Â§âÊõ¥
 * ‚úÖ dashboard__stat-card__value „Éë„Çø„Éº„É≥„Å´ÂØæÂøú
 * 
 * ÁõÆÁöÑ: UI„ÅÆÂ§âÂåñ„ÇíÁõÆË¶ñ„ÅßÁ¢∫Ë™ç„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã
 * - „É™„Ç¢„É´„Çø„Ç§„É†Áµ±Ë®àÊõ¥Êñ∞
 * - ÂèñÂæó„Éá„Éº„Çø„ÅÆÂç≥Â∫ßË°®Á§∫
 * - ÂâäÈô§Êìç‰Ωú„ÅÆË¶ñË¶öÁöÑ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
 * - MFÂèñÂæó„ÅÆÈÄ≤Ë°åÁä∂Ê≥ÅË°®Á§∫
 */

// =====================================
// üéØ UIÂèØË¶ñÂåñÊõ¥Êñ∞„Éû„Éç„Éº„Ç∏„É£„ÉºÔºàDOMÁµ±‰∏ÄÁâàÔºâ
// =====================================

class KichoUIVisualManager {
    constructor() {
        // Ajax URL„Éë„Çπ‰øÆÊ≠£Ê∏à„ÅøÔºàÂºï„ÅçÁ∂ô„ÅéÂÆå‰∫ÜÔºâ
        this.ajaxUrl = './kicho_ajax_handler_postgresql.php';
        this.isAutoRefreshEnabled = false;
        this.refreshInterval = null;
        this.notificationQueue = [];
        
        // DOMË¶ÅÁ¥†„Éû„ÉÉ„Éî„É≥„Ç∞ÔºàÊó¢Â≠òHTML„ÇØ„É©„ÇπÂêçÂØæÂøúÔºâ
        this.domSelectors = {
            // Áµ±Ë®à„Ç´„Éº„ÉâÂÄ§ÔºàË§áÊï∞„Éë„Çø„Éº„É≥ÂØæÂøúÔºâ
            statistics: {
                pending: '.dashboard__stat-card[data-stat="pending"] .dashboard__stat-card__value, #pending-count, [data-pending-count], .pending-count',
                confirmed: '.dashboard__stat-card[data-stat="confirmed"] .dashboard__stat-card__value, #confirmed-rules, [data-confirmed-rules], .confirmed-rules',
                automation: '.dashboard__stat-card[data-stat="automation"] .dashboard__stat-card__value, #automation-rate, [data-automation-rate], .automation-rate',
                errors: '.dashboard__stat-card[data-stat="errors"] .dashboard__stat-card__value, #error-count, [data-error-count], .error-count',
                monthly: '.dashboard__stat-card[data-stat="monthly"] .dashboard__stat-card__value, #monthly-count, [data-monthly-count], .monthly-count'
            },
            // „Éá„Éº„Çø„É™„Çπ„Éà
            lists: {
                importedData: '.kicho__data-list, #importedDataList, [data-list="imported-data"], .imported-data-list',
                aiSessions: '.kicho__session-list, #aiSessionList, [data-list="ai-sessions"], .ai-session-list'
            },
            // „Ç´„Ç¶„É≥„Çø„ÉºË°®Á§∫
            counters: {
                mfData: '[data-count="mf"], .mf-data-count, #mfDataCount',
                csvData: '[data-count="csv"], .csv-data-count, #csvDataCount',
                textData: '[data-count="text"], .text-data-count, #textDataCount',
                selectedData: '[data-count="selected"], .selected-data-count, #selectedDataCount'
            },
            // ÊôÇÂàªË°®Á§∫
            timestamps: {
                lastUpdate: '[data-timestamp="last-update"], .last-update-time, #lastUpdateTime'
            },
            // „Éá„Éº„Çø„ÇΩ„Éº„ÇπË°®Á§∫
            dataSource: '[data-info="data-source"], .data-source-indicator, #dataSource'
        };
        
        this.init();
    }
    
    init() {
        this.bindEventHandlers();
        this.initializeNotificationSystem();
        this.loadInitialData();
        this.startPeriodicUpdate();
        
        console.log('üéØ Kicho UIÂèØË¶ñÂåñ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫ÜÔºàDOMÁµ±‰∏ÄÁâàÔºâ');
    }
    
    // =====================================
    // üîÑ „Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„ÉºË®≠ÂÆö
    // =====================================
    
    bindEventHandlers() {
        // data-actionÂ±ûÊÄß„ÇíÊåÅ„Å§ÂÖ®„Éú„Çø„É≥„Å´„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºËøΩÂä†
        document.addEventListener('click', (e) => {
            const button = e.target.closest('[data-action]');
            if (button) {
                e.preventDefault();
                const action = button.getAttribute('data-action');
                this.handleAction(action, button);
            }
        });
        
        // ÂâäÈô§„Éú„Çø„É≥Â∞ÇÁî®„Éè„É≥„Éâ„É©„Éº
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-action="delete-data-item"]')) {
                const button = e.target.closest('[data-action="delete-data-item"]');
                const itemId = button.getAttribute('data-item-id');
                this.handleDeleteItem(itemId, button);
            }
        });
        
        // „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„ÇπÈÅ∏ÊäûÂ§âÊõ¥
        document.addEventListener('change', (e) => {
            if (e.target.matches('[data-checkbox="data-item"], .kicho__data-checkbox')) {
                this.updateSelectedCount();
            }
        });
    }
    
    // =====================================
    // üé¨ „Ç¢„ÇØ„Ç∑„Éß„É≥Âá¶ÁêÜ„Ç∑„Çπ„ÉÜ„É†
    // =====================================
    
    async handleAction(action, button) {
        const originalText = button.innerHTML;
        
        try {
            // „Éú„Çø„É≥Áä∂ÊÖã„Çí„ÄåÂá¶ÁêÜ‰∏≠„Äç„Å´Â§âÊõ¥
            this.setButtonLoading(button, true);
            
            // „Ç¢„ÇØ„Ç∑„Éß„É≥Âà•Âá¶ÁêÜ
            switch (action) {
                case 'execute-mf-import':
                    await this.executeMFImport(button);
                    break;
                case 'refresh-all':
                    await this.refreshAllData(button);
                    break;
                case 'execute-integrated-ai-learning':
                    await this.executeAILearning(button);
                    break;
                case 'toggle-auto-refresh':
                    await this.toggleAutoRefresh(button);
                    break;
                case 'refresh-statistics':
                    await this.refreshStatistics(button);
                    break;
                default:
                    await this.handleGenericAction(action, button);
            }
            
        } catch (error) {
            console.error(`„Ç¢„ÇØ„Ç∑„Éß„É≥„Ç®„É©„Éº [${action}]:`, error);
            this.showNotification(`„Ç®„É©„Éº: ${error.message}`, 'error');
        } finally {
            // „Éú„Çø„É≥Áä∂ÊÖã„ÇíÂÖÉ„Å´Êàª„Åô
            this.setButtonLoading(button, false);
            button.innerHTML = originalText;
        }
    }
    
    // =====================================
    // üîÑ ÂÖ∑‰ΩìÁöÑ„Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË£Ö
    // =====================================
    
    async executeMFImport(button) {
        this.showNotification('MF„ÇØ„É©„Ç¶„Éâ„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó‰∏≠...', 'info');
        
        const response = await this.makeAjaxRequest('execute-mf-import', {});
        
        if (response.success) {
            // ÊàêÂäüÈÄöÁü•
            this.showNotification(
                `‚úÖ ${response.message} (${response.imported_count}‰ª∂)`,
                'success'
            );
            
            // UIÂç≥Â∫ßÊõ¥Êñ∞
            this.updateStatistics(response.statistics);
            this.addNewImportData({
                id: 'mf-' + response.session_id,
                type: 'mf',
                name: response.file_name,
                count: response.imported_count,
                details: `ÂèñÂæóÊó•: ${response.timestamp} | Ë®òÂ∏≥Âá¶ÁêÜÁî®`,
                timestamp: response.timestamp
            });
            
            // Ë¶ñË¶öÁöÑÂäπÊûú
            this.highlightNewData('mf');
            
        } else {
            this.showNotification(`‚ùå ${response.message}`, 'error');
        }
    }
    
    async refreshAllData(button) {
        this.showNotification('ÂÖ®„Éá„Éº„Çø„ÇíÊõ¥Êñ∞‰∏≠...', 'info');
        
        const response = await this.makeAjaxRequest('refresh-all', {});
        
        if (response.success) {
            // Áµ±Ë®à„Éá„Éº„ÇøÊõ¥Êñ∞
            this.updateStatistics(response.statistics);
            
            // „Ç§„É≥„Éù„Éº„Éà„Éá„Éº„ÇøÊõ¥Êñ∞
            this.updateImportDataList(response.import_data);
            
            // Êõ¥Êñ∞ÊôÇÂàªË°®Á§∫
            this.updateLastUpdateTime(response.timestamp);
            
            this.showNotification('‚úÖ ÂÖ®„Éá„Éº„ÇøÊõ¥Êñ∞ÂÆå‰∫Ü', 'success');
        } else {
            this.showNotification('‚ùå „Éá„Éº„ÇøÊõ¥Êñ∞„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', 'error');
        }
    }
    
    async executeAILearning(button) {
        const textInput = document.querySelector('#aiTextInput, [data-input="ai-text"]');
        const learningText = textInput ? textInput.value : '„Éá„Éï„Ç©„É´„ÉàÂ≠¶Áøí„ÉÜ„Ç≠„Çπ„Éà';
        
        this.showNotification('AIÂ≠¶Áøí„ÇíÂÆüË°å‰∏≠...', 'info');
        
        const response = await this.makeAjaxRequest('execute-integrated-ai-learning', {
            learning_text: learningText
        });
        
        if (response.success) {
            this.showNotification(
                `ü§ñ ${response.message}`,
                'success'
            );
            
            // Áµ±Ë®àÊõ¥Êñ∞
            this.updateStatistics(response.statistics);
            
            // AIÂ≠¶ÁøíÂ±•Ê≠¥„Å´ËøΩÂä†
            this.addAILearningHistory({
                datetime: response.timestamp,
                status: 'completed',
                generated_rules: response.generated_rules
            });
            
        } else {
            this.showNotification(`‚ùå AIÂ≠¶Áøí„Ç®„É©„Éº: ${response.message}`, 'error');
        }
    }
    
    async toggleAutoRefresh(button) {
        const response = await this.makeAjaxRequest('toggle-auto-refresh', {});
        
        if (response.success) {
            this.isAutoRefreshEnabled = response.auto_refresh_enabled;
            
            // „Éú„Çø„É≥„ÉÜ„Ç≠„Çπ„ÉàÊõ¥Êñ∞
            const icon = button.querySelector('i');
            const text = button.querySelector('span:not(.icon)') || button.lastChild;
            
            if (this.isAutoRefreshEnabled) {
                icon.className = 'fas fa-pause';
                if (text) text.textContent = 'Ëá™ÂãïÊõ¥Êñ∞ÂÅúÊ≠¢';
                button.classList.add('active');
                this.startAutoRefresh();
            } else {
                icon.className = 'fas fa-play';
                if (text) text.textContent = 'Ëá™ÂãïÊõ¥Êñ∞ÈñãÂßã';
                button.classList.remove('active');
                this.stopAutoRefresh();
            }
            
            this.showNotification(response.message, 'success');
        }
    }
    
    async refreshStatistics(button) {
        const response = await this.makeAjaxRequest('refresh-statistics', {});
        
        if (response.success) {
            this.updateStatistics(response.statistics);
            this.showNotification('üìä Áµ±Ë®à„Éá„Éº„Çø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü', 'success');
        }
    }
    
    async handleGenericAction(action, button) {
        // „Åù„ÅÆ‰ªñ„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥Ê±éÁî®Âá¶ÁêÜ
        const response = await this.makeAjaxRequest(action, {});
        
        if (response.success) {
            this.showNotification(`‚úÖ ${response.message || '„Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°åÂÆå‰∫Ü'}`, 'success');
        } else {
            this.showNotification(`‚ùå ${response.message || '„Ç¢„ÇØ„Ç∑„Éß„É≥ÂÆüË°åÂ§±Êïó'}`, 'error');
        }
    }
    
    // =====================================
    // üóëÔ∏è ÂâäÈô§Âá¶ÁêÜ
    // =====================================
    
    async handleDeleteItem(itemId, button) {
        if (!confirm('„Åì„ÅÆ„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
            return;
        }
        
        const originalText = button.innerHTML;
        this.setButtonLoading(button, true);
        
        try {
            const response = await this.makeAjaxRequest('delete-data-item', {
                item_id: itemId
            });
            
            if (response.success) {
                // DOMË¶ÅÁ¥†„ÇíË¶ñË¶öÁöÑÂäπÊûú‰ªò„Åç„ÅßÂâäÈô§
                const dataItem = button.closest('.kicho__data-item, .dashboard__item, [data-item]');
                if (dataItem) {
                    dataItem.style.transition = 'all 0.3s ease';
                    dataItem.style.opacity = '0';
                    dataItem.style.transform = 'translateX(-20px)';
                    
                    setTimeout(() => {
                        dataItem.remove();
                    }, 300);
                }
                
                // Áµ±Ë®à„Éá„Éº„ÇøÊõ¥Êñ∞
                this.updateStatistics(response.statistics);
                
                // „Ç´„Ç¶„É≥„Çø„ÉºÊõ¥Êñ∞
                this.updateDataCounters();
                
                this.showNotification('üóëÔ∏è „Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü', 'success');
                
            } else {
                this.showNotification(`‚ùå ${response.message}`, 'error');
            }
            
        } catch (error) {
            this.showNotification(`ÂâäÈô§„Ç®„É©„Éº: ${error.message}`, 'error');
        } finally {
            this.setButtonLoading(button, false);
            button.innerHTML = originalText;
        }
    }
    
    // =====================================
    // üìä UIÊõ¥Êñ∞„É°„ÇΩ„ÉÉ„ÉâÔºàDOMÁµ±‰∏ÄÁâàÔºâ
    // =====================================
    
    updateStatistics(stats) {
        // Áµ±Ë®à„Éá„Éº„Çø„ÅÆÂ≠òÂú®Á¢∫Ë™ç„Å®„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
        if (!stats || typeof stats !== 'object') {
            console.warn('Áµ±Ë®à„Éá„Éº„Çø„ÅåÁÑ°Âäπ„Åß„Åô:', stats);
            stats = {
                pending_count: 0,
                confirmed_rules: 0,
                automation_rate: 0,
                error_count: 0,
                monthly_count: 0,
                data_source: 'fallback'
            };
        }
        
        console.log('üìä Áµ±Ë®à„Éá„Éº„ÇøÊõ¥Êñ∞ÈñãÂßã:', stats);
        
        // DOMË¶ÅÁ¥†„ÅÆÂ≠òÂú®Á¢∫Ë™ç
        console.log('üîç DOMË¶ÅÁ¥†Â≠òÂú®Á¢∫Ë™ç:');
        Object.entries(this.domSelectors.statistics).forEach(([key, selector]) => {
            const elements = document.querySelectorAll(selector);
            console.log(`  ${key}: „Çª„É¨„ÇØ„Çø„Éº "${selector}" ‚Üí ${elements.length}ÂÄã„ÅÆË¶ÅÁ¥†`);
            elements.forEach((el, i) => {
                console.log(`    [${i}]:`, el);
            });
        });
        
        // ÂÖ®ÈÉ®„ÅÆ.dashboard__stat-cardË¶ÅÁ¥†„ÇíÊé¢„Åô
        const allStatCards = document.querySelectorAll('.dashboard__stat-card');
        console.log(`üìä ÂÖ®.dashboard__stat-cardË¶ÅÁ¥†: ${allStatCards.length}ÂÄã`);
        allStatCards.forEach((card, i) => {
            const dataAttr = card.getAttribute('data-stat');
            const valueEl = card.querySelector('.dashboard__stat-card__value');
            console.log(`  [${i}]: data-stat="${dataAttr}", valueË¶ÅÁ¥†:`, valueEl);
        });
        
        // Áµ±Ë®à„Ç´„Éº„ÉâÊõ¥Êñ∞ÔºàË§áÊï∞„Çª„É¨„ÇØ„Çø„ÉºÂØæÂøúÔºâ
        const statMappings = [
            { selectors: [this.domSelectors.statistics.pending], value: stats.pending_count || 0, name: 'pending' },
            { selectors: [this.domSelectors.statistics.confirmed], value: stats.confirmed_rules || 0, name: 'confirmed' },
            { selectors: [this.domSelectors.statistics.automation], value: (stats.automation_rate || 0) + '%', name: 'automation' },
            { selectors: [this.domSelectors.statistics.errors], value: stats.error_count || 0, name: 'errors' },
            { selectors: [this.domSelectors.statistics.monthly], value: (stats.monthly_count || 0).toLocaleString(), name: 'monthly' }
        ];
        
        let updateCount = 0;
        statMappings.forEach(mapping => {
            const allSelectors = mapping.selectors[0].split(', ');
            let found = false;
            
            allSelectors.forEach(selector => {
                const elements = document.querySelectorAll(selector.trim());
                console.log(`üîÑ ${mapping.name}Êõ¥Êñ∞: „Çª„É¨„ÇØ„Çø„Éº "${selector.trim()}" ‚Üí ${elements.length}ÂÄã„ÅÆË¶ÅÁ¥†, ÂÄ§: ${mapping.value}`);
                
                if (elements.length > 0) {
                    found = true;
                    elements.forEach((element, i) => {
                        if (element) {
                            console.log(`  [${i}] Êõ¥Êñ∞Ââç:`, element.textContent);
                            // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂäπÊûú‰ªò„Åç„ÅßÂÄ§Êõ¥Êñ∞
                            element.style.transition = 'all 0.3s ease';
                            element.style.transform = 'scale(1.1)';
                            element.style.backgroundColor = '#e3f2fd';
                            element.textContent = mapping.value;
                            console.log(`  [${i}] Êõ¥Êñ∞Âæå:`, element.textContent);
                            
                            setTimeout(() => {
                                element.style.transform = 'scale(1)';
                                element.style.backgroundColor = '';
                            }, 300);
                            
                            updateCount++;
                        }
                    });
                }
            });
            
            // Ë¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÂãïÁöÑ‰ΩúÊàê
            if (!found) {
                console.warn(`‚ö†Ô∏è ${mapping.name}Áî®„ÅÆDOMË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÅÂãïÁöÑ‰ΩúÊàê„Åó„Åæ„Åô`);
                this.createMissingStatElement(mapping.name, mapping.value);
                updateCount++;
            }
        });
        
        console.log(`üìä Áµ±Ë®àÊõ¥Êñ∞ÂÆå‰∫Ü: ${updateCount}ÂÄã„ÅÆË¶ÅÁ¥†„ÇíÊõ¥Êñ∞`);
        
        // „Éá„Éº„Çø„ÇΩ„Éº„ÇπË°®Á§∫Êõ¥Êñ∞
        const dataSourceElements = document.querySelectorAll(this.domSelectors.dataSource);
        dataSourceElements.forEach(element => {
            if (element) {
                element.textContent = (stats.data_source || 'unknown').toUpperCase();
            }
        });
        
        console.log('üìä Áµ±Ë®à„Éá„Éº„ÇøÊõ¥Êñ∞ÂÆå‰∫Ü:', stats);
    }
    
    createMissingStatElement(statName, value) {
        // Áµ±Ë®àË°®Á§∫Áî®„ÅÆDOMË¶ÅÁ¥†„ÇíÂãïÁöÑ‰ΩúÊàê
        let container = document.querySelector('.kicho__container, .dashboard__container, main, body');
        if (!container) {
            container = document.body;
        }
        
        // Áµ±Ë®à„Ç≥„É≥„ÉÜ„Éä„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
        let statContainer = document.getElementById('dynamic-stats-container');
        if (!statContainer) {
            statContainer = document.createElement('div');
            statContainer.id = 'dynamic-stats-container';
            statContainer.style.cssText = `
                position: fixed;
                top: 10px;
                left: 10px;
                background: #f8f9fa;
                border: 2px solid #007bff;
                border-radius: 8px;
                padding: 15px;
                z-index: 1000;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                min-width: 200px;
            `;
            
            const title = document.createElement('h3');
            title.textContent = 'üìä KichoÁµ±Ë®à (ÂãïÁöÑ‰ΩúÊàê)';
            title.style.cssText = 'margin: 0 0 10px 0; font-size: 14px; color: #333;';
            statContainer.appendChild(title);
            
            container.appendChild(statContainer);
            console.log('üè† Áµ±Ë®à„Ç≥„É≥„ÉÜ„Éä„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü');
        }
        
        // Áµ±Ë®àÈ†ÖÁõÆ‰ΩúÊàê
        const statElement = document.createElement('div');
        statElement.id = `${statName}-count`;
        statElement.className = `${statName}-count dynamic-stat`;
        statElement.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px 0;
            border-bottom: 1px solid #eee;
            font-size: 13px;
        `;
        
        const label = document.createElement('span');
        label.textContent = this.getStatLabel(statName);
        label.style.color = '#666';
        
        const valueSpan = document.createElement('span');
        valueSpan.textContent = value;
        valueSpan.style.cssText = 'font-weight: bold; color: #007bff; font-size: 14px;';
        
        statElement.appendChild(label);
        statElement.appendChild(valueSpan);
        statContainer.appendChild(statElement);
        
        console.log(`‚ú® ${statName}Áµ±Ë®àË¶ÅÁ¥†„Çí‰ΩúÊàê: ${value}`);
    }
    
    getStatLabel(statName) {
        const labels = {
            'pending': 'ÊâøË™çÂæÖ„Å°',
            'confirmed': 'Á¢∫ÂÆö„É´„Éº„É´', 
            'automation': 'Ëá™ÂãïÂåñÁéá',
            'errors': '„Ç®„É©„Éº‰ª∂Êï∞',
            'monthly': '‰ªäÊúàÂá¶ÁêÜ'
        };
        return labels[statName] || statName;
    }
    
    addNewImportData(data) {
        // „Éá„Éº„Çø„É™„Çπ„ÉàË¶ÅÁ¥†„ÇíÊé¢„ÅôÔºàË§áÊï∞„Éë„Çø„Éº„É≥ÂØæÂøúÔºâ
        const listSelectors = this.domSelectors.lists.importedData.split(', ');
        let importList = null;
        
        for (const selector of listSelectors) {
            importList = document.querySelector(selector);
            if (importList) break;
        }
        
        if (!importList) {
            console.warn('„Ç§„É≥„Éù„Éº„Éà„Éá„Éº„Çø„É™„Çπ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        // Êñ∞„Åó„ÅÑ„Éá„Éº„ÇøÈ†ÖÁõÆ„ÅÆHTMLÁîüÊàê
        const iconClass = data.type === 'mf' ? 'fa-cloud icon--mf' : 
                         (data.type === 'csv' ? 'fa-file-csv icon--csv' : 'fa-brain icon--ai');
        
        const newItem = document.createElement('div');
        newItem.className = 'kicho__data-item dashboard__item';
        newItem.setAttribute('data-source', data.type);
        newItem.setAttribute('data-item-id', data.id);
        newItem.setAttribute('data-item', 'true');
        newItem.style.opacity = '0';
        newItem.style.transform = 'translateY(-20px)';
        
        newItem.innerHTML = `
            <input type="checkbox" class="kicho__data-checkbox" data-checkbox="data-item">
            <div class="kicho__data-info">
                <div class="kicho__data-title">
                    <i class="fas ${iconClass}"></i>
                    <span class="kicho__data-name">${data.name}</span>
                    ${data.count ? `<span class="kicho__data-count">(${data.count}‰ª∂)</span>` : ''}
                </div>
                <div class="kicho__data-details">${data.details}</div>
            </div>
            <button class="kicho__btn kicho__btn--small kicho__btn--danger" data-action="delete-data-item" data-item-id="${data.id}">
                <i class="fas fa-trash"></i>
            </button>
        `;
        
        // „É™„Çπ„Éà„ÅÆÂÖàÈ†≠„Å´ËøΩÂä†
        importList.insertBefore(newItem, importList.firstChild);
        
        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂäπÊûú
        setTimeout(() => {
            newItem.style.transition = 'all 0.3s ease';
            newItem.style.opacity = '1';
            newItem.style.transform = 'translateY(0)';
        }, 50);
        
        // Êñ∞ÁùÄ„Éè„Ç§„É©„Ç§„Éà
        newItem.style.backgroundColor = '#e0f2fe';
        setTimeout(() => {
            newItem.style.backgroundColor = '';
        }, 2000);
    }
    
    updateImportDataList(importData) {
        // „Éá„Éº„Çø„É™„Çπ„ÉàË¶ÅÁ¥†„ÇíÊé¢„Åô
        const listSelectors = this.domSelectors.lists.importedData.split(', ');
        let importList = null;
        
        for (const selector of listSelectors) {
            importList = document.querySelector(selector);
            if (importList) break;
        }
        
        if (!importList || !importData) return;
        
        importList.innerHTML = '';
        
        importData.forEach(item => {
            const type = item.source_type === 'mf_cloud' ? 'mf' : 
                        (item.source_type === 'csv_upload' ? 'csv' : 'text');
            
            this.addNewImportData({
                id: type + '-' + item.id,
                type: type,
                name: item.file_name || 'ÂèñÂºï„Éá„Éº„Çø',
                count: item.record_count,
                details: (item.description || 'ÂèñÂæóÊó•: ' + item.created_at) + ' | Áä∂ÊÖã: ' + item.status
            });
        });
    }
    
    addAILearningHistory(session) {
        // AIÂ±•Ê≠¥„É™„Çπ„ÉàË¶ÅÁ¥†„ÇíÊé¢„Åô
        const listSelectors = this.domSelectors.lists.aiSessions.split(', ');
        let sessionList = null;
        
        for (const selector of listSelectors) {
            sessionList = document.querySelector(selector);
            if (sessionList) break;
        }
        
        if (!sessionList) return;
        
        const newSession = document.createElement('div');
        newSession.className = 'kicho__session-item dashboard__session-item';
        newSession.innerHTML = `
            <span class="kicho__session-datetime">${session.datetime}</span>
            <span class="kicho__session-status--success">ÂÆå‰∫Ü</span>
            ${session.generated_rules ? `<span class="kicho__session-rules">(${session.generated_rules}ÂÄã„É´„Éº„É´ÁîüÊàê)</span>` : ''}
        `;
        
        sessionList.insertBefore(newSession, sessionList.firstChild);
        
        // Êñ∞ÁùÄ„Éè„Ç§„É©„Ç§„Éà
        newSession.style.backgroundColor = '#f0f9ff';
        setTimeout(() => {
            newSession.style.backgroundColor = '';
        }, 2000);
    }
    
    updateSelectedCount() {
        const checkboxes = document.querySelectorAll('[data-checkbox="data-item"]:checked, .kicho__data-checkbox:checked');
        const countSelectors = this.domSelectors.counters.selectedData.split(', ');
        
        countSelectors.forEach(selector => {
            const element = document.querySelector(selector);
            if (element) {
                element.textContent = checkboxes.length;
            }
        });
    }
    
    updateDataCounters() {
        const counters = {
            mf: document.querySelectorAll('[data-source="mf"]').length,
            csv: document.querySelectorAll('[data-source="csv"]').length,
            text: document.querySelectorAll('[data-source="text"]').length
        };
        
        // ÂêÑ„Ç´„Ç¶„É≥„Çø„Éº„ÇíÊõ¥Êñ∞
        Object.entries(counters).forEach(([type, count]) => {
            const selectorKey = type + 'Data';
            if (this.domSelectors.counters[selectorKey]) {
                const selectors = this.domSelectors.counters[selectorKey].split(', ');
                selectors.forEach(selector => {
                    const element = document.querySelector(selector);
                    if (element) {
                        element.textContent = count;
                    }
                });
            }
        });
    }
    
    updateLastUpdateTime(timestamp) {
        const timeSelectors = this.domSelectors.timestamps.lastUpdate.split(', ');
        timeSelectors.forEach(selector => {
            const element = document.querySelector(selector);
            if (element) {
                element.textContent = timestamp;
            }
        });
    }
    
    highlightNewData(type) {
        const newItems = document.querySelectorAll(`[data-source="${type}"]`);
        newItems.forEach(item => {
            item.style.border = '2px solid #10b981';
            setTimeout(() => {
                item.style.border = '';
            }, 3000);
        });
    }
    
    // =====================================
    // üîî ÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†
    // =====================================
    
    initializeNotificationSystem() {
        // ÈÄöÁü•„Ç≥„É≥„ÉÜ„Éä„Éº„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
        if (!document.getElementById('kicho-notifications')) {
            const container = document.createElement('div');
            container.id = 'kicho-notifications';
            container.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 10000;
                max-width: 400px;
            `;
            document.body.appendChild(container);
        }
    }
    
    showNotification(message, type = 'info') {
        const container = document.getElementById('kicho-notifications');
        if (!container) return;
        
        const notification = document.createElement('div');
        notification.className = `kicho-notification kicho-notification--${type}`;
        notification.style.cssText = `
            background: ${this.getNotificationColor(type)};
            color: white;
            padding: 12px 16px;
            margin-bottom: 8px;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateX(100%);
            transition: transform 0.3s ease;
            font-size: 14px;
            line-height: 1.4;
        `;
        
        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 8px;">
                <i class="fas ${this.getNotificationIcon(type)}"></i>
                <span>${message}</span>
                <button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; color: white; margin-left: auto; cursor: pointer;">√ó</button>
            </div>
        `;
        
        container.appendChild(notification);
        
        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 50);
        
        // Ëá™ÂãïÂâäÈô§
        setTimeout(() => {
            if (notification.parentElement) {
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }
        }, 5000);
    }
    
    getNotificationColor(type) {
        const colors = {
            'success': '#10b981',
            'error': '#ef4444',
            'warning': '#f59e0b',
            'info': '#3b82f6'
        };
        return colors[type] || colors.info;
    }
    
    getNotificationIcon(type) {
        const icons = {
            'success': 'fa-check-circle',
            'error': 'fa-exclamation-circle',
            'warning': 'fa-exclamation-triangle',
            'info': 'fa-info-circle'
        };
        return icons[type] || icons.info;
    }
    
    // =====================================
    // üîÑ „Éú„Çø„É≥Áä∂ÊÖãÁÆ°ÁêÜ
    // =====================================
    
    setButtonLoading(button, isLoading) {
        if (isLoading) {
            button.disabled = true;
            button.classList.add('loading');
            
            const icon = button.querySelector('i');
            if (icon) {
                icon.className = 'fas fa-spinner fa-spin';
            }
        } else {
            button.disabled = false;
            button.classList.remove('loading');
        }
    }
    
    // =====================================
    // üåê AjaxÈÄö‰ø°„Ç∑„Çπ„ÉÜ„É†
    // =====================================
    
    async makeAjaxRequest(action, data = {}) {
        const formData = new FormData();
        formData.append('action', action);
        
        // CSRF„Éà„Éº„ÇØ„É≥ËøΩÂä†
        const csrfToken = document.querySelector('meta[name="csrf-token"]');
        if (csrfToken) {
            formData.append('csrf_token', csrfToken.getAttribute('content'));
        }
        
        // „Éá„Éº„ÇøËøΩÂä†
        Object.entries(data).forEach(([key, value]) => {
            formData.append(key, value);
        });
        
        console.log(`üåê AjaxÈÄÅ‰ø°ÈñãÂßã: ${action}`, {
            url: this.ajaxUrl,
            action: action,
            data: data
        });
        
        try {
            const response = await fetch(this.ajaxUrl, {
                method: 'POST',
                body: formData
            });
            
            console.log(`üåê Ajax HTTPÂøúÁ≠î: ${action}`, {
                status: response.status,
                statusText: response.statusText,
                ok: response.ok
            });
            
            if (!response.ok) {
                throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);
            }
            
            const textResult = await response.text();
            console.log(`üåê AjaxÁîü„É¨„Çπ„Éù„É≥„Çπ: ${action}`, textResult);
            
            const result = JSON.parse(textResult);
            console.log(`üåê AjaxËß£ÊûêÊ∏à„Åø„É¨„Çπ„Éù„É≥„Çπ: ${action}`, result);
            
            return result;
            
        } catch (error) {
            console.error(`‚ùå Ajax Request Error (${action}):`, error);
            console.error('Ajax URL:', this.ajaxUrl);
            console.error('FormDataÂÜÖÂÆπ:', Array.from(formData.entries()));
            throw error;
        }
    }
    
    // =====================================
    // üîÑ Ëá™ÂãïÊõ¥Êñ∞„Ç∑„Çπ„ÉÜ„É†
    // =====================================
    
    async loadInitialData() {
        try {
            console.log('üìã ÂàùÊúü„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÈñãÂßã...');
            const response = await this.makeAjaxRequest('refresh-all', {});
            console.log('üìã Ajax„É¨„Çπ„Éù„É≥„Çπ:', response);
            
            if (response.success) {
                console.log('üìä response.statistics:', response.statistics);
                console.log('üìã response.import_data:', response.import_data);
                
                // Áµ±Ë®à„Éá„Éº„ÇøÊõ¥Êñ∞Ôºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰ªò„ÅçÔºâ
                if (response.statistics) {
                    this.updateStatistics(response.statistics);
                } else {
                    console.warn('‚ö†Ô∏è response.statistics„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éá„Éº„Çø‰ΩøÁî®');
                    this.updateStatistics(null);
                }
                
                // „Ç§„É≥„Éù„Éº„Éà„Éá„Éº„ÇøÊõ¥Êñ∞
                if (response.import_data) {
                    this.updateImportDataList(response.import_data);
                }
                
                console.log('‚úÖ ÂàùÊúü„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÊàêÂäü');
            } else {
                console.warn('‚ö†Ô∏è Ajax„É¨„Çπ„Éù„É≥„Çπ„ÅåÂ§±Êïó:', response);
                // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éá„Éº„Çø„ÅßÊõ¥Êñ∞
                this.updateStatistics(null);
            }
        } catch (error) {
            console.error('ÂàùÊúü„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
            // „Ç®„É©„ÉºÊôÇ„ÇÇ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Éá„Éº„Çø„ÅßÊõ¥Êñ∞
            this.updateStatistics(null);
        }
    }
    
    startPeriodicUpdate() {
        // 5ÂàÜ„Åî„Å®„Å´Áµ±Ë®à„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
        setInterval(async () => {
            try {
                const response = await this.makeAjaxRequest('refresh-statistics', {});
                if (response.success) {
                    this.updateStatistics(response.statistics);
                }
            } catch (error) {
                console.error('ÂÆöÊúüÊõ¥Êñ∞„Ç®„É©„Éº:', error);
            }
        }, 300000); // 5ÂàÜ
    }
    
    startAutoRefresh() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
        }
        
        this.refreshInterval = setInterval(async () => {
            try {
                const response = await this.makeAjaxRequest('refresh-statistics', {});
                if (response.success) {
                    this.updateStatistics(response.statistics);
                }
            } catch (error) {
                console.error('Ëá™ÂãïÊõ¥Êñ∞„Ç®„É©„Éº:', error);
            }
        }, 30000); // 30Áßí
    }
    
    stopAutoRefresh() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }
    }
}

// =====================================
// üöÄ ÂàùÊúüÂåñ„Éª„Ç∞„É≠„Éº„Éê„É´Ë®≠ÂÆö
// =====================================

// DOM„É≠„Éº„ÉâÂÆå‰∫ÜÊôÇ„Å´ÂàùÊúüÂåñ
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéØ Kicho UIÂèØË¶ñÂåñ„Ç∑„Çπ„ÉÜ„É†ÈñãÂßãÔºàDOMÁµ±‰∏ÄÁâàÔºâ');
    
    // Êó¢Â≠ò„ÅÆKicho„Ç∑„Çπ„ÉÜ„É†„Å®„ÅÆÁ´∂ÂêàÂõûÈÅø
    if (window.NAGANO3_KICHO && window.NAGANO3_KICHO.initialized) {
        console.log('‚ö†Ô∏è Êó¢Â≠ò„ÅÆKicho„Ç∑„Çπ„ÉÜ„É†„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü„ÄÅÁ´∂ÂêàÂõûÈÅø„É¢„Éº„Éâ„ÅßËµ∑Âãï');
        // Êó¢Â≠ò„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíÁÑ°ÂäπÂåñ
        window.NAGANO3_KICHO.initialized = false;
    }
    
    // „Ç∞„É≠„Éº„Éê„É´„Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê
    window.KichoUIManager = new KichoUIVisualManager();
    
    // „Éá„Éê„ÉÉ„Ç∞Áî®„Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞
    window.refreshKichoData = function() {
        window.KichoUIManager.refreshAllData({ innerHTML: 'Êõ¥Êñ∞‰∏≠...' });
    };
    
    window.testMFImport = function() {
        window.KichoUIManager.executeMFImport({ innerHTML: '„ÉÜ„Çπ„Éà‰∏≠...' });
    };
    
    console.log('‚úÖ Kicho UIÂèØË¶ñÂåñ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫ÜÔºàDOMÁµ±‰∏ÄÁâàÔºâ');
});

// „Éö„Éº„Ç∏Èõ¢ËÑ±ÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
window.addEventListener('beforeunload', function() {
    if (window.KichoUIManager) {
        window.KichoUIManager.stopAutoRefresh();
    }
});