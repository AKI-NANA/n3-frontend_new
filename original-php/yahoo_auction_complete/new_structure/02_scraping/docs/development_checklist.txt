# 02_scraping 在庫管理拡張開発チェックリスト

## 📋 Phase 1: 基盤実装（3-4日）

### ✅ データベース準備
- [ ] `inventory_management` テーブル作成
- [ ] `stock_history` テーブル作成  
- [ ] `listing_platforms` テーブル作成
- [ ] `inventory_execution_logs` テーブル作成
- [ ] インデックス最適化
- [ ] テストデータ投入

### ✅ コアクラス実装
- [ ] `InventoryEngine.php` 作成
  - [ ] `registerListedProduct()` メソッド
  - [ ] `performInventoryCheck()` メソッド
  - [ ] `checkSingleProduct()` メソッド
  - [ ] 価格変動検知ロジック
  - [ ] URL生存確認ロジック
- [ ] `InventoryLogger.php` 作成
- [ ] `PriceMonitor.php` 作成
- [ ] `UrlValidator.php` 作成

### ✅ 設定ファイル
- [ ] `config/inventory.php` 作成
- [ ] 環境別設定（development/production）
- [ ] エラーハンドリング設定

## 📋 Phase 2: API実装（2日）

### ✅ 在庫管理API
- [ ] `api/inventory_monitor.php` 作成
- [ ] `register_listed_product` アクション
- [ ] `start_monitoring` アクション
- [ ] `stop_monitoring` アクション
- [ ] `check_inventory` アクション
- [ ] `get_monitoring_status` アクション
- [ ] `get_price_history` アクション
- [ ] `bulk_register` アクション

### ✅ API セキュリティ
- [ ] CSRF保護実装
- [ ] 入力検証強化
- [ ] レート制限実装
- [ ] エラーレスポンス統一

## 📋 Phase 3: 定期実行（1日）

### ✅ Cronスクリプト
- [ ] `scripts/inventory_cron.php` 作成
- [ ] バッチ処理実装
- [ ] エラーハンドリング
- [ ] プロセス排他制御
- [ ] パフォーマンス最適化

### ✅ 補助スクリプト  
- [ ] `scripts/inventory_report.php` 作成
- [ ] `scripts/inventory_cleanup.php` 作成
- [ ] `scripts/url_health_check.php` 作成

## 📋 Phase 4: 統合実装（1-2日）

### ✅ 08_listing 統合
- [ ] 出品完了フック実装
- [ ] 自動在庫管理登録
- [ ] エラーハンドリング
- [ ] 既存出品商品の一括登録スクリプト

### ✅ 10_zaiko 連携
- [ ] JavaScript統合ライブラリ
- [ ] API呼び出し実装
- [ ] UI更新ロジック
- [ ] リアルタイム監視表示

## 📋 Phase 5: テスト・デバッグ（1-2日）

### ✅ 単体テスト
- [ ] InventoryEngine クラステスト
- [ ] 価格変動検知テスト
- [ ] URL生存確認テスト  
- [ ] データベース操作テスト

### ✅ 統合テスト
- [ ] 出品 → 在庫管理登録フロー
- [ ] 定期チェック実行テスト
- [ ] API連携テスト
- [ ] エラー処理テスト

### ✅ パフォーマンステスト
- [ ] 大量商品処理テスト
- [ ] 並行処理テスト
- [ ] メモリ使用量確認
- [ ] 実行時間測定

## 📋 Phase 6: 運用準備（1日）

### ✅ 運用設定
- [ ] cron設定実装
- [ ] ログローテーション設定
- [ ] 監視・アラート設定
- [ ] バックアップ設定

### ✅ ドキュメント
- [ ] API仕様書作成
- [ ] 運用手順書作成
- [ ] トラブルシューティングガイド
- [ ] 設定変更手順書

### ✅ 初期データ投入
- [ ] 既存出品商品の在庫管理登録
- [ ] 初期監視設定
- [ ] テスト実行確認

## 🔍 重要確認項目

### ✅ データ整合性
- [ ] yahoo_scraped_products との同期
- [ ] 重複登録防止
- [ ] 外部キー制約確認
- [ ] トランザクション処理

### ✅ パフォーマンス
- [ ] インデックス使用確認
- [ ] クエリ実行計画確認
- [ ] メモリリーク確認
- [ ] レスポンス時間測定

### ✅ セキュリティ
- [ ] SQLインジェクション対策
- [ ] XSS対策
- [ ] CSRF対策
- [ ] アクセス制御

### ✅ 運用性
- [ ] ログ出力適切性
- [ ] エラー通知機能
- [ ] デバッグ情報出力
- [ ] 設定変更容易性

## 🚨 注意事項

### ⚠️ 必須条件確認
- [ ] 出品済み商品のみ対象（workflow_status='listed' AND ebay_item_id IS NOT NULL）
- [ ] 08_listing との連携必須
- [ ] 10_zaiko UI との分離
- [ ] 既存 02_scraping 機能への影響なし

### ⚠️ エラー対策
- [ ] Yahoo Auction アクセス制限対応
- [ ] データベース接続エラー対応
- [ ] メモリ不足対応
- [ ] タイムアウト対応

### ⚠️ 拡張性考慮
- [ ] 他プラットフォーム対応準備
- [ ] 設定ファイルでの柔軟性
- [ ] API バージョニング
- [ ] モジュール分離設計

## 📊 完了基準

### ✅ 機能要件
- [ ] 出品完了時の自動在庫管理登録
- [ ] 定期的な価格・在庫チェック
- [ ] 変動検知・履歴記録
- [ ] 10_zaiko からの操作対応

### ✅ 非機能要件  
- [ ] 2時間毎の安定実行
- [ ] 100商品/時間の処理能力
- [ ] 99%以上の稼働率
- [ ] 30日間のログ保持

### ✅ 品質要件
- [ ] コードレビュー完了
- [ ] テストカバレッジ80%以上
- [ ] 静的解析エラーゼロ
- [ ] ドキュメント整備完了

## 🎯 成功指標

- ✅ 出品商品の100%自動登録
- ✅ 価格変動の即座検知（2時間以内）
- ✅ システムエラー率5%以下
- ✅ 10_zaiko UI からのシームレス操作