    function markReadyForListing(productId) {
        if (!confirm('この商品を出品準備完了にマークしますか？')) return;
        
        showNotification(`商品 ${productId} を出品準備完了にマークしました`, 'success');
        
        // 行をハイライト
        const row = document.querySelector(`tr[data-product-id="${productId}"]`);
        if (row) {
            row.style.backgroundColor = '#d4edda';
            setTimeout(() => {
                row.style.backgroundColor = '';
            }, 2000);
        }
    }

    function deleteSelectedProducts() {
        if (selectedItems.length === 0) {
            showNotification('削除する商品を選択してください', 'warning');
            return;
        }
        
        if (!confirm(`${selectedItems.length}件の商品を削除しますか？`)) {
            return;
        }
        
        showNotification(`${selectedItems.length}件の商品削除機能は近日実装予定です`, 'info');
    }

    // 一括操作
    async function bulkApprove() {
        if (selectedItems.length === 0) {
            showError('承認する商品を選択してください');
            return;
        }
        
        if (!confirm(`${selectedItems.length}件の商品を一括承認しますか？`)) {
            return;
        }
        
        try {
            const response = await fetch('?', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'bulk_update',
                    product_ids: selectedItems,
                    updates: { status: 'approved' }
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                showNotification(`${selectedItems.length}件の商品を承認しました`, 'success');
                clearSelection();
                loadEditingData();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('一括承認エラー:', error);
            showError('一括承認に失敗しました: ' + error.message);
        }
    }

    async function bulkReject() {
        if (selectedItems.length === 0) {
            showError('拒否する商品を選択してください');
            return;
        }
        
        if (!confirm(`${selectedItems.length}件の商品を一括拒否しますか？`)) {
            return;
        }
        
        try {
            const response = await fetch('?', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    action: 'bulk_update',
                    product_ids: selectedItems,
                    updates: { status: 'rejected' }
                })
            });
            
            const data = await response.json();
            
            if (data.success) {
                showNotification(`${selectedItems.length}件の商品を拒否しました`, 'success');
                clearSelection();
                loadEditingData();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('一括拒否エラー:', error);
            showError('一括拒否に失敗しました: ' + error.message);
        }
    }

    // CSV出力
    function downloadEditingCSV() {
        const url = '?action=export_csv&type=scraped';
        const link = document.createElement('a');
        link.href = url;
        link.download = `scraped_data_${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        showNotification('CSVファイルをダウンロードしています', 'success');
    }

    // 編集・削除機能
    function deleteProduct(productId) {
        if (!confirm('この商品を削除してもよろしいですか？')) {
            return;
        }
        
        showNotification(`商品 ${productId} の削除機能は開発中です`, 'info');
    }

    // ページネーション
    function changePage(direction) {
        const newPage = currentPage + direction;
        const maxPage = Math.ceil(totalItems / itemsPerPage);
        
        if (newPage >= 1 && newPage <= maxPage) {
            currentPage = newPage;
            loadEditingData();
        }
    }

    function updatePagination() {
        const maxPage = Math.ceil(totalItems / itemsPerPage);
        const pageInfo = document.getElementById('pageInfo');
        const prevBtn = document.getElementById('prevPageBtn');
        const nextBtn = document.getElementById('nextPageBtn');
        
        pageInfo.textContent = `ページ ${currentPage} / ${maxPage} (全 ${totalItems} 件)`;
        
        prevBtn.disabled = currentPage <= 1;
        nextBtn.disabled = currentPage >= maxPage;
    }

    // UI ヘルパー関数
    function showLoading() {
        const tbody = document.getElementById('editingTableBody');
        tbody.innerHTML = `
            <tr>
                <td colspan="11" style="text-align: center; padding: var(--space-4);">
                    <i class="fas fa-spinner fa-spin" style="margin-right: var(--space-2);"></i>
                    データを読み込み中...
                </td>
            </tr>
        `;
    }

    function showNotification(message, type = 'info') {
        // 既存の通知を削除
        const existingNotification = document.querySelector('.notification-temp');
        if (existingNotification) {
            existingNotification.remove();
        }
        
        // 新しい通知を作成
        const notification = document.createElement('div');
        notification.className = `notification ${type} notification-temp`;
        notification.innerHTML = `
            <i class="fas fa-${getNotificationIcon(type)}"></i>
            <span>${message}</span>
        `;
        
        // ヘッダーの後に挿入
        const header = document.querySelector('.dashboard-header');
        header.insertAdjacentElement('afterend', notification);
        
        // 5秒後に自動削除
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }

    function showError(message) {
        showNotification(message, 'error');
    }

    function getNotificationIcon(type) {
        switch (type) {
            case 'success': return 'check-circle';
            case 'error': return 'exclamation-triangle';
            case 'warning': return 'exclamation-triangle';
            case 'info': 
            default: return 'info-circle';
        }
    }
    </script>
</body>
</html>