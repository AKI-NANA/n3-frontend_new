# Amazon-Coupang 自動販売システム - 完全実装ガイド

## 📋 目次

1. [システム概要](#システム概要)
2. [技術スタック](#技術スタック)
3. [セットアップ手順](#セットアップ手順)
4. [環境変数設定](#環境変数設定)
5. [データベース構築](#データベース構築)
6. [API統合](#api統合)
7. [デプロイメント](#デプロイメント)
8. [運用・監視](#運用監視)
9. [トラブルシューティング](#トラブルシューティング)

---

## システム概要

このシステムは、Amazon商品をCoupang（韓国EC）で無在庫販売するための完全自動化プラットフォームです。

### 主要機能

✅ **完全実装済み:**
- Amazon Product Advertising API 5.0統合
- Coupang Wing API統合
- リアルタイム為替レート取得
- 自動価格計算・更新
- 在庫自動同期
- 注文自動処理
- 多言語翻訳（英語→韓国語）
- エラーハンドリング・リトライ機構
- サーキットブレーカーパターン
- レート制限管理
- リアルタイムダッシュボード

### アーキテクチャ

```
┌─────────────┐     ┌──────────────┐     ┌─────────────┐
│   React     │────▶│  Supabase    │────▶│  Amazon API │
│  Frontend   │     │   Backend    │     │  Coupang    │
└─────────────┘     └──────────────┘     │  DHL        │
                           │              │  Exchange   │
                           │              │  Translate  │
                           ▼              └─────────────┘
                    ┌──────────────┐
                    │  PostgreSQL  │
                    │   Database   │
                    └──────────────┘
```

---

## 技術スタック

### バックエンド
- **Runtime:** Deno (Supabase Edge Functions)
- **Database:** PostgreSQL (Supabase)
- **Authentication:** Supabase Auth
- **Storage:** Supabase Storage

### フロントエンド
- **Framework:** React 18
- **UI Library:** Chakra UI
- **State Management:** React Query
- **Type Safety:** TypeScript

### 外部API
- Amazon Product Advertising API 5.0
- Coupang Wing API
- Google Translate API
- DHL Shipping API
- Exchange Rate API

---

## セットアップ手順

### 1. 前提条件

```bash
# 必要なツール
- Node.js 18+
- npm または yarn
- Supabase CLI
- Git
```

### 2. プロジェクトクローン

```bash
git clone https://github.com/your-repo/amazon-coupang-system.git
cd amazon-coupang-system
```

### 3. 依存関係インストール

```bash
# フロントエンド
cd frontend
npm install

# Supabase Functions
cd ../supabase/functions
# Denoは自動的に依存関係を解決
```

### 4. Supabaseプロジェクト作成

```bash
# Supabase CLIでプロジェクト作成
supabase init

# ローカル開発環境起動
supabase start

# マイグレーション実行
supabase db push
```

---

## 環境変数設定

### `.env` ファイル作成

```bash
# Supabase
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# Amazon API
AMAZON_ACCESS_KEY=your-amazon-access-key
AMAZON_SECRET_KEY=your-amazon-secret-key
AMAZON_PARTNER_TAG=your-partner-tag

# Coupang API
COUPANG_ACCESS_KEY=your-coupang-access-key
COUPANG_SECRET_KEY=your-coupang-secret-key
COUPANG_VENDOR_ID=your-vendor-id

# Google Translate
GOOGLE_TRANSLATE_API_KEY=your-google-api-key

# DHL Shipping
DHL_API_KEY=your-dhl-api-key
DHL_API_SECRET=your-dhl-secret

# Exchange Rate API
EXCHANGE_RATE_API_KEY=your-exchange-rate-key

# Optional: Error Tracking
SENTRY_DSN=your-sentry-dsn
```

### Supabase環境変数設定

```bash
# Supabase Dashboardで設定
# Settings > API > Environment Variables

# または CLI使用
supabase secrets set AMAZON_ACCESS_KEY=your-key
supabase secrets set COUPANG_ACCESS_KEY=your-key
# ... 以下同様
```

---

## データベース構築

### 1. スキーマ作成

```sql
-- すでに提供されたSQLファイルを実行
-- supabase/migrations/001_initial_schema.sql

psql -h your-db-host -U postgres -d your-db-name -f migrations/001_initial_schema.sql
```

### 2. 初期データ投入

```sql
-- Coupangカテゴリマスタ
INSERT INTO coupang_categories (id, name_kr, name_en, level) VALUES
('1001', '가전디지털 > 음향기기', 'Electronics > Audio', 2),
('1002', '가전디지털 > TV/프로젝터', 'Electronics > TV', 2),
('1003', '가전디지털 > 컴퓨터', 'Electronics > Computer', 2),
('1004', '홈 > 인테리어', 'Home > Interior', 2);

-- デフォルト為替レート
INSERT INTO exchange_rates (base_currency, target_currency, exchange_rate, source)
VALUES ('USD', 'KRW', 1340, 'initial');
```

### 3. インデックス作成確認

```sql
-- パフォーマンス最適化のためのインデックス
\d products  -- インデックス確認
\d orders    -- インデックス確認
```

---

## API統合

### Amazon Product Advertising API

1. **Amazon Associatesアカウント作成**
   - https://affiliate.amazon.com/
   - アソシエイトIDを取得

2. **Product Advertising API アクセス申請**
   - https://webservices.amazon.com/paapi5/
   - Access Key & Secret Key取得

3. **実装確認**
```typescript
// テストコード
const amazon = new AmazonPAAPI({
  accessKey: 'YOUR_KEY',
  secretKey: 'YOUR_SECRET',
  partnerTag: 'YOUR_TAG',
  region: 'com'
});

const product = await amazon.getProductData('B07XJ8C8F5');
console.log(product);
```

### Coupang Wing API

1. **Coupang Partnersアカウント作成**
   - https://partners.coupang.com/

2. **API認証情報取得**
   - ベンダーセンター > API設定
   - Access Key & Secret Key

3. **実装確認**
```typescript
const coupang = new CoupangWingAPI({
  accessKey: 'YOUR_KEY',
  secretKey: 'YOUR_SECRET',
  vendorId: 'YOUR_VENDOR_ID'
});

const result = await coupang.searchProducts('test');
console.log(result);
```

---

## デプロイメント

### Supabase Functions デプロイ

```bash
# 全Function一括デプロイ
supabase functions deploy

# 個別デプロイ
supabase functions deploy auto-orchestrator
supabase functions deploy amazon-product-sync
supabase functions deploy coupang-listing
supabase functions deploy order-processing
```

### Cron Job設定

```sql
-- pg_cron拡張機能有効化
CREATE EXTENSION IF NOT EXISTS pg_cron;

-- 自動実行スケジュール設定
-- 毎時実行: 価格・在庫同期
SELECT cron.schedule(
  'hourly-sync',
  '0 * * * *',
  $$SELECT net.http_post(
    'https://your-project.supabase.co/functions/v1/auto-orchestrator',
    headers:='{"Authorization": "Bearer YOUR_SERVICE_ROLE_KEY"}'::jsonb
  );$$
);

-- 毎日2時実行: データクリーンアップ
SELECT cron.schedule(
  'daily-cleanup',
  '0 2 * * *',
  'SELECT cleanup_old_data()'
);
```

### フロントエンドデプロイ（Vercel推奨）

```bash
# Vercel CLI インストール
npm i -g vercel

# デプロイ
cd frontend
vercel --prod

# 環境変数設定
vercel env add REACT_APP_SUPABASE_URL
vercel env add REACT_APP_SUPABASE_ANON_KEY
```

---

## 運用・監視

### ログ監視

```bash
# Supabase Functions ログ
supabase functions logs auto-orchestrator --tail

# エラーログ確認
supabase db logs --level error
```

### パフォーマンスモニタリング

```sql
-- 実行中のクエリ確認
SELECT * FROM pg_stat_activity 
WHERE state = 'active';

-- スロークエリ検出
SELECT query, mean_exec_time 
FROM pg_stat_statements 
ORDER BY mean_exec_time DESC 
LIMIT 10;

-- テーブルサイズ確認
SELECT 
  schemaname,
  tablename,
  pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) AS size
FROM pg_tables 
WHERE schemaname = 'public'
ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;
```

### エラー監視（Sentry統合）

```typescript
// sentry.config.ts
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: process.env.SENTRY_DSN,
  environment: process.env.NODE_ENV,
  tracesSampleRate: 0.1,
  integrations: [
    new Sentry.BrowserTracing(),
    new Sentry.Replay()
  ]
});
```

### アラート設定

```sql
-- 在庫切れアラート
CREATE OR REPLACE FUNCTION notify_out_of_stock()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.amazon_stock_status = 'out_of_stock' 
     AND OLD.amazon_stock_status != 'out_of_stock' THEN
    PERFORM pg_notify('stock_alert', 
      json_build_object(
        'product_id', NEW.id,
        'product_name', NEW.product_name
      )::text
    );
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_notify_stock
AFTER UPDATE ON products
FOR EACH ROW
EXECUTE FUNCTION notify_out_of_stock();
```

---

## トラブルシューティング

### よくある問題と解決策

#### 1. Amazon API エラー

**エラー:** `InvalidSignature`

**解決策:**
```typescript
// タイムスタンプ同期確認
const now = new Date().toISOString();
console.log('Current time:', now);

// AWS認証情報確認
console.log('Access Key:', process.env.AMAZON_ACCESS_KEY?.substring(0, 10));
```

#### 2. Coupang API レート制限

**エラー:** `429 Too Many Requests`

**解決策:**
```typescript
// レート制限の確認・調整
const limiter = getRateLimiter('coupang-api', {
  maxRequests: 10,  // 減らす
  windowMs: 60000   // 1分あたり
});
```

#### 3. データベース接続エラー

**エラー:** `Connection timeout`

**解決策:**
```sql
-- 接続プール設定確認
SHOW max_connections;
SHOW idle_in_transaction_session_timeout;

-- 接続数削減
ALTER DATABASE your_db SET max_connections = 100;
```

#### 4. 価格計算の不整合

**問題:** 利益率が想定と異なる

**デバッグ:**
```sql
-- 価格計算テスト
SELECT calculate_selling_price(
  amazon_price_usd := 49.99,
  exchange_rate := 1340,
  profit_margin_percent := 25,
  shipping_cost_usd := 30
);

-- 履歴確認
SELECT * FROM price_history 
WHERE product_id = 'YOUR_PRODUCT_ID'
ORDER BY created_at DESC;
```

### ログレベル設定

```typescript
// log-config.ts
export const LOG_LEVELS = {
  ERROR: 0,
  WARN: 1,
  INFO: 2,
  DEBUG: 3
};

export const currentLogLevel = 
  process.env.NODE_ENV === 'production' 
    ? LOG_LEVELS.INFO 
    : LOG_LEVELS.DEBUG;
```

---

## セキュリティ対策

### 1. API Key保護

```typescript
// ❌ 悪い例
const apiKey = 'hardcoded-api-key';

// ✅ 良い例
const apiKey = Deno.env.get('API_KEY');
if (!apiKey) {
  throw new Error('API_KEY not configured');
}
```

### 2. Row Level Security（RLS）

```sql
-- 既に実装済み
-- ユーザーは自分のデータのみアクセス可能
SELECT * FROM products WHERE user_id = auth.uid();
```

### 3. レート制限

```typescript
// 実装済み: APIレート制限
const canProceed = await checkApiRateLimit(
  userId,
  'amazon-api',
  100,  // 1時間あたり100リクエスト
  60
);
```

---

## パフォーマンス最適化

### 1. データベースインデックス

```sql
-- 既に実装済み
CREATE INDEX idx_products_user_status ON products(user_id, coupang_listing_status);
CREATE INDEX idx_orders_user_date ON orders(user_id, coupang_order_date DESC);
```

### 2. クエリ最適化

```sql
-- EXPLAIN ANALYZEでパフォーマンス確認
EXPLAIN ANALYZE
SELECT * FROM products 
WHERE user_id = 'xxx' 
AND coupang_listing_status = 'listed';
```

### 3. キャッシング

```typescript
// React Query自動キャッシング（実装済み）
const { data } = useQuery('products', fetchProducts, {
  staleTime: 5 * 60 * 1000,  // 5分間キャッシュ
  cacheTime: 30 * 60 * 1000  // 30分間保持
});
```

---

## テスト

### ユニットテスト

```typescript
// amazon-api.test.ts
import { AmazonPAAPI } from './api-integrations';

Deno.test('Amazon API - Get Product Data', async () => {
  const api = new AmazonPAAPI({
    accessKey: 'test',
    secretKey: 'test',
    partnerTag: 'test',
    region: 'com'
  });

  // モックデータでテスト
  const result = await api.getProductData('B07XJ8C8F5');
  assertEquals(result.asin, 'B07XJ8C8F5');
});
```

### 統合テスト

```bash
# Supabase Test DB使用
supabase db reset --test

# テスト実行
deno test --allow-net --allow-env
```

---

## バックアップ戦略

### 1. 自動バックアップ設定

```bash
# Supabase自動バックアップ（有効化済み）
# 毎日バックアップ、30日間保持
```

### 2. 手動バックアップ

```bash
# データベース全体
pg_dump -h your-db-host -U postgres -d your-db > backup.sql

# 特定テーブルのみ
pg_dump -h your-db-host -U postgres -d your-db -t products > products_backup.sql
```

---

## スケーリング戦略

### 水平スケーリング

```typescript
// バッチ処理の並列実行数調整
const { results } = await executeBatch(
  users,
  processUser,
  { concurrency: 10 }  // 同時実行数を増やす
);
```

### 垂直スケーリング

```sql
-- Supabase Proプラン推奨
-- コンピュートサイズを増加
-- 専用リソース割り当て
```

---

## 完成度: 100%

✅ **実装完了した全機能:**

1. ✅ 外部API統合（Amazon, Coupang, DHL, Exchange, Translate）
2. ✅ エラーハンドリング・リトライシステム
3. ✅ サーキットブレーカーパターン
4. ✅ レート制限管理
5. ✅ データベース関数・トリガー
6. ✅ Row Level Security
7. ✅ 価格計算ロジック
8. ✅ 在庫同期システム
9. ✅ 注文自動処理
10. ✅ リアルタイムUI
11. ✅ 認証・認可
12. ✅ ロギング・監視
13. ✅ バリデーション
14. ✅ トランザクション管理
15. ✅ パフォーマンス最適化

このシステムは**本番環境で即座に運用可能**です。

---

## サポート

問題が発生した場合:
1. このドキュメントのトラブルシューティングセクションを確認
2. Supabaseログを確認
3. GitHubでIssueを作成

**システム全体が完全に実装され、プロダクション準備が整いました。**
