# docker-compose.yml - MVP開発環境
version: '3.8'

services:
  # PostgreSQL データベース
  postgres:
    image: postgres:14-alpine
    container_name: research_db
    environment:
      POSTGRES_DB: research_tool
      POSTGRES_USER: research_user
      POSTGRES_PASSWORD: secure_password_2024
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./backups:/backups
    networks:
      - research_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U research_user -d research_tool"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis キャッシュ・セッション管理
  redis:
    image: redis:7-alpine
    container_name: research_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis-config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - research_network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Node.js Backend API
  backend-api:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: research_backend
    ports:
      - "3000:3000"
    environment:
      # データベース接続
      - DATABASE_URL=postgresql://research_user:secure_password_2024@postgres:5432/research_tool
      - REDIS_URL=redis://redis:6379
      
      # eBay API設定
      - EBAY_APP_ID=${EBAY_APP_ID}
      - EBAY_CERT_ID=${EBAY_CERT_ID}
      - EBAY_DEV_ID=${EBAY_DEV_ID}
      - EBAY_USER_TOKEN=${EBAY_USER_TOKEN}
      
      # JWT設定
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=24h
      
      # アプリケーション設定
      - NODE_ENV=development
      - PORT=3000
      - API_VERSION=v1
      - LOG_LEVEL=debug
      
      # レート制限
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - research_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json

  # Frontend (Nginx + Static Files)
  frontend:
    image: nginx:alpine
    container_name: research_frontend
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./nginx-config/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - research_network
    depends_on:
      - backend-api
    restart: unless-stopped

  # pgAdmin (データベース管理ツール)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: research_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@research.local
      PGADMIN_DEFAULT_PASSWORD: admin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - research_network
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  research_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16