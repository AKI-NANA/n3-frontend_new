クロードがこの指示書だけで開発を開始できるよう、Amazon Product Advertising API (PA-API) を活用した完全なデータ取得・在庫管理システムの開発指示書を作成します。

1. プロジェクト概要
1.1 目的
Amazon PA-APIから、商品リサーチと出品在庫連携に必要なデータを効率的かつ安全に取得・管理するシステムを構築する。このシステムは、Yahoo!オークションのデータ取得システムと並行して機能し、eBay出品時の意思決定をサポートする。

1.2 技術スタック
バックエンド: PHP 8.x

データベース: PostgreSQL

フロントエンド: Vanilla JavaScript + CSS

外部API: Amazon Product Advertising API (PA-API)

スケジューラ: Cron

2. システムアーキテクチャ
2.1 モジュール構成
既存のモジュール構成に、Amazon専用の機能を追加する。

02_scraping/：amazon/ サブディレクトリを新設し、Amazon API関連のPHPクラスを配置する。

07_editing/：Amazon専用のデータ表示・編集UIを追加する。

10_zaiko/：在庫監視エンジンを拡張し、Amazon PA-APIからの在庫変動検知ロジックを追加する。

shared/：API認証情報管理クラスを追加する。

2.2 データフロー
データ取得: scheduler.phpがCronジョブで実行され、02_scraping/amazon/内のプロセッサを呼び出す。

APIリクエスト: プロセッサがAmazon PA-APIにASINを指定してリクエストを送信。

データ保存: 取得したJSONデータを解析し、amazon_research_dataテーブルに保存。

在庫監視: 10_zaiko/内の在庫監視エンジンが定期的にamazon_research_dataテーブルをチェック。

変動検知: 価格や在庫数の変動を検知した場合、データベースのフラグを更新し、price_historyテーブルに詳細を記録。

UI表示: 07_editing/モジュールが、データベースからAmazonデータを取得し、編集UIに表示。

3. データベース設計
3.1 amazon_research_dataテーブル
Amazonの商品リサーチデータを一元管理する核となるテーブル。

SQL

CREATE TABLE amazon_research_data (
    id SERIAL PRIMARY KEY,
    asin VARCHAR(10) UNIQUE NOT NULL,
    title TEXT,
    current_price DECIMAL(10,2),
    current_stock VARCHAR(20), -- 'In Stock', 'Out of Stock'など
    is_prime BOOLEAN DEFAULT FALSE,
    product_images JSONB,
    item_specifics JSONB,
    reviews JSONB,
    sales_rank JSONB,
    price_min DECIMAL(10,2),
    price_max DECIMAL(10,2),
    price_fluctuation_count INTEGER DEFAULT 0,
    last_price_check_at TIMESTAMP,
    last_stock_check_at TIMESTAMP,
    is_high_priority BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_amazon_asin ON amazon_research_data(asin);
3.2 price_historyテーブル
価格変動の詳細な履歴を記録する。

SQL

CREATE TABLE price_history (
    id SERIAL PRIMARY KEY,
    asin VARCHAR(10) REFERENCES amazon_research_data(asin),
    price DECIMAL(10,2) NOT NULL,
    recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_price_history_asin ON price_history(asin);
4. 開発タスクと実装ロジック
フェーズ1：APIクライアントの構築
タスク: 02_scraping/amazon/AmazonAPIClient.phpを開発。

PA-APIへの認証（Access KeyとSecret Key）ロジックを実装。

APIリクエストの署名生成ロジックを実装。

SearchItems（キーワード検索）、GetItems（ASIN指定検索）のメソッドを実装。

重要: 1秒間に1リクエストなど、APIのレート制限を厳守するための遅延ロジック（sleep()関数）を組み込む。

フェーズ2：データ取得プロセッサの開発
タスク: 02_scraping/amazon/AmazonDataProcessor.phpを開発。

ASINのリストを引数に取り、AmazonAPIClientを使ってデータを取得するメソッドを実装。

取得したJSONデータをパースし、amazon_research_dataテーブルに整形して保存するロジックを実装。

既存データが存在する場合はUPDATE、新規データの場合はINSERTを行う。

フェーズ3：在庫・価格監視エンジンの開発
タスク: 10_zaiko/AmazonStockMonitor.phpを開発。

scheduler.phpから実行されるメインロジックをここに記述する。

高頻度監視: is_high_priorityがTRUEの商品をフィルタリングし、30分ごとにポーリング。

低頻度監視: すべての商品を対象に、1日3回（午前9時、午後1時、午後9時）など、指定した間隔でポーリング。

変動検知ロジック:

priceが前回と比較して±5%以上変動した場合、price_fluctuation_countをインクリメントし、price_historyテーブルに詳細を記録する。

current_stockがIn StockからOut of Stockに変わった場合、在庫切れとしてログに記録し、08_listingモジュールに連携する（次フェーズ）。

price_minとprice_maxを常に最新の価格と比較し、更新する。

フェーズ4：フロントエンドとの連携とUI/UX
タスク: 07_editing/モジュールを改修。

UIの切り替えボタン: 「Yahoo!データ」「Amazonデータ」の切り替えボタンを設置。

APIエンドポイント: api/fetch_amazon.phpを作成。このAPIは、amazon_research_dataテーブルからデータを取得し、JSONで返す。

JavaScript: JavaScriptでfetchリクエストを送り、Amazonデータを取得。取得したデータを、既存のYahoo!編集モーダルと同じUIに動的にレンダリングする。

フェーズ5：運用・保守
タスク: 運用スクリプトとエラーハンドリングを構築。

APIエラーハンドリング: APIリクエストが失敗した場合、自動的に3回までリトライするロジックを実装する。

ロギング: logs/amazon_api.logに、APIリクエストの成功・失敗、取得したデータ量、処理時間を記録する。

バックアップ: データベースのバックアップスクリプトを定期的に実行するCronジョブを設定する。

通知: 在庫切れやAPIエラーが一定数を超えた場合、メール通知を送信する。

<br>
このAmazonのPA-APIに関するYouTubeのチュートリアル動画は、APIの基本的な使い方や制限事項について理解を深めるのに役立つでしょう。

Guide to Amazon Product Advertising API using NodeJs | PAAPI - YouTube

Raddy · 1.1万 回の視聴

https://www.youtube.com/watch?v=vBB4eQ4cOv4


