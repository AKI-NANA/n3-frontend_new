Amazon統合システム データ概要書
1. システム概要
1.1 目的
Yahoo!オークション統合システムに Amazon Product Advertising API (PA-API) を活用したデータ取得・在庫管理機能を統合し、eBay出品時の意思決定を支援する包括的なデータ分析基盤を構築。
1.2 技術アーキテクチャ

プラットフォーム: PHP 8.x + PostgreSQL + Vanilla JavaScript
API統合: Amazon PA-API 5.0
設計原則: モジュラーモノリス構造による責任分離
既存システム: Yahoo!システムとの完全共存

2. データベース設計
2.1 中核テーブル: amazon_research_data
sql主要カラム構成:
- asin (VARCHAR(10), UNIQUE): 商品識別子
- title (TEXT): 商品タイトル
- current_price (DECIMAL(10,2)): 現在価格
- price_min/max (DECIMAL(10,2)): 価格履歴の最低/最高値
- current_stock_status (VARCHAR(20)): 在庫状況
- is_prime (BOOLEAN): プライム対象フラグ
- product_images (JSONB): 画像URL配列
- item_specifics (JSONB): 商品詳細仕様
- price_fluctuation_count (INTEGER): 価格変動回数
- is_high_priority (BOOLEAN): 監視優先度
- last_api_check_at (TIMESTAMP): 最終API確認日時
2.2 価格履歴テーブル: amazon_price_history
sql変動追跡データ:
- asin (VARCHAR(10)): 商品ASIN
- price (DECIMAL(10,2)): 記録時価格
- change_percentage (DECIMAL(5,2)): 変動率
- stock_status (VARCHAR(20)): 在庫状況
- change_trigger (VARCHAR(50)): 変動トリガー
- recorded_at (TIMESTAMP): 記録日時
2.3 横断参照テーブル: product_cross_reference
sqlマッチングデータ:
- yahoo_product_id (INTEGER): Yahoo!商品ID
- amazon_asin (VARCHAR(10)): Amazon ASIN
- match_confidence (DECIMAL(3,2)): マッチング信頼度
- match_type (VARCHAR(20)): マッチタイプ
3. データフロー設計
3.1 データ取得フロー
1. スケジューラ起動 (Cron)
   ↓
2. AmazonStockMonitor.php実行
   ↓
3. 優先度別商品抽出 (SQL WHERE is_high_priority)
   ↓
4. Amazon PA-API呼び出し (レート制限: 1req/sec)
   ↓
5. データ正規化・検証 (AmazonDataProcessor)
   ↓
6. amazon_research_data INSERT/UPDATE
   ↓
7. 価格変動検知 (5%以上で記録)
   ↓
8. amazon_price_history 履歴保存
3.2 監視戦略
高優先度商品: 30分間隔監視
- SQL: last_api_check_at < NOW() - INTERVAL '30 minutes'
- 対象: is_high_priority = TRUE

通常優先度商品: 8時間間隔監視  
- SQL: last_api_check_at < NOW() - INTERVAL '8 hours'
- 対象: is_high_priority = FALSE
3.3 マッチングフロー
1. Yahoo!商品タイトル解析
   ↓
2. キーワード抽出 (ブランド名・型番・一般語)
   ↓
3. Amazon検索実行 (複数クエリ組み合わせ)
   ↓
4. 信頼度計算
   - タイトル類似度: 60%重み
   - ブランド一致: 30%重み  
   - 価格妥当性: 10%重み
   ↓
5. 閾値75%以上でマッチング保存
4. API エンドポイント設計
4.1 データ取得API
phpGET /api/amazon_data.php?action=fetch
- ページネーション対応 (page, limit)
- フィルタリング (high_priority, stock_out)
- ソート (updated_at, price, fluctuation_count)

GET /api/amazon_data.php?action=search&query={keyword}
- ASIN・タイトル・ブランド横断検索
- ILIKE演算子による部分一致

GET /api/amazon_data.php?action=detail&asin={asin}
- 商品詳細 + 価格履歴30件
- Chart.js用データ形式変換
4.2 操作API
phpPOST /api/amazon_data.php?action=add_asins
- 複数ASIN一括追加
- Amazon API経由データ取得
- 優先度設定

POST /api/amazon_data.php?action=update_priority
- 監視優先度変更
- 即座監視間隔変更

POST /api/amazon_data.php?action=search_yahoo_related
- Yahoo!データベース横断検索
- キーワード抽出・類似度計算
5. データ処理ロジック
5.1 価格変動検知
phpfunction detectPriceChange($currentPrice, $previousPrice) {
    $changePercentage = (($currentPrice - $previousPrice) / $previousPrice) * 100;
    return abs($changePercentage) >= 5.0; // 5%閾値
}

// 変動時処理:
// 1. price_fluctuation_count++
// 2. price_history レコード追加
// 3. price_min/max 更新
// 4. last_price_change_at 更新
5.2 在庫変動検知
phpfunction detectStockChange($currentStock, $previousStock) {
    if ($currentStock !== $previousStock) {
        // 在庫変動をprice_historyに記録
        recordStockChange($asin, $currentStock, $previousStock);
        
        // 在庫切れアラート
        if ($previousStock === 'InStock' && $currentStock === 'OutOfStock') {
            sendStockOutAlert($asin);
        }
        return true;
    }
    return false;
}
5.3 マッチング信頼度計算
phpfunction calculateMatchConfidence($yahooProduct, $amazonProduct) {
    $titleSimilarity = calculateTextSimilarity($yahoo['title'], $amazon['title']);
    $brandMatch = checkBrandMatch($yahooProduct, $amazonProduct);
    $priceRange = checkPriceRange($yahooProduct, $amazonProduct);
    
    // 重み付け計算
    $confidence = ($titleSimilarity * 0.6) + ($brandMatch * 0.3) + ($priceRange * 0.1);
    return round($confidence, 3);
}
6. パフォーマンス最適化
6.1 データベース最適化
sql-- 効率的インデックス設計
CREATE INDEX idx_amazon_asin ON amazon_research_data(asin);
CREATE INDEX idx_amazon_priority ON amazon_research_data(is_high_priority);
CREATE INDEX idx_amazon_last_check ON amazon_research_data(last_api_check_at);
CREATE INDEX idx_price_history_asin ON amazon_price_history(asin);
CREATE INDEX idx_price_history_date ON amazon_price_history(recorded_at);
6.2 API制限対応
php// 指数関数的バックオフ
private function calculateBackoffTime($attempt) {
    $baseTime = 1; // 基本待機時間
    $maxWaitTime = 60; // 最大待機時間
    $waitTime = $baseTime * pow(2, $attempt);
    return min($waitTime, $maxWaitTime);
}

// レート制限管理
private function enforceRateLimit() {
    $minInterval = 1.0; // 1秒間隔
    if ($timeSinceLastRequest < $minInterval) {
        $waitTime = $minInterval - $timeSinceLastRequest;
        usleep($waitTime * 1000000);
    }
}
7. 運用監視データ
7.1 システム統計
sql-- リアルタイム統計クエリ
SELECT 
    COUNT(*) as total_products,
    COUNT(CASE WHEN is_high_priority THEN 1 END) as high_priority_count,
    COUNT(CASE WHEN current_stock_status = 'OutOfStock' THEN 1 END) as out_of_stock_count,
    AVG(current_price) as avg_price,
    MAX(price_fluctuation_count) as max_fluctuations
FROM amazon_research_data;
7.2 変動分析
sql-- 過去24時間の価格変動数
SELECT COUNT(*) as price_changes_24h 
FROM amazon_price_history 
WHERE recorded_at > NOW() - INTERVAL '24 hours' 
AND change_trigger != 'stock_change';

-- 在庫変動数
SELECT COUNT(*) as stock_changes_24h 
FROM amazon_price_history 
WHERE recorded_at > NOW() - INTERVAL '24 hours' 
AND change_trigger = 'stock_change';
7.3 マッチング品質
sql-- マッチング統計
SELECT 
    COUNT(*) as total_matches,
    AVG(match_confidence) as avg_confidence,
    COUNT(CASE WHEN match_confidence > 80 THEN 1 END) as high_confidence_matches
FROM product_cross_reference;
8. セキュリティ・エラーハンドリング
8.1 データ保護
php// 入力検証
private function validateAsin($asin) {
    return preg_match('/^[A-Z0-9]{10}$/', $asin);
}

// CSRF保護
private function validateCsrfToken() {
    $token = $_SERVER['HTTP_X_CSRF_TOKEN'] ?? '';
    if ($token !== ($_SESSION['csrf_token'] ?? '')) {
        throw new Exception('CSRF token invalid');
    }
}
8.2 ログ管理
php// 構造化ログ
$this->logger->info('価格変動検知', [
    'asin' => $asin,
    'old_price' => $oldPrice,
    'new_price' => $newPrice,
    'change_percentage' => round($changePercentage, 2)
]);
9. スケーラビリティ考慮
9.1 処理能力

同時監視商品数: 1,000商品以上対応
API呼び出し制限: 日間8,640リクエスト以内
バッチ処理: 50商品/回の効率的処理

9.2 拡張性

マルチマーケットプレイス: 設定変更のみで対応可能
機械学習統合: 価格予測モデル追加準備済み
他システム連携: RESTful API による標準的連携

10. 成功指標・KPI
10.1 技術指標

API成功率: 99%以上（3段階リトライ実装）
データ更新遅延: 平均30秒以内
システム稼働率: 99.9%以上

10.2 ビジネス指標

価格変動検知率: 95%以上（5%閾値設定）
マッチング精度: 80%以上（重み付け計算）
運用効率化: 手動作業時間20%削減


このシステムにより、Amazon商品データの包括的な取得・分析・監視が自動化され、Yahoo!オークションデータとの統合的活用を通じて、eBay出品戦略の高度化と収益最適化が実現されます。再試行Claudeは間違えることがあります。回答内容を必ずご確認ください。