# docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pokemon_content_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pokemon_content_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Django Backend
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
      - ./logs:/app/logs
    environment:
      - DEBUG=True
      - SECRET_KEY=django-dev-secret-key-change-in-production
      - DB_HOST=db
      - DB_NAME=pokemon_content_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - WORDPRESS_URL=${WORDPRESS_URL}
      - WORDPRESS_USERNAME=${WORDPRESS_USERNAME}
      - WORDPRESS_PASSWORD=${WORDPRESS_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "
        python manage.py wait_for_db &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - ./logs:/app/logs
    environment:
      - DEBUG=True
      - SECRET_KEY=django-dev-secret-key-change-in-production
      - DB_HOST=db
      - DB_NAME=pokemon_content_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
    depends_on:
      - db
      - redis
    command: >
      sh -c "
        python manage.py wait_for_db &&
        celery -A pokemon_content_system worker -l info -Q default,content_generation,data_collection,publishing --concurrency=4
      "
    healthcheck:
      test: ["CMD", "celery", "-A", "pokemon_content_system", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  # Celery Beat (Scheduler)
  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    environment:
      - DEBUG=True
      - SECRET_KEY=django-dev-secret-key-change-in-production
      - DB_HOST=db
      - DB_NAME=pokemon_content_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    command: >
      sh -c "
        python manage.py wait_for_db &&
        celery -A pokemon_content_system beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3000
    depends_on:
      - web
    command: npm start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Flower (Celery Monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - redis
    command: >
      sh -c "
        celery -A pokemon_content_system flower --port=5555 --broker=redis://redis:6379/0
      "
    restart: unless-stopped

  # Nginx (Development Proxy)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf
      - static_files:/var/www/static
      - media_files:/var/www/media
    depends_on:
      - web
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:

---
# backend/Dockerfile
FROM python:3.11-slim

# System dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    ffmpeg \
    libpq-dev \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Install Python dependencies
COPY requirements/development.txt .
RUN pip install --no-cache-dir -r development.txt

# Copy project
COPY . .

# Create directories
RUN mkdir -p /app/staticfiles /app/media /app/logs

# Create user
RUN useradd --create-home --shell /bin/bash app
RUN chown -R app:app /app
USER app

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:8000/api/v1/health/ || exit 1

EXPOSE 8000

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

---
# frontend/Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy app source
COPY . .

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001
RUN chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 3000

CMD ["npm", "start"]

---
# nginx/dev.conf
upstream backend {
    server web:8000;
}

upstream frontend {
    server frontend:3000;
}

server {
    listen 80;
    server_name localhost;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # API requests
    location /api/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Django Admin
    location /admin/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Static files
    location /static/ {
        alias /var/www/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Media files
    location /media/ {
        alias /var/www/media/;
        expires 1y;
        add_header Cache-Control "public";
    }

    # React app (with WebSocket support for HMR)
    location / {
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

---
# .env.example
# Django Settings
SECRET_KEY=your-super-secret-key-here
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1,your-domain.com

# Database
DB_NAME=pokemon_content_db
DB_USER=postgres
DB_PASSWORD=your-secure-password
DB_HOST=db
DB_PORT=5432

# Redis
REDIS_URL=redis://redis:6379/0

# External APIs
OPENAI_API_KEY=your-openai-api-key
ELEVENLABS_API_KEY=your-elevenlabs-api-key
YOUTUBE_API_KEY=your-youtube-api-key
YOUTUBE_CLIENT_ID=your-youtube-client-id
YOUTUBE_CLIENT_SECRET=your-youtube-client-secret

# WordPress
WORDPRESS_URL=https://your-wordpress-site.com
WORDPRESS_USERNAME=your-wp-username
WORDPRESS_PASSWORD=your-wp-app-password

# Social Media
TWITTER_API_KEY=your-twitter-api-key
TWITTER_API_SECRET=your-twitter-api-secret
INSTAGRAM_ACCESS_TOKEN=your-instagram-token
FACEBOOK_ACCESS_TOKEN=your-facebook-token

# Email
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password
DEFAULT_FROM_EMAIL=your-email@gmail.com

# AWS S3 (Optional)
USE_S3=False
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_STORAGE_BUCKET_NAME=your-s3-bucket
AWS_S3_REGION_NAME=ap-northeast-1

---
# backend/apps/core/management/commands/wait_for_db.py
import time
import psycopg2
from django.db import connections
from django.core.management.base import BaseCommand
from django.conf import settings

class Command(BaseCommand):
    """Django command to wait for database to be available"""

    def handle(self, *args, **options):
        self.stdout.write('Waiting for database...')
        db_conn = None
        while not db_conn:
            try:
                db_conn = connections['default']
                db_conn.cursor()
            except psycopg2.OperationalError:
                self.stdout.write('Database unavailable, waiting 1 second...')
                time.sleep(1)

        self.stdout.write(self.style.SUCCESS('Database available!'))

---
# scripts/setup.sh
#!/bin/bash

echo "🚀 ポケモンカード コンテンツ自動生成システム セットアップ開始"

# 環境変数ファイル確認
if [ ! -f .env ]; then
    echo "📝 環境変数ファイルを作成中..."
    cp .env.example .env
    echo "✅ .env ファイルを作成しました。必要な API キーを設定してください。"
fi

# ディレクトリ作成
echo "📁 必要なディレクトリを作成中..."
mkdir -p logs
mkdir -p backend/staticfiles
mkdir -p backend/media
mkdir -p backend/media/card_images
mkdir -p backend/media/card_thumbnails

# 権限設定
chmod +x scripts/*.sh

# Docker コンテナ起動
echo "🐳 Docker コンテナを起動中..."
docker-compose up -d --build

# サービス起動待機
echo "⏳ サービス起動を待機中..."
sleep 60

# ヘルスチェック
echo "🔍 ヘルスチェック実行中..."
docker-compose exec web python manage.py check

# 初期データ投入
echo "📊 初期データを投入中..."
docker-compose exec web python manage.py loaddata fixtures/initial_data.json

# スーパーユーザー作成
echo "👤 管理者ユーザーを作成中..."
docker-compose exec web python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
    print('✅ 管理者ユーザー作成完了: admin/admin123')
else:
    print('ℹ️  管理者ユーザーは既に存在します')
"

echo "✅ セットアップ完了！"
echo ""
echo "🌐 アクセスURL:"
echo "   フロントエンド: http://localhost:3000"
echo "   API: http://localhost:8000/api/v1/"
echo "   Django Admin: http://localhost:8000/admin/ (admin/admin123)"
echo "   Flower (Celery監視): http://localhost:5555"
echo ""
echo "📚 次のステップ:"
echo "   1. .env ファイルで API キーを設定"
echo "   2. ブラウザで http://localhost:3000 にアクセス"
echo "   3. admin/admin123 でログイン"

---
# scripts/start-dev.sh
#!/bin/bash

echo "🚀 開発環境起動中..."

# Docker Compose起動
docker-compose up -d

# ログ表示
echo "📊 ログを表示中... (Ctrl+C で停止)"
docker-compose logs -f web worker

---
# scripts/stop-dev.sh
#!/bin/bash

echo "🛑 開発環境停止中..."
docker-compose down

echo "✅ 開発環境を停止しました"

---
# scripts/reset-db.sh
#!/bin/bash

echo "⚠️  データベースをリセットします"
read -p "続行しますか? (y/N): " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "🗄️ データベースリセット中..."
    
    docker-compose down
    docker volume rm pokemon_content_system_postgres_data
    docker-compose up -d db
    
    sleep 10
    
    docker-compose up -d web
    
    echo "✅ データベースリセット完了"
else
    echo "❌ キャンセルしました"
fi

---
# sql/init.sql
-- Initial database setup
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_pokemon_cards_name_jp ON pokemon_cards(name_jp);
CREATE INDEX IF NOT EXISTS idx_pokemon_cards_popularity ON pokemon_cards(popularity_score DESC);
CREATE INDEX IF NOT EXISTS idx_price_data_collected_at ON price_data(collected_at DESC);
CREATE INDEX IF NOT EXISTS idx_generated_content_status ON generated_content(status);

-- Set timezone
SET timezone = 'Asia/Tokyo';

---
# Makefile
.PHONY: setup start stop restart logs shell migrate test clean

setup:
	@bash scripts/setup.sh

start:
	@bash scripts/start-dev.sh

stop:
	@bash scripts/stop-dev.sh

restart: stop start

logs:
	docker-compose logs -f

shell:
	docker-compose exec web python manage.py shell

migrate:
	docker-compose exec web python manage.py migrate

test:
	docker-compose exec web python manage.py test

clean:
	docker-compose down -v
	docker system prune -f