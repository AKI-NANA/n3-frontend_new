# Docker開発環境セットアップガイド

## 1. プロジェクト構造

```
pokemon_content_system/
├── docker-compose.yml
├── docker-compose.prod.yml
├── Dockerfile
├── requirements/
│   ├── base.txt
│   ├── development.txt
│   └── production.txt
├── .env.example
├── .env
├── nginx/
│   └── default.conf
└── scripts/
    ├── start-dev.sh
    ├── migrate.sh
    └── collect-static.sh
```

## 2. Docker Compose設定

### docker-compose.yml (開発環境)
```yaml
version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - media_volume:/app/media
      - static_volume:/app/static
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:password@db:5432/pokemon_card_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    command: python manage.py runserver 0.0.0.0:8000
    networks:
      - pokemon_network

  worker:
    build: .
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:password@db:5432/pokemon_card_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    command: celery -A config worker -l info -Q data_collection,ai_generation,publishing
    networks:
      - pokemon_network

  beat:
    build: .
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:password@db:5432/pokemon_card_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    command: celery -A config beat -l info
    networks:
      - pokemon_network

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: pokemon_card_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - pokemon_network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pokemon_network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/static
      - media_volume:/media
    depends_on:
      - web
    networks:
      - pokemon_network

  flower:
    build: .
    command: celery -A config flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://postgres:password@db:5432/pokemon_card_db
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - pokemon_network

volumes:
  postgres_data:
  redis_data:
  media_volume:
  static_volume:

networks:
  pokemon_network:
    driver: bridge
```

### docker-compose.prod.yml (本番環境)
```yaml
version: '3.8'

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    expose:
      - 8000
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    environment:
      - DEBUG=0
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - YOUTUBE_CLIENT_ID=${YOUTUBE_CLIENT_ID}
      - YOUTUBE_CLIENT_SECRET=${YOUTUBE_CLIENT_SECRET}
    depends_on:
      - db
      - redis
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4
    networks:
      - pokemon_network

  worker:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    volumes:
      - media_volume:/app/media
    environment:
      - DEBUG=0
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - SECRET_KEY=${SECRET_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    depends_on:
      - db
      - redis
    command: celery -A config worker -l info -Q data_collection,ai_generation,publishing --concurrency=4
    networks:
      - pokemon_network
    scale: 2

  beat:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    environment:
      - DEBUG=0
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    depends_on:
      - db
      - redis
    command: celery -A config beat -l info
    networks:
      - pokemon_network

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pokemon_network

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - pokemon_network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - static_volume:/static
      - media_volume:/media
    depends_on:
      - web
    networks:
      - pokemon_network

volumes:
  postgres_data:
  redis_data:
  media_volume:
  static_volume:

networks:
  pokemon_network:
    driver: bridge
```

## 3. Dockerfile

### Dockerfile (開発・本番共通)
```dockerfile
FROM python:3.11-slim

# 環境変数設定
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV DEBIAN_FRONTEND noninteractive

# 作業ディレクトリ設定
WORKDIR /app

# システムパッケージ更新・必要パッケージインストール
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        postgresql-client \
        gettext \
        curl \
        build-essential \
        libpq-dev \
        libjpeg-dev \
        libpng-dev \
        libwebp-dev \
        ffmpeg \
        imagemagick \
        git \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Pythonの依存関係インストール
COPY requirements/base.txt /app/requirements/base.txt
COPY requirements/development.txt /app/requirements/development.txt
RUN pip install --no-cache-dir -r requirements/development.txt

# アプリケーションファイルをコピー
COPY . /app/

# 静的ファイル・メディアファイル用ディレクトリ作成
RUN mkdir -p /app/static /app/media

# 実行権限付与
RUN chmod +x /app/scripts/*.sh

# ポート公開
EXPOSE 8000

# デフォルトコマンド
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]
```

### Dockerfile.prod (本番環境用)
```dockerfile
FROM python:3.11-slim

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV DEBIAN_FRONTEND noninteractive

WORKDIR /app

# システムパッケージインストール
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        postgresql-client \
        gettext \
        curl \
        build-essential \
        libpq-dev \
        libjpeg-dev \
        libpng-dev \
        libwebp-dev \
        ffmpeg \
        imagemagick \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Pythonの依存関係インストール
COPY requirements/production.txt /app/requirements/production.txt
RUN pip install --no-cache-dir -r requirements/production.txt

# アプリケーションファイルをコピー
COPY . /app/

# 静的ファイル収集
RUN python manage.py collectstatic --noinput

# 非rootユーザー作成
RUN adduser --disabled-password --gecos '' appuser
RUN chown -R appuser:appuser /app
USER appuser

EXPOSE 8000

CMD ["gunicorn", "config.wsgi:application", "--bind", "0.0.0.0:8000", "--workers", "4"]
```

## 4. 依存関係ファイル

### requirements/base.txt
```
Django==4.2.7
djangorestframework==3.14.0
django-cors-headers==4.3.1
django-filter==23.3
psycopg2-binary==2.9.8
redis==5.0.1
celery==5.3.4
python-decouple==3.8
Pillow==10.1.0
requests==2.31.0
beautifulsoup4==4.12.2
openai==1.3.8
boto3==1.34.0
django-storages==1.14.2
python-slugify==8.0.1
lxml==4.9.3
pandas==2.1.3
scikit-learn==1.3.2
```

### requirements/development.txt
```
-r base.txt
django-debug-toolbar==4.2.0
django-extensions==3.2.3
factory-boy==3.3.0
pytest==7.4.3
pytest-django==4.7.0
black==23.11.0
isort==5.12.0
flake8==6.1.0
coverage==7.3.2
```

### requirements/production.txt
```
-r base.txt
gunicorn==21.2.0
whitenoise==6.6.0
sentry-sdk==1.38.0
django-health-check==3.17.0
```

## 5. 環境変数設定

### .env.example
```bash
# Django設定
DEBUG=1
SECRET_KEY=your-secret-key-here
ALLOWED_HOSTS=localhost,127.0.0.1

# データベース設定
DATABASE_URL=postgresql://postgres:password@db:5432/pokemon_card_db
POSTGRES_DB=pokemon_card_db
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password

# Redis設定
REDIS_URL=redis://redis:6379/0
CELERY_BROKER_URL=redis://redis:6379/0

# AWS設定
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_STORAGE_BUCKET_NAME=pokemon-content-storage
AWS_S3_REGION_NAME=ap-northeast-1

# AI API設定
OPENAI_API_KEY=your-openai-api-key
ELEVENLABS_API_KEY=your-elevenlabs-api-key
MIDJOURNEY_API_KEY=your-midjourney-api-key

# YouTube API設定
YOUTUBE_CLIENT_ID=your-youtube-client-id
YOUTUBE_CLIENT_SECRET=your-youtube-client-secret

# WordPress API設定
WORDPRESS_JP_URL=https://your-japanese-site.com
WORDPRESS_JP_USERNAME=admin
WORDPRESS_JP_PASSWORD=your-app-password
WORDPRESS_CN_URL=https://your-chinese-site.com
WORDPRESS_CN_USERNAME=admin
WORDPRESS_CN_PASSWORD=your-app-password

# SNS API設定
TWITTER_API_KEY=your-twitter-api-key
TWITTER_API_SECRET=your-twitter-api-secret
TWITTER_ACCESS_TOKEN=your-twitter-access-token
TWITTER_ACCESS_TOKEN_SECRET=your-twitter-access-token-secret

INSTAGRAM_ACCESS_TOKEN=your-instagram-access-token
FACEBOOK_PAGE_ACCESS_TOKEN=your-facebook-page-access-token

# メール設定
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password
EMAIL_USE_TLS=1
```

## 6. Nginx設定

### nginx/default.conf (開発環境用)
```nginx
upstream web {
    server web:8000;
}

server {
    listen 80;
    server_name localhost;

    location / {
        proxy_pass http://web;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }

    location /static/ {
        alias /static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;
    }

    location /media/ {
        alias /media/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Flower (Celery監視)
    location /flower/ {
        proxy_pass http://flower:5555/;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    client_max_body_size 100M;
}
```

### nginx/prod.conf (本番環境用)
```nginx
upstream web {
    server web:8000;
}

server {
    listen 80;
    server_name your-domain.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name your-domain.com;

    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    add_header Strict-Transport-Security "max-age=63072000" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";

    location / {
        proxy_pass http://web;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }

    location /static/ {
        alias /static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
        gzip_static on;
    }

    location /media/ {
        alias /media/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    client_max_body_size 100M;
}
```

## 7. セットアップスクリプト

### scripts/start-dev.sh
```bash
#!/bin/bash

echo "🚀 ポケモンカード コンテンツシステム開発環境起動"

# 環境変数ファイルをチェック
if [ ! -f .env ]; then
    echo "⚠️  .envファイルが見つかりません。.env.exampleからコピーしてください。"
    cp .env.example .env
    echo "✅ .envファイルを作成しました。必要な値を設定してください。"
    exit 1
fi

# Dockerコンテナをビルド・起動
echo "🔧 Dockerコンテナをビルド中..."
docker-compose build

echo "🔄 Dockerコンテナを起動中..."
docker-compose up -d

# データベースの準備ができるまで待機
echo "⏳ データベースの準備を待機中..."
sleep 10

# マイグレーション実行
echo "📊 データベースマイグレーション実行中..."
docker-compose exec web python manage.py migrate

# スーパーユーザー作成（存在しない場合）
echo "👤 管理者ユーザーを作成中..."
docker-compose exec web python manage.py shell -c "
from django.contrib.auth.models import User
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
    print('Admin user created: admin/admin123')
else:
    print('Admin user already exists')
"

# 初期データ投入
echo "📦 初期データを投入中..."
docker-compose exec web python manage.py loaddata fixtures/initial_data.json

# 静的ファイル収集
echo "📂 静的ファイルを収集中..."
docker-compose exec web python manage.py collectstatic --noinput

echo "✅ セットアップ完了！"
echo ""
echo "🌐 アクセスURL:"
echo "   メインアプリ: http://localhost"
echo "   Django Admin: http://localhost/admin (admin/admin123)"
echo "   API: http://localhost/api/"
echo "   Flower (Celery監視): http://localhost/flower/"
echo ""
echo "🔧 便利なコマンド:"
echo "   ログ確認: docker-compose logs -f"
echo "   コンテナ停止: docker-compose down"
echo "   再ビルド: docker-compose build --no-cache"
```

### scripts/migrate.sh
```bash
#!/bin/bash

echo "📊 データベースマイグレーション実行"

# マイグレーションファイル作成
docker-compose exec web python manage.py makemigrations

# マイグレーション実行
docker-compose exec web python manage.py migrate

echo "✅ マイグレーション完了"
```

### scripts/collect-static.sh
```bash
#!/bin/bash

echo "📂 静的ファイル収集"

# 静的ファイル収集
docker-compose exec web python manage.py collectstatic --noinput

echo "✅ 静的ファイル収集完了"
```

### scripts/backup-db.sh
```bash
#!/bin/bash

BACKUP_DIR="./backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="pokemon_db_backup_${TIMESTAMP}.sql"

# バックアップディレクトリ作成
mkdir -p $BACKUP_DIR

# データベースバックアップ
echo "💾 データベースバックアップ実行中..."
docker-compose exec db pg_dump -U postgres pokemon_card_db > "${BACKUP_DIR}/${BACKUP_FILE}"

# 古いバックアップファイル削除（30日以上前）
find $BACKUP_DIR -name "*.sql" -mtime +30 -delete

echo "✅ バックアップ完了: ${BACKUP_DIR}/${BACKUP_FILE}"
```

### scripts/restore-db.sh
```bash
#!/bin/bash

if [ -z "$1" ]; then
    echo "使用方法: ./restore-db.sh <backup_file.sql>"
    exit 1
fi

BACKUP_FILE=$1

if [ ! -f "$BACKUP_FILE" ]; then
    echo "❌ バックアップファイルが見つかりません: $BACKUP_FILE"
    exit 1
fi

echo "🔄 データベース復元中..."
echo "⚠️  警告: 現在のデータは全て削除されます。"
read -p "続行しますか？ (y/N): " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
    # データベースを削除・再作成
    docker-compose exec db dropdb -U postgres pokemon_card_db
    docker-compose exec db createdb -U postgres pokemon_card_db
    
    # バックアップファイルから復元
    docker-compose exec -T db psql -U postgres pokemon_card_db < "$BACKUP_FILE"
    
    echo "✅ データベース復元完了"
else
    echo "❌ 復元をキャンセルしました"
fi
```

## 8. 初期データ作成

### fixtures/initial_data.json
```json
[
    {
        "model": "cards.pokemonseries",
        "pk": 1,
        "fields": {
            "name": "ベースセット",
            "name_en": "Base Set",
            "release_date": "1996-10-20",
            "is_active": true
        }
    },
    {
        "model": "cards.pokemonseries", 
        "pk": 2,
        "fields": {
            "name": "拡張パック「スカーレット&バイオレット」",
            "name_en": "Scarlet & Violet",
            "release_date": "2023-01-20",
            "is_active": true
        }
    },
    {
        "model": "cards.pokemoncard",
        "pk": 1,
        "fields": {
            "name_jp": "ピカチュウ",
            "name_en": "Pikachu",
            "name_cn": "皮卡丘",
            "card_number": "025/102",
            "series": 1,
            "rarity": "RRR",
            "hp": 60,
            "card_type": "ポケモン",
            "pokemon_type": "雷",
            "is_popular": true,
            "investment_grade": "A",
            "metadata": {
                "description": "でんきネズミポケモン",
                "abilities": ["静電気"]
            }
        }
    },
    {
        "model": "price_tracking.pricesource",
        "pk": 1,
        "fields": {
            "name": "メルカリ",
            "base_url": "https://mercari.com",
            "is_active": true,
            "scraping_config": {
                "search_endpoint": "/search",
                "card_selector": ".item-box",
                "price_selector": ".item-price"
            },
            "rate_limit_per_hour": 100
        }
    },
    {
        "model": "content_collection.contentsource",
        "pk": 1,
        "fields": {
            "name": "ポケカ投資チャンネル",
            "source_type": "youtube",
            "url": "https://www.youtube.com/channel/UCxxxxxxx",
            "is_active": true,
            "collection_config": {
                "channel_id": "UCxxxxxxx",
                "keywords": ["ポケカ", "相場", "投資"]
            },
            "collection_interval_hours": 6
        }
    },
    {
        "model": "ai_generation.contenttemplate",
        "pk": 1,
        "fields": {
            "name": "日本語ブログ記事テンプレート",
            "content_type": "blog_jp",
            "system_prompt": "あなたはポケモンカード市場の専門アナリストです。投資初心者にも分かりやすく、SEO最適化された記事を作成してください。",
            "user_prompt_template": "以下のポケモンカードの相場データを基に、3000文字程度のSEO最適化されたブログ記事を作成してください。\n\nカード名: {card_name}\n現在価格: {current_price}円\n24時間変動: {change_24h}%\n7日間変動: {change_7d}%\n30日間変動: {change_30d}%\n\n記事は以下の構成でお願いします：\n1. 導入（カードの基本情報）\n2. 現在の相場状況\n3. 価格変動の要因分析\n4. 今後の価格予測\n5. 投資アドバイス\n6. まとめ",
            "max_tokens": 3000,
            "temperature": 0.7,
            "target_keywords": ["ポケカ 相場", "投資", "価格予測"],
            "is_active": true
        }
    }
]
```

## 9. 実行手順

### 初回セットアップ
```bash
# 1. リポジトリをクローン
git clone <repository-url>
cd pokemon_content_system

# 2. 実行権限付与
chmod +x scripts/*.sh

# 3. 開発環境起動
./scripts/start-dev.sh

# 4. 動作確認
curl http://localhost/api/health/
```

### 日常的な開発作業
```bash
# コンテナ起動
docker-compose up -d

# ログ確認
docker-compose logs -f web

# Django shell
docker-compose exec web python manage.py shell

# データベースマイグレーション
./scripts/migrate.sh

# テスト実行
docker-compose exec web python manage.py test

# コードフォーマット
docker-compose exec web black .
docker-compose exec web isort .

# 静的ファイル収集
./scripts/collect-static.sh

# コンテナ停止
docker-compose down
```

### 本番環境デプロイ
```bash
# 本番環境用の環境変数設定
cp .env.example .env.prod
# .env.prodを本番用に編集

# 本番環境ビルド・起動
docker-compose -f docker-compose.prod.yml up -d --build

# マイグレーション実行
docker-compose -f docker-compose.prod.yml exec web python manage.py migrate

# 静的ファイル収集
docker-compose -f docker-compose.prod.yml exec web python manage.py collectstatic --noinput

# スーパーユーザー作成
docker-compose -f docker-compose.prod.yml exec web python manage.py createsuperuser
```

## 10. 監視・メンテナンス

### ヘルスチェック
```bash
# アプリケーション全体の状態確認
curl http://localhost/health/

# データベース接続確認
curl http://localhost/health/database/

# Redis接続確認  
curl http://localhost/health/cache/

# Celery worker状態確認
curl http://localhost/health/celery/
```

### ログ確認
```bash
# 全コンテナのログ
docker-compose logs -f

# 特定コンテナのログ
docker-compose logs -f web
docker-compose logs -f worker
docker-compose logs -f beat

# エラーログのみ
docker-compose logs -f web | grep ERROR
```

### パフォーマンス監視
```bash
# リソース使用状況
docker stats

# コンテナ一覧
docker-compose ps

# ディスク使用量
docker system df

# 不要なイメージ・ボリューム削除
docker system prune -a
```

## 11. トラブルシューティング

### よくある問題と解決方法

#### データベース接続エラー
```bash
# PostgreSQLコンテナの状態確認
docker-compose ps db

# PostgreSQLログ確認
docker-compose logs db

# データベース再作成
docker-compose down
docker volume rm pokemon_content_system_postgres_data
docker-compose up -d db
```

#### Celery workerが動かない
```bash
# Worker状態確認
docker-compose ps worker

# Redisの状態確認
docker-compose exec redis redis-cli ping

# Worker再起動
docker-compose restart worker
```

#### 静的ファイルが表示されない
```bash
# 静的ファイル再収集
./scripts/collect-static.sh

# Nginxの設定確認
docker-compose exec nginx nginx -t

# Nginx再起動
docker-compose restart nginx
```

#### メモリ不足
```bash
# Docker Desktop のリソース設定を確認
# 最低8GB RAM, 4 CPU cores推奨

# 不要なコンテナ・イメージ削除
docker system prune -a

# Swap設定確認（Linux）
swapon --show
```

このセットアップガイドで、完全な開発環境が構築できます。次にどの機能から実装を開始しますか？