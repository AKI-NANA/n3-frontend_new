# requirements/base.txt - 共通依存関係
Django==4.2.7
djangorestframework==3.14.0
django-cors-headers==4.3.1
django-filter==23.3
django-extensions==3.2.3
python-decouple==3.8

# データベース
psycopg2-binary==2.9.7
redis==5.0.1

# 非同期処理
celery==5.3.2
flower==2.0.1

# AI・機械学習
openai==0.28.1
langchain==0.0.332
transformers==4.35.0
torch==2.1.0
scikit-learn==1.3.1
numpy==1.24.3
pandas==2.0.3

# ウェブスクレイピング
requests==2.31.0
beautifulsoup4==4.12.2
selenium==4.15.2
scrapy==2.11.0

# 画像処理
Pillow==10.0.1
opencv-python==4.8.1.78

# AWS
boto3==1.29.7
django-storages==1.14.2

# ユーティリティ
python-dotenv==1.0.0
pytz==2023.3
python-dateutil==2.8.2
jsonschema==4.19.1

# バリデーション・セキュリティ
cryptography==41.0.7
PyJWT==2.8.0

# 自然言語処理
textblob==0.17.1
janome==0.4.2

---

# requirements/development.txt - 開発環境用
-r base.txt

# 開発ツール
django-debug-toolbar==4.2.0
django-extensions==3.2.3
ipython==8.16.1
jupyter==1.0.0

# テスト
pytest==7.4.3
pytest-django==4.5.2
pytest-cov==4.1.0
factory-boy==3.3.0
faker==19.12.0

# コード品質
black==23.9.1
flake8==6.1.0
isort==5.12.0
mypy==1.6.1
pre-commit==3.5.0

# ドキュメント
sphinx==7.2.6
sphinx-rtd-theme==1.3.0

# プロファイリング
django-silk==5.0.4
memory-profiler==0.61.0

---

# requirements/production.txt - 本番環境用
-r base.txt

# 本番サーバー
gunicorn==21.2.0
whitenoise==6.6.0

# 監視・ログ
sentry-sdk[django]==1.38.0
django-prometheus==2.3.1

# パフォーマンス
django-cachalot==2.6.1
django-cache-memoize==0.1.10

# セキュリティ強化
django-ratelimit==4.1.0
django-csp==3.7

---

# .env.example - 環境変数テンプレート
# Django設定
SECRET_KEY=your-secret-key-here-change-in-production
DEBUG=1
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# データベース設定
DATABASE_URL=postgresql://postgres:password@localhost:5432/pokemon_card_db
DB_NAME=pokemon_card_db
DB_USER=postgres
DB_PASSWORD=password
DB_HOST=localhost
DB_PORT=5432

# Redis設定
REDIS_URL=redis://localhost:6379/0
REDIS_PASSWORD=

# Celery設定
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# OpenAI API設定
OPENAI_API_KEY=your-openai-api-key-here
OPENAI_MODEL_NAME=gpt-3.5-turbo
OPENAI_MAX_TOKENS=2000
OPENAI_TEMPERATURE=0.7

# AWS S3設定
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_STORAGE_BUCKET_NAME=pokemon-content-system
AWS_S3_REGION_NAME=ap-northeast-1
AWS_S3_CUSTOM_DOMAIN=
USE_S3=0

# 価格収集設定
MERCARI_ACCESS_TOKEN=
YAHOO_AUCTION_APP_ID=
AMAZON_ACCESS_KEY=
AMAZON_SECRET_KEY=

# WordPress API設定
WORDPRESS_SITES='[
    {
        "name": "Japanese Blog",
        "url": "https://your-jp-blog.com",
        "username": "admin",
        "password": "app-password"
    },
    {
        "name": "English Blog", 
        "url": "https://your-en-blog.com",
        "username": "admin",
        "password": "app-password"
    }
]'

# YouTube API設定
YOUTUBE_API_KEY=your-youtube-api-key
YOUTUBE_CLIENT_ID=your-youtube-client-id
YOUTUBE_CLIENT_SECRET=your-youtube-client-secret

# SNS API設定
TWITTER_API_KEY=your-twitter-api-key
TWITTER_API_SECRET=your-twitter-api-secret
TWITTER_ACCESS_TOKEN=your-twitter-access-token
TWITTER_ACCESS_SECRET=your-twitter-access-secret

INSTAGRAM_ACCESS_TOKEN=your-instagram-access-token

# メール設定
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password
EMAIL_USE_TLS=1

# 監視設定
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
FLOWER_USER=admin
FLOWER_PASSWORD=admin123

# セキュリティ設定
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
CORS_ALLOW_CREDENTIALS=True

# ログ設定
LOG_LEVEL=INFO
LOG_DIR=logs

---

# config/settings/base.py - Django基本設定
import os
from pathlib import Path
from decouple import config

BASE_DIR = Path(__file__).resolve().parent.parent.parent

# セキュリティ設定
SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=False, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost').split(',')

# アプリケーション定義
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'django_filters',
    'corsheaders',
    'django_extensions',
]

LOCAL_APPS = [
    'apps.core',
    'apps.cards',
    'apps.price_tracking',
    'apps.content_collection',
    'apps.ai_generation',
    'apps.publishing',
    'apps.analytics',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# データベース設定
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
        'OPTIONS': {
            'options': '-c default_transaction_isolation=read_committed'
        }
    }
}

# Redis設定
REDIS_URL = config('REDIS_URL', default='redis://localhost:6379/0')

# Celery設定
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default=REDIS_URL)
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default=REDIS_URL)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Tokyo'
CELERY_BEAT_SCHEDULE = {
    'collect-price-data': {
        'task': 'apps.price_tracking.tasks.collect_price_data_task',
        'schedule': 360.0,  # 6時間毎
    },
    'cleanup-old-price-data': {
        'task': 'apps.price_tracking.tasks.cleanup_old_price_data_task',
        'schedule': 86400.0,  # 24時間毎
    },
    'generate-daily-content': {
        'task': 'apps.ai_generation.tasks.batch_content_generation_task',
        'schedule': 86400.0,  # 24時間毎
        'args': ({
            'name': 'Daily Content Generation',
            'template_id': 'blog_jp_template',
            'batch_size': 5,
        },)
    },
    'cleanup-old-content': {
        'task': 'apps.ai_generation.tasks.cleanup_old_content_task',
        'schedule': 86400.0,  # 24時間毎
    },
}

# 国際化
LANGUAGE_CODE = 'ja'
TIME_ZONE = 'Asia/Tokyo'
USE_I18N = True
USE_TZ = True

# 静的ファイル設定
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# メディアファイル設定
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# AWS S3設定
USE_S3 = config('USE_S3', default=False, cast=bool)
if USE_S3:
    AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default='ap-northeast-1')
    AWS_S3_CUSTOM_DOMAIN = config('AWS_S3_CUSTOM_DOMAIN', default='')
    AWS_DEFAULT_ACL = 'public-read'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    
    # S3を使用する場合の設定
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    STATICFILES_STORAGE = 'storages.backends.s3boto3.StaticS3Boto3Storage'

# デフォルトプライマリキー設定
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework設定
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1000/hour',
        'user': '5000/hour'
    }
}

# CORS設定
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='').split(',')
CORS_ALLOW_CREDENTIALS = config('CORS_ALLOW_CREDENTIALS', default=True, cast=bool)

# OpenAI設定
OPENAI_API_KEY = config('OPENAI_API_KEY')
OPENAI_MODEL_NAME = config('OPENAI_MODEL_NAME', default='gpt-3.5-turbo')
OPENAI_MAX_TOKENS = config('OPENAI_MAX_TOKENS', default=2000, cast=int)
OPENAI_TEMPERATURE = config('OPENAI_TEMPERATURE', default=0.7, cast=float)

# 価格収集API設定
MERCARI_ACCESS_TOKEN = config('MERCARI_ACCESS_TOKEN', default='')
YAHOO_AUCTION_APP_ID = config('YAHOO_AUCTION_APP_ID', default='')
AMAZON_ACCESS_KEY = config('AMAZON_ACCESS_KEY', default='')
AMAZON_SECRET_KEY = config('AMAZON_SECRET_KEY', default='')

# WordPress設定
WORDPRESS_SITES = config('WORDPRESS_SITES', default='[]')

# YouTube API設定
YOUTUBE_API_KEY = config('YOUTUBE_API_KEY', default='')
YOUTUBE_CLIENT_ID = config('YOUTUBE_CLIENT_ID', default='')
YOUTUBE_CLIENT_SECRET = config('YOUTUBE_CLIENT_SECRET', default='')

# SNS API設定
TWITTER_API_KEY = config('TWITTER_API_KEY', default='')
TWITTER_API_SECRET = config('TWITTER_API_SECRET', default='')
TWITTER_ACCESS_TOKEN = config('TWITTER_ACCESS_TOKEN', default='')
TWITTER_ACCESS_SECRET = config('TWITTER_ACCESS_SECRET', default='')
INSTAGRAM_ACCESS_TOKEN = config('INSTAGRAM_ACCESS_TOKEN', default='')

# ログ設定
LOG_LEVEL = config('LOG_LEVEL', default='INFO')
LOG_DIR = BASE_DIR / config('LOG_DIR', default='logs')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOG_DIR / 'django.log',
            'maxBytes': 1024*1024*10,  # 10MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'apps': {
            'handlers': ['console', 'file'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
    },
}

# セキュリティ設定
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

---

# config/settings/development.py - 開発環境設定
from .base import *

# デバッグ設定
DEBUG = True
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']

# 開発用アプリケーション
INSTALLED_APPS += [
    'debug_toolbar',
    'django_extensions',
]

# 開発用ミドルウェア
MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
] + MIDDLEWARE

# Debug Toolbar設定
INTERNAL_IPS = [
    '127.0.0.1',
    'localhost',
]

DEBUG_TOOLBAR_CONFIG = {
    'DISABLE_PANELS': [
        'debug_toolbar.panels.redirects.RedirectsPanel',
    ],
    'SHOW_TEMPLATE_CONTEXT': True,
}

# キャッシュ設定（開発環境では無効化）
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
    }
}

# メール設定（開発環境ではコンソール出力）
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# セキュリティ設定を緩和
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

---

# config/settings/production.py - 本番環境設定
from .base import *
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.celery import CeleryIntegration

# セキュリティ設定
DEBUG = False
ALLOWED_HOSTS = config('ALLOWED_HOSTS').split(',')

# 本番用アプリケーション
INSTALLED_APPS += [
    'django_prometheus',
]

# 本番用ミドルウェア
MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
] + MIDDLEWARE + [
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

# データベース最適化
DATABASES['default'].update({
    'CONN_MAX_AGE': 600,
    'OPTIONS': {
        'options': '-c default_transaction_isolation=read_committed',
        'connect_timeout': 10,
    }
})

# キャッシュ設定
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {'max_connections': 50},
            'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
            'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
        },
        'KEY_PREFIX': 'pokemon_content_system',
        'TIMEOUT': 300,
    }
}

# セッション設定
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# セキュリティ設定
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_SECONDS = 31536000  # 1年
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_SSL_REDIRECT = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
X_FRAME_OPTIONS = 'DENY'

# 静的ファイル設定（WhiteNoise）
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Sentry設定
SENTRY_DSN = config('SENTRY_DSN', default='')
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(),
            CeleryIntegration(),
        ],
        traces_sample_rate=0.1,
        send_default_pii=True,
        environment='production',
    )

# メール設定
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)

# ログ設定（本番環境用）
LOGGING['handlers']['file']['filename'] = '/var/log/pokemon_content_system/django.log'

---

# config/urls.py - URLルーティング
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.views.generic import TemplateView
from rest_framework.routers import DefaultRouter

# API Router
from apps.cards.views import PokemonCardViewSet, PokemonSeriesViewSet
from apps.ai_generation.views import AIGeneratedContentViewSet, ContentTemplateViewSet
from apps.price_tracking.views import PriceDataViewSet, PriceAnalysisViewSet
from apps.publishing.views import PublishedContentViewSet, PublishingPlatformViewSet
from apps.analytics.views import AnalyticsDataViewSet

router = DefaultRouter()
router.register('cards', PokemonCardViewSet)
router.register('series', PokemonSeriesViewSet)
router.register('ai-content', AIGeneratedContentViewSet)
router.register('content-templates', ContentTemplateViewSet)
router.register('price-data', PriceDataViewSet)
router.register('price-analysis', PriceAnalysisViewSet)
router.register('published-content', PublishedContentViewSet)
router.register('publishing-platforms', PublishingPlatformViewSet)
router.register('analytics', AnalyticsDataViewSet)

urlpatterns = [
    # 管理画面
    path('admin/', admin.site.urls),
    
    # API
    path('api/v1/', include(router.urls)),
    path('api/v1/auth/', include('rest_framework.urls')),
    
    # ヘルスチェック
    path('health/', TemplateView.as_view(template_name='health.html')),
    
    # 監視用
    path('metrics/', include('django_prometheus.urls')),
    
    # フロントエンド（開発環境）
    path('', TemplateView.as_view(template_name='index.html'), name='frontend'),
]

# 静的ファイル配信（開発環境）
if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    
    # Debug Toolbar
    if 'debug_toolbar' in settings.INSTALLED_APPS:
        import debug_toolbar
        urlpatterns = [
            path('__debug__/', include(debug_toolbar.urls)),
        ] + urlpatterns

---

# .gitignore - Git除外設定
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Django
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Environment variables
.env
.env.local
.env.development
.env.production

# Media files
media/

# Static files
staticfiles/
static/

# Node.js
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build directories
build/
dist/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Backup files
backups/
*.sql
*.dump

# Temporary files
tmp/
temp/

# Docker
.dockerignore

# Testing
.coverage
.pytest_cache/
htmlcov/

# Documentation
docs/_build/

# Performance test results
performance_results/

# Monitoring data
monitoring/prometheus/data/
monitoring/grafana/data/

# SSL Certificates
*.pem
*.key
*.crt

# Jupyter Notebook
.ipynb_checkpoints

# Virtual environments
venv/
env/
ENV/

---

# README.md - プロジェクト説明
# Pokemon Content System

AI駆動のポケモンカード相場・コンテンツ自動生成システム

## 🌟 主要機能

### 📊 価格追跡・分析
- メルカリ・ヤフオク等からの自動価格収集
- 統計的価格分析（中央値、変動率、トレンド）
- 投資グレード評価・市場予測

### 🤖 AI コンテンツ生成
- OpenAI GPT を使用した記事自動生成
- 多言語対応（日本語・英語・中国語）
- SEO最適化・品質管理システム

### 📱 多プラットフォーム公開
- WordPress 自動投稿
- YouTube 動画生成・投稿
- SNS 連携（Twitter・Instagram）

### 📈 アナリティクス
- リアルタイム パフォーマンス監視
- 収益・ROI トラッキング
- ダッシュボード UI

## 🚀 クイックスタート

### 必要要件
- Docker & Docker Compose
- Node.js 18+ (フロントエンド開発用)
- Git

### インストール

```bash
# リポジトリをクローン
git clone https://github.com/your-repo/pokemon-content-system.git
cd pokemon-content-system

# 環境変数を設定
cp .env.example .env
# .env ファイルを編集して必要な API キーを設定

# 開発環境を起動
make dev

# または
./scripts/start-dev.sh
```

### アクセス情報
- メインアプリ: http://localhost:3000
- Django 管理画面: http://localhost:8000/admin
- API ドキュメント: http://localhost:8000/api/
- Celery 監視: http://localhost:5555

### 管理者アカウント
- ユーザー名: `admin`
- パスワード: `admin123`

## 📋 使用可能なコマンド

```bash
# 開発環境
make dev          # 開発環境起動
make dev-logs     # ログ表示
make dev-shell    # Django シェル

# 本番環境
make prod         # 本番環境起動
make deploy       # デプロイ
make prod-logs    # 本番ログ

# データベース
make migrate      # マイグレーション
make backup       # バックアップ作成
make restore BACKUP_FILE=backup.sql.gz

# 保守・監視
make health       # ヘルスチェック
make monitor      # 監視システム起動
make performance  # パフォーマンステスト
```

## 🏗️ アーキテクチャ

```
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   React SPA     │───▶│   Django API     │───▶│   PostgreSQL    │
│   (Frontend)    │    │   (Backend)      │    │   (Database)    │ 
└─────────────────┘    └──────────────────┘    └─────────────────┘
                                │
                       ┌────────┴─────────┐
                       │                  │
                  ┌────▼─────┐    ┌──────▼──────┐
                  │  Celery  │    │    Redis    │
                  │ (Tasks)  │    │  (Cache)    │
                  └──────────┘    └─────────────┘
```

### 主要コンポーネント

#### バックエンド
- **Django REST Framework**: API サーバー
- **Celery**: 非同期タスク処理
- **PostgreSQL**: メインデータベース
- **Redis**: キャッシュ・メッセージブローカー

#### フロントエンド  
- **React 18**: UI フレームワーク
- **TypeScript**: 型安全性
- **Tailwind CSS**: スタイリング
- **React Query**: データフェッチング

#### インフラ
- **Docker**: コンテナ化
- **Nginx**: リバースプロキシ
- **AWS S3**: ファイルストレージ
- **Prometheus/Grafana**: 監視

## 🔧 開発環境セットアップ

### 1. 依存関係インストール
```bash
# Python 依存関係
pip install -r requirements/development.txt

# Node.js 依存関係  
cd frontend && npm install
```

### 2. データベース初期化
```bash
# マイグレーション実行
python manage.py migrate

# 初期データ読み込み
python manage.py loaddata fixtures/pokemon_series.json
python manage.py loaddata fixtures/content_templates.json

# スーパーユーザー作成
python manage.py createsuperuser
```

### 3. 開発サーバー起動
```bash
# バックエンド
python manage.py runserver

# フロントエンド
cd frontend && npm start

# Celery ワーカー
celery -A config worker -l info

# Celery Beat
celery -A config beat -l info
```

## 📊 本番デプロイ

### 環境準備
```bash
# 本番用環境変数設定
cp .env.example .env.production
# 必要な値を設定

# SSL 証明書配置
cp your-cert.pem nginx/ssl/cert.pem
cp your-key.pem nginx/ssl/key.pem
```

### デプロイ実行
```bash
# 自動デプロイ
make deploy

# 手動デプロイ
./scripts/deploy.sh
```

### 監視設定
```bash
# 監視システム起動
make monitor

# アクセス情報
# Prometheus: http://your-domain:9090
# Grafana: http://your-domain:3001
```

## 🧪 テスト

```bash
# 全テスト実行
make test

# カバレッジ付きテスト
pytest --cov=apps

# パフォーマンステスト
make performance
```

## 📖 API ドキュメント

### 主要エンドポイント

#### カード管理
- `GET /api/v1/cards/` - カード一覧
- `GET /api/v1/cards/{id}/` - カード詳細
- `GET /api/v1/cards/popular_cards/` - 人気カード
- `GET /api/v1/cards/{id}/price_history/` - 価格履歴

#### AI コンテンツ生成
- `POST /api/v1/ai-content/generate/` - コンテンツ生成
- `GET /api/v1/ai-content/` - 生成コンテンツ一覧
- `POST /api/v1/ai-content/{id}/quality_check/` - 品質チェック

#### 分析・統計
-