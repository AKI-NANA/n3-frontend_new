# docker-compose.yml - 開発環境
version: '3.8'

services:
  # PostgreSQL データベース
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: pokemon_content_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Celery ブローカー)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django バックエンド
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - media_files:/app/media
      - static_files:/app/staticfiles
    environment:
      - DEBUG=True
      - SECRET_KEY=your-development-secret-key
      - DB_HOST=db
      - DB_NAME=pokemon_content_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - YOUTUBE_CLIENT_ID=${YOUTUBE_CLIENT_ID}
      - YOUTUBE_CLIENT_SECRET=${YOUTUBE_CLIENT_SECRET}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery ワーカー
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - media_files:/app/media
    environment:
      - DEBUG=True
      - SECRET_KEY=your-development-secret-key
      - DB_HOST=db
      - DB_NAME=pokemon_content_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    depends_on:
      - db
      - redis
    command: celery -A pokemon_content_system worker -l info -Q default,high_priority,content_generation
    healthcheck:
      test: ["CMD", "celery", "-A", "pokemon_content_system", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Celery Beat (スケジューラー)
  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=True
      - SECRET_KEY=your-development-secret-key
      - DB_HOST=db
      - DB_NAME=pokemon_content_db
      - DB_USER=postgres
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    command: celery -A pokemon_content_system beat -l info

  # React フロントエンド
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - web
    command: npm start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (本番環境用リバースプロキシ)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_files:/var/www/static
      - media_files:/var/www/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:

---
# docker-compose.prod.yml - 本番環境
version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    expose:
      - "8000"
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - YOUTUBE_CLIENT_ID=${YOUTUBE_CLIENT_ID}
      - YOUTUBE_CLIENT_SECRET=${YOUTUBE_CLIENT_SECRET}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn pokemon_content_system.wsgi:application --bind 0.0.0.0:8000 --workers 4"

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    volumes:
      - media_files:/app/media
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: celery -A pokemon_content_system worker -l info -Q default,high_priority,content_generation --concurrency=4

  beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    volumes:
      - media_files:/app/media
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: celery -A pokemon_content_system beat -l info

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=${FRONTEND_API_URL}
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
      - static_files:/var/www/static
      - media_files:/var/www/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
      - frontend
    restart: unless-stopped

  # 監視・ログ管理
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - redis
    restart: unless-stopped
    command: celery -A pokemon_content_system flower --port=5555

volumes:
  postgres_data:
  redis_data:
  media_files:
  static_files:

---
# backend/Dockerfile
FROM python:3.11-slim

WORKDIR /app

# システム依存関係インストール
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    ffmpeg \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Python依存関係インストール
COPY requirements/base.txt requirements/development.txt ./
RUN pip install --no-cache-dir -r development.txt

# アプリケーションコードコピー
COPY . .

# 静的ファイル・メディアファイル用ディレクトリ作成
RUN mkdir -p /app/staticfiles /app/media

# 実行ユーザー作成
RUN useradd --create-home --shell /bin/bash app
RUN chown -R app:app /app
USER app

EXPOSE 8000

CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

---
# backend/Dockerfile.prod
FROM python:3.11-slim

WORKDIR /app

# システム依存関係インストール
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    ffmpeg \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Python依存関係インストール
COPY requirements/base.txt requirements/production.txt ./
RUN pip install --no-cache-dir -r production.txt

# アプリケーションコードコピー
COPY . .

# 静的ファイル・メディアファイル用ディレクトリ作成
RUN mkdir -p /app/staticfiles /app/media

# セキュリティ設定
RUN useradd --create-home --shell /bin/bash app
RUN chown -R app:app /app
USER app

EXPOSE 8000

CMD ["gunicorn", "pokemon_content_system.wsgi:application", "--bind", "0.0.0.0:8000"]

---
# frontend/Dockerfile
FROM node:18-alpine

WORKDIR /app

# パッケージファイルコピー
COPY package*.json ./

# 依存関係インストール
RUN npm ci

# アプリケーションコードコピー
COPY . .

EXPOSE 3000

CMD ["npm", "start"]

---
# frontend/Dockerfile.prod
FROM node:18-alpine AS build

WORKDIR /app

# パッケージファイルコピー
COPY package*.json ./

# 依存関係インストール
RUN npm ci

# アプリケーションコードコピー
COPY . .

# 本番ビルド
ARG REACT_APP_API_URL
ENV REACT_APP_API_URL=$REACT_APP_API_URL
RUN npm run build

# Nginx本番環境
FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
COPY nginx/frontend.conf /etc/nginx/conf.d/default.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

---
# nginx/nginx.conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ログ形式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # パフォーマンス最適化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip圧縮
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy;

    include /etc/nginx/conf.d/*.conf;
}

---
# nginx/default.conf - 開発環境
upstream backend {
    server web:8000;
}

upstream frontend {
    server frontend:3000;
}

server {
    listen 80;
    server_name localhost;

    # セキュリティヘッダー
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # API プロキシ
    location /api/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30;
        proxy_send_timeout 30;
        proxy_read_timeout 30;
    }

    # Django Admin
    location /admin/ {
        proxy_pass http://backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 静的ファイル
    location /static/ {
        alias /var/www/static/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # メディアファイル
    location /media/ {
        alias /var/www/media/;
        expires 1y;
        add_header Cache-Control "public";
    }

    # フロントエンド（React）
    location / {
        proxy_pass http://frontend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket サポート（HMR用）
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}

---
# .env.example
# Django設定
SECRET_KEY=your-super-secret-key-here
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1,your-domain.com

# データベース設定
DB_NAME=pokemon_content_db
DB_USER=postgres
DB_PASSWORD=your-db-password
DB_HOST=db
DB_PORT=5432

# Redis設定
REDIS_PASSWORD=your-redis-password

# 外部API設定
OPENAI_API_KEY=your-openai-api-key
ELEVENLABS_API_KEY=your-elevenlabs-api-key
YOUTUBE_CLIENT_ID=your-youtube-client-id
YOUTUBE_CLIENT_SECRET=your-youtube-client-secret

# WordPress設定
WORDPRESS_URL=https://your-site.com
WORDPRESS_USERNAME=your-username
WORDPRESS_PASSWORD=your-app-password

# フロントエンド設定
FRONTEND_API_URL=https://your-api-domain.com/api/v1

# AWS設定（本番環境）
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_STORAGE_BUCKET_NAME=your-s3-bucket

---
# scripts/start-dev.sh
#!/bin/bash

# 開発環境起動スクリプト

echo "🚀 ポケモンカード コンテンツ自動生成システム 開発環境起動中..."

# 環境変数ファイル確認
if [ ! -f .env ]; then
    echo "❌ .env ファイルが見つかりません。.env.example をコピーして設定してください。"
    exit 1
fi

# Docker Compose起動
echo "📦 Docker コンテナ起動中..."
docker-compose up -d --build

# サービス起動待機
echo "⏳ サービス起動待機中..."
sleep 30

# ヘルスチェック
echo "🔍 ヘルスチェック実行中..."

# データベース接続確認
echo "データベース接続確認..."
docker-compose exec -T web python manage.py check --database default

# マイグレーション実行
echo "データベースマイグレーション実行..."
docker-compose exec -T web python manage.py migrate

# 初期データ投入
echo "初期データ投入..."
docker-compose exec -T web python manage.py loaddata fixtures/initial_data.json

# スーパーユーザー作成（初回のみ）
echo "管理者ユーザー作成（既に存在する場合はスキップ）..."
docker-compose exec -T web python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='admin').exists():
    User.objects.create_superuser('admin', 'admin@example.com', 'admin')
    print('管理者ユーザー作成完了: admin/admin')
else:
    print('管理者ユーザーは既に存在します')
"

# 静的ファイル収集
echo "静的ファイル収集..."
docker-compose exec -T web python manage.py collectstatic --noinput

echo "✅ 開発環境起動完了！"
echo ""
echo "🌐 アクセスURL:"
echo "   フロントエンド: http://localhost:3000"
echo "   API: http://localhost:8000/api/v1/"
echo "   Django Admin: http://localhost:8000/admin/ (admin/admin)"
echo "   Flower (Celery監視): http://localhost:5555"
echo ""
echo "📚 次のステップ:"
echo "   1. カードデータの収集設定"
echo "   2. OpenAI API キーの設定確認"
echo "   3. WordPress連携の設定"
echo ""

---
# scripts/deploy-prod.sh
#!/bin/bash

# 本番環境デプロイスクリプト

echo "🚀 本番環境デプロイ開始..."

# 環境確認
if [ ! -f .env.prod ]; then
    echo "❌ .env.prod ファイルが見つかりません。"
    exit 1
fi

# 本番環境ビルド
echo "📦 本番環境ビルド中..."
docker-compose -f docker-compose.prod.yml build --no-cache

# 既存コンテナ停止
echo "🔄 既存サービス停止中..."
docker-compose -f docker-compose.prod.yml down

# 本番環境起動
echo "🚀 本番環境起動中..."
docker-compose -f docker-compose.prod.yml up -d

# データベースマイグレーション
echo "📊 データベースマイグレーション実行..."
docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate

# 静的ファイル収集
echo "📁 静的ファイル収集..."
docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput

# ヘルスチェック
echo "🏥 ヘルスチェック..."
sleep 60

if curl -f http://localhost/api/v1/health/; then
    echo "✅ デプロイ完了！"
    echo "🌐 サイトURL: https://your-domain.com"
else
    echo "❌ ヘルスチェック失敗。ログを確認してください。"
    docker-compose -f docker-compose.prod.yml logs
fi