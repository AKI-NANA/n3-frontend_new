
// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * NAGANO-3 eBayÂèóÊ≥®ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† - „É™„Ç¢„É´„Çø„Ç§„É†ÈÄö‰ø°„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éû„Éç„Éº„Ç∏„É£„Éº
 * 
 * @version 3.0.0
 * @date 2025-06-11
 * @description WebSocketÈÄö‰ø°„Å®„É™„Ç¢„É´„Çø„Ç§„É†UIÊõ¥Êñ∞„Ç∑„Çπ„ÉÜ„É†
 */

class N3RealTimeManager {
    constructor() {
        this.websocket = null;
        this.reconnectInterval = 5000;
        this.maxReconnectAttempts = 10;
        this.reconnectAttempts = 0;
        this.clientId = null;
        this.isConnected = false;
        this.subscriptions = new Map();
        this.messageQueue = [];
        this.heartbeatInterval = null;
        
        // UIÊõ¥Êñ∞„Éû„Éç„Éº„Ç∏„É£„Éº
        this.uiManager = new N3UIUpdateManager();
        
        // ÈÄöÁü•„Éû„Éç„Éº„Ç∏„É£„Éº
        this.notificationManager = new N3NotificationManager();
        
        // „Éá„Éº„Çø„Ç≠„É£„ÉÉ„Ç∑„É•
        this.dataCache = new Map();
        
        console.log('üöÄ N3 „É™„Ç¢„É´„Çø„Ç§„É†„Éû„Éç„Éº„Ç∏„É£„ÉºÂàùÊúüÂåñ');
        this.init();
    }
    
    init() {
        // WebSocketÊé•Á∂ö
        this.connect();
        
        // „Éö„Éº„Ç∏Èõ¢ËÑ±ÊôÇ„ÅÆÂá¶ÁêÜ
        window.addEventListener('beforeunload', () => {
            this.disconnect();
        });
        
        // „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁä∂ÊÖãÁõ£Ë¶ñ
        window.addEventListener('online', () => {
            console.log('üåê „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂæ©Êóß');
            this.connect();
        });
        
        window.addEventListener('offline', () => {
            console.log('üì∂ „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÂàáÊñ≠');
            this.notificationManager.showOfflineNotification();
        });
        
        // ÂèØË¶ñÊÄßÂ§âÊõ¥Áõ£Ë¶ñÔºà„Çø„ÉñÂàá„ÇäÊõø„ÅàÔºâ
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible') {
                this.handleTabVisible();
            } else {
                this.handleTabHidden();
            }
        });
    }
    
    connect() {
        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {
            return;
        }
        
        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const wsHost = window.N3_CONFIG?.websocket_host || 'localhost:8765';
        const wsUrl = `${wsProtocol}//${wsHost}`;
        
        console.log(`üîå WebSocketÊé•Á∂öÈñãÂßã: ${wsUrl}`);
        
        try {
            this.websocket = new WebSocket(wsUrl);
            this.setupWebSocketHandlers();
        } catch (error) {
            console.error('‚ùå WebSocketÊé•Á∂ö„Ç®„É©„Éº:', error);
            this.scheduleReconnect();
        }
    }
    
    setupWebSocketHandlers() {
        this.websocket.onopen = (event) => {
            console.log('‚úÖ WebSocketÊé•Á∂öÊàêÂäü');
            this.isConnected = true;
            this.reconnectAttempts = 0;
            this.startHeartbeat();
            this.processMessageQueue();
            this.notificationManager.showConnectionStatus(true);
        };
        
        this.websocket.onmessage = (event) => {
            try {
                const data = JSON.parse(event.data);
                this.handleMessage(data);
            } catch (error) {
                console.error('‚ùå „É°„ÉÉ„Çª„Éº„Ç∏Ëß£Êûê„Ç®„É©„Éº:', error);
            }
        };
        
        this.websocket.onclose = (event) => {
            console.log('üîå WebSocketÊé•Á∂öÁµÇ‰∫Ü:', event.code);
            this.isConnected = false;
            this.stopHeartbeat();
            this.notificationManager.showConnectionStatus(false);
            
            if (event.code !== 1000) { // Ê≠£Â∏∏ÁµÇ‰∫Ü‰ª•Â§ñ
                this.scheduleReconnect();
            }
        };
        
        this.websocket.onerror = (error) => {
            console.error('‚ùå WebSocket „Ç®„É©„Éº:', error);
            this.notificationManager.showErrorNotification('Êé•Á∂ö„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
        };
    }
    
    handleMessage(data) {
        console.log('üì® Âèó‰ø°„É°„ÉÉ„Çª„Éº„Ç∏:', data.type);
        
        switch (data.type) {
            case 'connection_established':
                this.handleConnectionEstablished(data);
                break;
            
            case 'orders_updated':
                this.handleOrdersUpdated(data);
                break;
            
            case 'stock_alerts':
                this.handleStockAlerts(data);
                break;
            
            case 'low_stock_alert':
                this.handleLowStockAlert(data);
                break;
            
            case 'price_alert':
                this.handlePriceAlert(data);
                break;
            
            case 'delivery_completed':
                this.handleDeliveryCompleted(data);
                break;
            
            case 'ai_recommendations':
                this.handleAIRecommendations(data);
                break;
            
            case 'health_status':
                this.handleHealthStatus(data);
                break;
            
            case 'initial_orders':
                this.handleInitialOrders(data);
                break;
            
            case 'pong':
                this.handlePong(data);
                break;
            
            default:
                console.warn('‚ö†Ô∏è Êú™Áü•„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Çø„Ç§„Éó:', data.type);
        }
        
        // „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥Âá¶ÁêÜ
        this.processSubscriptions(data);
    }
    
    handleConnectionEstablished(data) {
        this.clientId = data.client_id;
        console.log(`‚úÖ „ÇØ„É©„Ç§„Ç¢„É≥„ÉàIDÂèñÂæó: ${this.clientId}`);
        
        // ÂêåÊúü„Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫
        this.uiManager.updateSyncStatus(data.sync_status);
        
        // „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÁôªÈå≤
        this.registerDefaultSubscriptions();
    }
    
    handleOrdersUpdated(data) {
        console.log(`üì¶ ÂèóÊ≥®Êõ¥Êñ∞: ${data.count}‰ª∂`);
        
        // „Éá„Éº„Çø„Ç≠„É£„ÉÉ„Ç∑„É•Êõ¥Êñ∞
        this.dataCache.set('recent_orders', data.data);
        
        // UIÊõ¥Êñ∞
        this.uiManager.updateOrdersList(data.data);
        
        // Êñ∞Ë¶èÂèóÊ≥®ÈÄöÁü•
        if (data.data.length > 0) {
            this.notificationManager.showNewOrdersNotification(data.count);
            
            // Èü≥Â£∞ÈÄöÁü•ÔºàË®≠ÂÆö„Å´Âøú„Åò„Å¶Ôºâ
            if (window.N3_CONFIG?.sound_notifications) {
                this.playNotificationSound('new_order');
            }
        }
        
        // È´òÂà©ÁõäÂèóÊ≥®„ÅÆ„Éè„Ç§„É©„Ç§„Éà
        this.highlightHighProfitOrders(data.data);
    }
    
    handleStockAlerts(data) {
        console.log('üìä Âú®Â∫´„Ç¢„É©„Éº„ÉàÂèó‰ø°');
        
        // Âú®Â∫´„Ç¢„É©„Éº„ÉàË°®Á§∫
        this.uiManager.updateStockAlerts(data.data);
        
        // Á∑äÊÄ•Âú®Â∫´„Ç¢„É©„Éº„ÉàÈÄöÁü•
        const criticalStock = data.data.filter(item => item.quantity === 0);
        if (criticalStock.length > 0) {
            this.notificationManager.showCriticalStockAlert(criticalStock);
        }
    }
    
    handleLowStockAlert(data) {
        console.log('‚ö†Ô∏è ‰ΩéÂú®Â∫´„Ç¢„É©„Éº„Éà');
        
        // ‰ΩéÂú®Â∫´„Éê„ÉÉ„Ç∏Ë°®Á§∫
        this.uiManager.showLowStockBadge(data.data.length);
        
        // Ëá™Âãï‰ªïÂÖ•„ÇåÊé®Â•®Ë°®Á§∫
        this.uiManager.showAutoReorderSuggestions(data.data);
        
        // „Éá„Çπ„ÇØ„Éà„ÉÉ„ÉóÈÄöÁü•
        this.notificationManager.showDesktopNotification(
            '‰ΩéÂú®Â∫´„Ç¢„É©„Éº„Éà',
            `${data.data.length}ÂïÜÂìÅ„ÅÆÂú®Â∫´„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô`
        );
    }
    
    handlePriceAlert(data) {
        console.log('üí∞ ‰æ°Ê†ºÂ§âÂãï„Ç¢„É©„Éº„Éà');
        
        // ‰æ°Ê†ºÂ§âÂãïË°®Á§∫
        this.uiManager.updatePriceAlerts(data.data);
        
        // ‰ªïÂÖ•„Çå„Çø„Ç§„Éü„É≥„Ç∞ÈÄöÁü•
        const buyOpportunities = data.data.filter(p => p.change_rate < -15);
        if (buyOpportunities.length > 0) {
            this.notificationManager.showBuyOpportunityAlert(buyOpportunities);
        }
    }
    
    handleDeliveryCompleted(data) {
        console.log('üöö ÈÖçÈÄÅÂÆå‰∫ÜÈÄöÁü•');
        
        // ÈÖçÈÄÅÂÆå‰∫ÜUIÊõ¥Êñ∞
        this.uiManager.updateDeliveryStatus(data.data);
        
        // ÂÆå‰∫ÜÈÄöÁü•Ë°®Á§∫
        this.notificationManager.showDeliveryCompletedNotification(data.data.length);
    }
    
    handleAIRecommendations(data) {
        console.log('ü§ñ AIÊé®Â•®„Éá„Éº„ÇøÂèó‰ø°');
        
        // AIÊé®Â•®Ë°®Á§∫
        this.uiManager.updateAIRecommendations(data.data);
        
        // È´òÁ¢∫Â∫¶Êé®Â•®„ÅÆ„Éè„Ç§„É©„Ç§„Éà
        const highConfidenceRecs = data.data.filter(rec => rec.confidence_score > 85);
        if (highConfidenceRecs.length > 0) {
            this.uiManager.highlightHighConfidenceRecommendations(highConfidenceRecs);
        }
    }
    
    handleHealthStatus(data) {
        // „Ç∑„Çπ„ÉÜ„É†„Éò„É´„ÇπË°®Á§∫Êõ¥Êñ∞
        this.uiManager.updateHealthStatus(data.data);
        
        // ÂïèÈ°å„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆË≠¶ÂëäË°®Á§∫
        if (data.data.status !== 'healthy') {
            this.notificationManager.showSystemHealthWarning(data.data);
        }
    }
    
    handleInitialOrders(data) {
        console.log('üìã ÂàùÊúü„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÂÆå‰∫Ü');
        
        // ÂàùÊúüÂèóÊ≥®„Éá„Éº„ÇøË°®Á§∫
        this.uiManager.loadInitialOrders(data.data);
        
        // „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖãËß£Èô§
        this.uiManager.hideLoadingIndicator();
    }
    
    handlePong(data) {
        // „Éè„Éº„Éà„Éì„Éº„ÉàÂøúÁ≠îÂá¶ÁêÜ
        console.log('üíì „Éè„Éº„Éà„Éì„Éº„ÉàÁ¢∫Ë™ç');
    }
    
    // ========== ÈÄÅ‰ø°„É°„ÇΩ„ÉÉ„Éâ ==========
    
    sendMessage(message) {
        if (this.isConnected && this.websocket.readyState === WebSocket.OPEN) {
            this.websocket.send(JSON.stringify(message));
        } else {
            // „Ç≠„É•„Éº„Å´ËøΩÂä†
            this.messageQueue.push(message);
            console.log('üì§ „É°„ÉÉ„Çª„Éº„Ç∏„Çí„Ç≠„É•„Éº„Å´ËøΩÂä†:', message.type);
        }
    }
    
    requestSync(syncType) {
        this.sendMessage({
            type: 'sync_request',
            sync_type: syncType,
            timestamp: new Date().toISOString()
        });
    }
    
    subscribe(eventType, callback) {
        if (!this.subscriptions.has(eventType)) {
            this.subscriptions.set(eventType, new Set());
        }
        this.subscriptions.get(eventType).add(callback);
        
        // „Çµ„Éº„Éê„Éº„Å´„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÈÄöÁü•
        this.sendMessage({
            type: 'subscription',
            event_type: eventType,
            action: 'subscribe'
        });
    }
    
    unsubscribe(eventType, callback) {
        if (this.subscriptions.has(eventType)) {
            this.subscriptions.get(eventType).delete(callback);
            
            if (this.subscriptions.get(eventType).size === 0) {
                this.subscriptions.delete(eventType);
                
                // „Çµ„Éº„Éê„Éº„Å´„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥Ëß£Èô§ÈÄöÁü•
                this.sendMessage({
                    type: 'subscription',
                    event_type: eventType,
                    action: 'unsubscribe'
                });
            }
        }
    }
    
    updateOrderStatus(orderId, newStatus) {
        this.sendMessage({
            type: 'order_status_update',
            order_id: orderId,
            new_status: newStatus,
            timestamp: new Date().toISOString()
        });
    }
    
    // ========== Êé•Á∂öÁÆ°ÁêÜ ==========
    
    scheduleReconnect() {
        if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            console.error('‚ùå ÊúÄÂ§ßÂÜçÊé•Á∂öË©¶Ë°åÂõûÊï∞„Å´ÈÅî„Åó„Åæ„Åó„Åü');
            this.notificationManager.showMaxReconnectError();
            return;
        }
        
        this.reconnectAttempts++;
        const delay = this.reconnectInterval * Math.pow(2, this.reconnectAttempts - 1);
        
        console.log(`üîÑ ${delay}msÂæå„Å´ÂÜçÊé•Á∂öË©¶Ë°å (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);
        
        setTimeout(() => {
            this.connect();
        }, delay);
    }
    
    disconnect() {
        if (this.websocket) {
            this.websocket.close(1000, 'Normal closure');
            this.websocket = null;
        }
        this.stopHeartbeat();
    }
    
    startHeartbeat() {
        this.heartbeatInterval = setInterval(() => {
            if (this.isConnected) {
                this.sendMessage({
                    type: 'ping',
                    timestamp: new Date().toISOString()
                });
            }
        }, 30000); // 30ÁßíÈñìÈöî
    }
    
    stopHeartbeat() {
        if (this.heartbeatInterval) {
            clearInterval(this.heartbeatInterval);
            this.heartbeatInterval = null;
        }
    }
    
    processMessageQueue() {
        while (this.messageQueue.length > 0) {
            const message = this.messageQueue.shift();
            this.sendMessage(message);
        }
    }
    
    processSubscriptions(data) {
        if (this.subscriptions.has(data.type)) {
            this.subscriptions.get(data.type).forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error('‚ùå „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„Ç®„É©„Éº:', error);
                }
            });
        }
    }
    
    registerDefaultSubscriptions() {
        // „Éá„Éï„Ç©„É´„Éà„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥ÁôªÈå≤
        this.subscribe('orders_updated', (data) => {
            console.log('üì¶ ÂèóÊ≥®Êõ¥Êñ∞„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥Âá¶ÁêÜ');
        });
        
        this.subscribe('stock_alerts', (data) => {
            console.log('üìä Âú®Â∫´„Ç¢„É©„Éº„Éà„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥Âá¶ÁêÜ');
        });
    }
    
    // ========== „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£ ==========
    
    handleTabVisible() {
        // „Çø„Éñ„ÅåË°®Á§∫„Åï„Çå„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
        if (!this.isConnected) {
            this.connect();
        }
        
        // ÊúÄÊñ∞„Éá„Éº„ÇøË¶ÅÊ±Ç
        this.requestSync('all');
    }
    
    handleTabHidden() {
        // „Çø„Éñ„ÅåÈùûË°®Á§∫„Å´„Å™„Å£„ÅüÊôÇ„ÅÆÂá¶ÁêÜ
        // Êé•Á∂ö„ÅØÁ∂≠ÊåÅ„Åô„Çã„Åå„ÄÅÈ†ªÂ∫¶„Çí‰∏ã„Åí„Çã
    }
    
    highlightHighProfitOrders(orders) {
        const highProfitOrders = orders.filter(order => {
            const profitRate = parseFloat(order.profit_rate || 0);
            return profitRate > 25; // 25%‰ª•‰∏ä
        });
        
        if (highProfitOrders.length > 0) {
            this.uiManager.highlightHighProfitOrders(highProfitOrders);
        }
    }
    
    playNotificationSound(soundType) {
        const soundMap = {
            'new_order': '/assets/sounds/new_order.mp3',
            'alert': '/assets/sounds/alert.mp3',
            'success': '/assets/sounds/success.mp3'
        };
        
        const audio = new Audio(soundMap[soundType]);
        audio.volume = 0.3;
        audio.play().catch(e => console.log('üîá Èü≥Â£∞ÂÜçÁîüÁÑ°Âäπ'));
    }
}

/**
 * UIÊõ¥Êñ∞„Éû„Éç„Éº„Ç∏„É£„Éº
 */
class N3UIUpdateManager {
    constructor() {
        this.orderTable = document.querySelector('.juchu-kanri__order-table tbody');
        this.stockAlertsContainer = document.querySelector('.stock-alerts-container');
        this.syncStatusIndicator = document.querySelector('.sync-status-indicator');
        this.aiRecommendationsContainer = document.querySelector('.ai-recommendations-container');
    }
    
    updateOrdersList(orders) {
        if (!this.orderTable) return;
        
        // Êñ∞Ë¶èÂèóÊ≥®„ÅÆ„ÅøËøΩÂä†ÔºàÈáçË§áÂõûÈÅøÔºâ
        orders.forEach(order => {
            const existingRow = document.querySelector(`[data-order-id="${order.order_id}"]`);
            if (!existingRow) {
                this.addOrderRow(order);
            }
        });
        
        // „ÉÜ„Éº„Éñ„É´ÂÜç„ÇΩ„Éº„Éà
        this.sortOrderTable();
    }
    
    addOrderRow(order) {
        const row = document.createElement('tr');
        row.className = 'juchu-kanri__order-row';
        row.setAttribute('data-order-id', order.order_id);
        
        // È´òÂà©ÁõäÂèóÊ≥®„ÅÆ„Éè„Ç§„É©„Ç§„Éà
        const profitRate = parseFloat(order.profit_rate || 0);
        if (profitRate > 25) {
            row.classList.add('juchu-kanri__order-row--high-profit');
        }
        
        row.innerHTML = `
            <td class="juchu-kanri__order-cell">${order.order_id}</td>
            <td class="juchu-kanri__order-cell">${order.item_title}</td>
            <td class="juchu-kanri__order-cell">¬•${order.sale_price?.toLocaleString()}</td>
            <td class="juchu-kanri__order-cell">
                <span class="juchu-kanri__profit-rate ${profitRate > 20 ? 'high' : ''}">${profitRate.toFixed(1)}%</span>
            </td>
            <td class="juchu-kanri__order-cell">
                <span class="juchu-kanri__status-badge juchu-kanri__status-badge--${order.status}">${order.status}</span>
            </td>
            <td class="juchu-kanri__order-cell">${new Date(order.created_at).toLocaleDateString('ja-JP')}</td>
        `;
        
        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥‰ªò„Åç„ÅßËøΩÂä†
        row.style.opacity = '0';
        row.style.transform = 'translateY(-10px)';
        this.orderTable.insertBefore(row, this.orderTable.firstChild);
        
        // „Éï„Çß„Éº„Éâ„Ç§„É≥„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        requestAnimationFrame(() => {
            row.style.transition = 'all 0.3s ease';
            row.style.opacity = '1';
            row.style.transform = 'translateY(0)';
        });
    }
    
    updateStockAlerts(alerts) {
        if (!this.stockAlertsContainer) return;
        
        this.stockAlertsContainer.innerHTML = '';
        
        alerts.forEach(alert => {
            const alertElement = document.createElement('div');
            alertElement.className = `stock-alert stock-alert--${alert.severity}`;
            alertElement.innerHTML = `
                <div class="stock-alert__icon">‚ö†Ô∏è</div>
                <div class="stock-alert__content">
                    <div class="stock-alert__title">${alert.sku}</div>
                    <div class="stock-alert__message">Âú®Â∫´: ${alert.quantity}ÂÄã</div>
                </div>
                <div class="stock-alert__actions">
                    <button class="btn btn--sm btn--primary" onclick="window.shiireKanriManager.showReorderDialog('${alert.sku}')">
                        ‰ªïÂÖ•„Çå
                    </button>
                </div>
            `;
            
            this.stockAlertsContainer.appendChild(alertElement);
        });
    }
    
    updateSyncStatus(syncStatus) {
        if (!this.syncStatusIndicator) return;
        
        const statusText = Object.values(syncStatus).every(s => s.status === 'ready') 
            ? 'ÂêåÊúüÂÆå‰∫Ü' 
            : 'ÂêåÊúü‰∏≠...';
        
        const statusClass = Object.values(syncStatus).some(s => s.status === 'error')
            ? 'sync-status--error'
            : Object.values(syncStatus).some(s => s.status === 'syncing')
                ? 'sync-status--syncing'
                : 'sync-status--ready';
        
        this.syncStatusIndicator.className = `sync-status-indicator ${statusClass}`;
        this.syncStatusIndicator.textContent = statusText;
    }
    
    updateAIRecommendations(recommendations) {
        if (!this.aiRecommendationsContainer) return;
        
        this.aiRecommendationsContainer.innerHTML = '';
        
        recommendations.slice(0, 5).forEach(rec => {
            const recElement = document.createElement('div');
            recElement.className = 'ai-recommendation';
            recElement.innerHTML = `
                <div class="ai-recommendation__header">
                    <span class="ai-recommendation__title">${rec.product_title}</span>
                    <span class="ai-recommendation__confidence">${rec.confidence_score}%</span>
                </div>
                <div class="ai-recommendation__body">
                    <div class="ai-recommendation__profit">‰∫àÊÉ≥Âà©ÁõäÁéá: ${rec.predicted_profit_rate}%</div>
                    <div class="ai-recommendation__action">${rec.recommended_action}</div>
                </div>
            `;
            
            if (rec.confidence_score > 85) {
                recElement.classList.add('ai-recommendation--high-confidence');
            }
            
            this.aiRecommendationsContainer.appendChild(recElement);
        });
    }
    
    showLowStockBadge(count) {
        const badge = document.querySelector('.low-stock-badge');
        if (badge) {
            badge.textContent = count;
            badge.style.display = count > 0 ? 'inline-block' : 'none';
        }
    }
    
    highlightHighProfitOrders(orders) {
        orders.forEach(order => {
            const row = document.querySelector(`[data-order-id="${order.order_id}"]`);
            if (row) {
                row.classList.add('juchu-kanri__order-row--high-profit-pulse');
                setTimeout(() => {
                    row.classList.remove('juchu-kanri__order-row--high-profit-pulse');
                }, 2000);
            }
        });
    }
    
    sortOrderTable() {
        if (!this.orderTable) return;
        
        const rows = Array.from(this.orderTable.querySelectorAll('tr'));
        rows.sort((a, b) => {
            const aTime = new Date(a.querySelector('.juchu-kanri__order-cell:last-child').textContent);
            const bTime = new Date(b.querySelector('.juchu-kanri__order-cell:last-child').textContent);
            return bTime - aTime; // Êñ∞„Åó„ÅÑÈ†Ü
        });
        
        rows.forEach(row => this.orderTable.appendChild(row));
    }
    
    loadInitialOrders(orders) {
        if (!this.orderTable) return;
        
        this.orderTable.innerHTML = '';
        orders.forEach(order => this.addOrderRow(order));
    }
    
    hideLoadingIndicator() {
        const loadingElement = document.querySelector('.loading-indicator');
        if (loadingElement) {
            loadingElement.style.display = 'none';
        }
    }
    
    updateHealthStatus(healthData) {
        const healthIndicator = document.querySelector('.health-status-indicator');
        if (healthIndicator) {
            healthIndicator.className = `health-status-indicator health-status--${healthData.status}`;
            healthIndicator.title = `„Ç∑„Çπ„ÉÜ„É†Áä∂ÊÖã: ${healthData.status}`;
        }
    }
    
    updateDeliveryStatus(deliveredOrders) {
        deliveredOrders.forEach(order => {
            const row = document.querySelector(`[data-order-id="${order.order_id}"]`);
            if (row) {
                const statusCell = row.querySelector('.juchu-kanri__status-badge');
                if (statusCell) {
                    statusCell.className = 'juchu-kanri__status-badge juchu-kanri__status-badge--delivered';
                    statusCell.textContent = 'ÈÖçÈÄÅÂÆå‰∫Ü';
                }
            }
        });
    }
    
    updatePriceAlerts(priceData) {
        const priceAlertsContainer = document.querySelector('.price-alerts-container');
        if (!priceAlertsContainer) return;
        
        priceAlertsContainer.innerHTML = '';
        
        priceData.forEach(price => {
            const alertElement = document.createElement('div');
            alertElement.className = `price-alert ${price.change_rate < 0 ? 'price-alert--down' : 'price-alert--up'}`;
            alertElement.innerHTML = `
                <div class="price-alert__product">${price.product_name}</div>
                <div class="price-alert__change">${price.change_rate > 0 ? '+' : ''}${price.change_rate.toFixed(1)}%</div>
                <div class="price-alert__recommendation">${price.recommendation}</div>
            `;
            
            priceAlertsContainer.appendChild(alertElement);
        });
    }
    
    showAutoReorderSuggestions(lowStockItems) {
        const suggestionsContainer = document.querySelector('.auto-reorder-suggestions');
        if (!suggestionsContainer) return;
        
        lowStockItems.forEach(item => {
            if (item.auto_reorder_eligible) {
                const suggestion = document.createElement('div');
                suggestion.className = 'auto-reorder-suggestion';
                suggestion.innerHTML = `
                    <div class="auto-reorder-suggestion__content">
                        <strong>${item.sku}</strong> - Ëá™Âãï‰ªïÂÖ•„ÇåÊé®Â•®
                        <small>‰∫àÊÉ≥Âà©ÁõäÁéá: ${item.predicted_profit_rate}%</small>
                    </div>
                    <button class="btn btn--sm btn--success" onclick="window.shiireKanriManager.executeAutoReorder('${item.sku}')">
                        ÂÆüË°å
                    </button>
                `;
                
                suggestionsContainer.appendChild(suggestion);
            }
        });
    }
    
    highlightHighConfidenceRecommendations(recommendations) {
        recommendations.forEach(rec => {
            setTimeout(() => {
                const element = document.querySelector(`[data-recommendation-id="${rec.id}"]`);
                if (element) {
                    element.classList.add('ai-recommendation--highlight');
                    setTimeout(() => {
                        element.classList.remove('ai-recommendation--highlight');
                    }, 3000);
                }
            }, Math.random() * 1000); // „É©„É≥„ÉÄ„É†„Å™ÈÅÖÂª∂„Åß„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        });
    }
}

/**
 * ÈÄöÁü•„Éû„Éç„Éº„Ç∏„É£„Éº
 */
class N3NotificationManager {
    constructor() {
        this.notificationContainer = this.createNotificationContainer();
        this.desktopNotificationEnabled = this.checkDesktopNotificationPermission();
    }
    
    createNotificationContainer() {
        let container = document.querySelector('.n3-notifications');
        if (!container) {
            container = document.createElement('div');
            container.className = 'n3-notifications';
            document.body.appendChild(container);
        }
        return container;
    }
    
    checkDesktopNotificationPermission() {
        if ('Notification' in window) {
            if (Notification.permission === 'granted') {
                return true;
            } else if (Notification.permission !== 'denied') {
                Notification.requestPermission().then(permission => {
                    return permission === 'granted';
                });
            }
        }
        return false;
    }
    
    showNotification(type, title, message, duration = 5000) {
        const notification = document.createElement('div');
        notification.className = `n3-notification n3-notification--${type}`;
        notification.innerHTML = `
            <div class="n3-notification__icon">${this.getNotificationIcon(type)}</div>
            <div class="n3-notification__content">
                <div class="n3-notification__title">${title}</div>
                <div class="n3-notification__message">${message}</div>
            </div>
            <button class="n3-notification__close">&times;</button>
        `;
        
        // Èñâ„Åò„Çã„Éú„Çø„É≥„Ç§„Éô„É≥„Éà
        notification.querySelector('.n3-notification__close').addEventListener('click', () => {
            this.removeNotification(notification);
        });
        
        this.notificationContainer.appendChild(notification);
        
        // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        requestAnimationFrame(() => {
            notification.classList.add('n3-notification--show');
        });
        
        // Ëá™ÂãïÂâäÈô§
        if (duration > 0) {
            setTimeout(() => {
                this.removeNotification(notification);
            }, duration);
        }
        
        return notification;
    }
    
    removeNotification(notification) {
        notification.classList.remove('n3-notification--show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }
    
    getNotificationIcon(type) {
        const icons = {
            'success': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå',
            'info': '‚ÑπÔ∏è',
            'order': 'üì¶',
            'stock': 'üìä',
            'price': 'üí∞',
            'delivery': 'üöö'
        };
        return icons[type] || '‚ÑπÔ∏è';
    }
    
    showConnectionStatus(isConnected) {
        const statusElement = document.querySelector('.connection-status');
        if (statusElement) {
            statusElement.className = `connection-status connection-status--${isConnected ? 'connected' : 'disconnected'}`;
            statusElement.textContent = isConnected ? 'Êé•Á∂ö‰∏≠' : 'ÂàáÊñ≠';
        }
        
        if (!isConnected) {
            this.showNotification('warning', 'Êé•Á∂öÂàáÊñ≠', '„Çµ„Éº„Éê„Éº„Å®„ÅÆÊé•Á∂ö„ÅåÂàáÊñ≠„Åï„Çå„Åæ„Åó„Åü„ÄÇÂÜçÊé•Á∂ö„ÇíË©¶Ë°å‰∏≠...', 3000);
        }
    }
    
    showNewOrdersNotification(count) {
        this.showNotification('order', 'Êñ∞Ë¶èÂèóÊ≥®', `${count}‰ª∂„ÅÆÊñ∞„Åó„ÅÑÊ≥®Êñá„Åå„ÅÇ„Çä„Åæ„Åô`, 4000);
    }
    
    showCriticalStockAlert(criticalItems) {
        this.showNotification(
            'warning', 
            'Âú®Â∫´Âàá„ÇåË≠¶Âëä', 
            `${criticalItems.length}ÂïÜÂìÅ„ÅÆÂú®Â∫´„ÅåÂàá„Çå„Å¶„ÅÑ„Åæ„Åô`, 
            8000
        );
    }
    
    showBuyOpportunityAlert(opportunities) {
        this.showNotification(
            'price', 
            '‰ªïÂÖ•„ÇåÊ©ü‰ºö', 
            `${opportunities.length}ÂïÜÂìÅ„Åß‰æ°Ê†º‰∏ãËêΩ„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü`, 
            6000
        );
    }
    
    showDeliveryCompletedNotification(count) {
        this.showNotification('delivery', 'ÈÖçÈÄÅÂÆå‰∫Ü', `${count}‰ª∂„ÅÆÈÖçÈÄÅ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü`, 4000);
    }
    
    showSystemHealthWarning(healthData) {
        this.showNotification(
            'error', 
            '„Ç∑„Çπ„ÉÜ„É†Ë≠¶Âëä', 
            `„Ç∑„Çπ„ÉÜ„É†Áä∂ÊÖã: ${healthData.status}`, 
            10000
        );
    }
    
    showOfflineNotification() {
        this.showNotification('warning', '„Ç™„Éï„É©„Ç§„É≥', '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 0);
    }
    
    showMaxReconnectError() {
        this.showNotification(
            'error', 
            'Êé•Á∂ö„Ç®„É©„Éº', 
            'ÊúÄÂ§ßÂÜçÊé•Á∂öË©¶Ë°åÂõûÊï∞„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', 
            0
        );
    }
    
    showErrorNotification(message) {
        this.showNotification('error', '„Ç®„É©„Éº', message, 5000);
    }
    
    showDesktopNotification(title, message) {
        if (this.desktopNotificationEnabled && document.hidden) {
            new Notification(title, {
                body: message,
                icon: '/favicon.ico',
                tag: 'nagano3-notification'
            });
        }
    }
}

// „Ç∞„É≠„Éº„Éê„É´„Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê
window.n3RealTimeManager = new N3RealTimeManager();

// ‰ªñ„ÅÆ„Éû„Éç„Éº„Ç∏„É£„Éº„Åã„Çâ„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ„Å´„Åô„Çã
window.N3RealTime = {
    subscribe: (eventType, callback) => window.n3RealTimeManager.subscribe(eventType, callback),
    unsubscribe: (eventType, callback) => window.n3RealTimeManager.unsubscribe(eventType, callback),
    sendMessage: (message) => window.n3RealTimeManager.sendMessage(message),
    requestSync: (syncType) => window.n3RealTimeManager.requestSync(syncType),
    updateOrderStatus: (orderId, status) => window.n3RealTimeManager.updateOrderStatus(orderId, status)
};

console.log('üéØ N3 „É™„Ç¢„É´„Çø„Ç§„É†ÈÄö‰ø°„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü');