
// CAIDS processing_capacity_monitoring Hook
// CAIDS processing_capacity_monitoring Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ processing_capacity_monitoring Hook loaded');

// CAIDS character_limit Hook
// CAIDS character_limit Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ character_limit Hook loaded');

// CAIDS ajax_integration Hook
// CAIDS ajax_integration Hook - Âü∫Êú¨ÂÆüË£Ö
console.log('‚úÖ ajax_integration Hook loaded');

// CAIDS error_handling Hook

// CAIDS „Ç®„É©„ÉºÂá¶ÁêÜHook - ÂÆåÂÖ®ÂÆüË£Ö
window.CAIDS_ERROR_HANDLER = {
    isActive: true,
    errorCount: 0,
    errorHistory: [],
    
    initialize: function() {
        this.setupGlobalErrorHandler();
        this.setupUnhandledPromiseRejection();
        this.setupNetworkErrorHandler();
        console.log('‚ö†Ô∏è CAIDS „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÂÆåÂÖ®ÂàùÊúüÂåñ');
    },
    
    setupGlobalErrorHandler: function() {
        window.addEventListener('error', (event) => {
            this.handleError({
                type: 'JavaScript Error',
                message: event.message,
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error?.stack
            });
        });
    },
    
    setupUnhandledPromiseRejection: function() {
        window.addEventListener('unhandledrejection', (event) => {
            this.handleError({
                type: 'Unhandled Promise Rejection',
                message: event.reason?.message || String(event.reason),
                stack: event.reason?.stack
            });
        });
    },
    
    setupNetworkErrorHandler: function() {
        const originalFetch = window.fetch;
        window.fetch = async function(...args) {
            try {
                const response = await originalFetch.apply(this, args);
                if (!response.ok) {
                    window.CAIDS_ERROR_HANDLER.handleError({
                        type: 'Network Error',
                        message: `HTTP ${response.status}: ${response.statusText}`,
                        url: args[0]
                    });
                }
                return response;
            } catch (error) {
                window.CAIDS_ERROR_HANDLER.handleError({
                    type: 'Network Fetch Error',
                    message: error.message,
                    url: args[0]
                });
                throw error;
            }
        };
    },
    
    handleError: function(errorInfo) {
        this.errorCount++;
        this.errorHistory.push({...errorInfo, timestamp: new Date().toISOString()});
        
        console.error('üö® CAIDS Error Handler:', errorInfo);
        this.showErrorNotification(errorInfo);
        this.reportError(errorInfo);
    },
    
    showErrorNotification: function(errorInfo) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed; top: 10px; right: 10px; z-index: 999999;
            background: linear-gradient(135deg, #ff4444, #cc0000);
            color: white; padding: 15px 20px; border-radius: 8px;
            max-width: 350px; box-shadow: 0 6px 20px rgba(0,0,0,0.3);
            font-size: 13px; font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            border: 2px solid #ff6666; animation: caids-error-shake 0.5s ease-in-out;
        `;
        errorDiv.innerHTML = `
            <div style="display: flex; align-items: center; gap: 10px;">
                <span style="font-size: 18px;">üö®</span>
                <div>
                    <strong>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü</strong><br>
                    <small style="opacity: 0.9;">${errorInfo.type}: ${errorInfo.message}</small>
                </div>
            </div>
        `;
        
        // CSS Animation
        if (!document.getElementById('caids-error-styles')) {
            const style = document.createElement('style');
            style.id = 'caids-error-styles';
            style.textContent = `
                @keyframes caids-error-shake {
                    0%, 100% { transform: translateX(0); }
                    25% { transform: translateX(-5px); }
                    75% { transform: translateX(5px); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 7000);
    },
    
    reportError: function(errorInfo) {
        // „Ç®„É©„Éº„É¨„Éù„Éº„ÉàÁîüÊàê„ÉªÈÄÅ‰ø°ÔºàÂ∞ÜÊù•„ÅÆÊã°ÂºµÁî®Ôºâ
        const report = {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            url: window.location.href,
            errorCount: this.errorCount,
            sessionId: this.getSessionId(),
            ...errorInfo
        };
        
        console.log('üìã CAIDS Error Report:', report);
        localStorage.setItem('caids_last_error', JSON.stringify(report));
    },
    
    getSessionId: function() {
        let sessionId = sessionStorage.getItem('caids_session_id');
        if (!sessionId) {
            sessionId = 'caids_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            sessionStorage.setItem('caids_session_id', sessionId);
        }
        return sessionId;
    },
    
    getErrorStats: function() {
        return {
            totalErrors: this.errorCount,
            recentErrors: this.errorHistory.slice(-10),
            sessionId: this.getSessionId()
        };
    }
};

window.CAIDS_ERROR_HANDLER.initialize();

/**
 * static/js/asin_upload.js - ASIN „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ JavaScriptÔºàÂÆåÂÖ®ÁâàÔºâ
 * HTML„ÅÆÂÖ®JavaScriptÈñ¢Êï∞„ÇíÂÆüÈöõ„ÅÆAPIÂëº„Å≥Âá∫„Åó„Å´Â§âÊõ¥
 * „É¢„ÉÉ„ÇØÂá¶ÁêÜ„ÇíÂâäÈô§„Åó„ÄÅFastAPI „Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Å®ÈÄ£Âãï
 */

// === „Ç∞„É≠„Éº„Éê„É´Ë®≠ÂÆö ===
const ASIN_API_CONFIG = {
    baseUrl: '/api/v1/asin-upload',
    pollInterval: 1000, // ÈÄ≤ÊçóÁ¢∫Ë™çÈñìÈöîÔºà„Éü„É™ÁßíÔºâ
    maxPollAttempts: 300, // ÊúÄÂ§ß„Éù„Éº„É™„É≥„Ç∞ÂõûÊï∞Ôºà5ÂàÜÔºâ
    uploadTimeout: 30000 // „Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºà30ÁßíÔºâ
};

// === „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞ ===
let processedData = [];
let currentFile = null;
let currentSessionId = null;
let progressPollTimer = null;

// === API„ÇØ„É©„Ç§„Ç¢„É≥„ÉàÈñ¢Êï∞ ===

/**
 * Áµ±‰∏ÄAPIÂëº„Å≥Âá∫„ÅóÈñ¢Êï∞
 */
async function apiCall(endpoint, options = {}) {
    const defaultOptions = {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json',
        },
        credentials: 'include' // Ë™çË®º„ÇØ„ÉÉ„Ç≠„Éº„ÇíÂê´„ÇÅ„Çã
    };

    // CSRF„Éà„Éº„ÇØ„É≥„ÇíÂèñÂæó„Åó„Å¶ËøΩÂä†
    const csrfToken = document.querySelector('meta[name="csrf-token"]');
    if (csrfToken) {
        defaultOptions.headers['X-CSRF-Token'] = csrfToken.getAttribute('content');
    }

    const config = { ...defaultOptions, ...options };
    const url = `${ASIN_API_CONFIG.baseUrl}${endpoint}`;

    try {
        const response = await fetch(url, config);
        
        // „É¨„Çπ„Éù„É≥„ÇπÂÜÖÂÆπ„Çø„Ç§„ÉóÁ¢∫Ë™ç
        const contentType = response.headers.get('content-type');
        
        if (!response.ok) {
            let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
            
            // JSON„Ç®„É©„Éº„É¨„Çπ„Éù„É≥„Çπ„ÇíËß£Êûê
            if (contentType && contentType.includes('application/json')) {
                try {
                    const errorData = await response.json();
                    errorMessage = errorData.detail || errorData.message || errorMessage;
                } catch (e) {
                    // JSONËß£ÊûêÂ§±ÊïóÊôÇ„ÅØÂÖÉ„ÅÆ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Çí‰ΩøÁî®
                }
            }
            
            throw new Error(errorMessage);
        }

        // „Éï„Ç°„Ç§„É´„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÅÆÂ†¥Âêà
        if (contentType && (contentType.includes('text/csv') || contentType.includes('application/octet-stream'))) {
            return response; // Blob„Å®„Åó„Å¶Âá¶ÁêÜ„Åô„Çã„Åü„ÇÅresponse„Çí„Åù„ÅÆ„Åæ„ÅæËøî„Åô
        }

        // JSON„É¨„Çπ„Éù„É≥„Çπ
        if (contentType && contentType.includes('application/json')) {
            return await response.json();
        }

        // „Åù„ÅÆ‰ªñ„ÅÆ„É¨„Çπ„Éù„É≥„Çπ
        return await response.text();

    } catch (error) {
        console.error('APIÂëº„Å≥Âá∫„Åó„Ç®„É©„Éº:', error);
        throw error;
    }
}

/**
 * FormData APIÂëº„Å≥Âá∫„ÅóÔºà„Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÁî®Ôºâ
 */
async function apiCallFormData(endpoint, formData) {
    const url = `${ASIN_API_CONFIG.baseUrl}${endpoint}`;

    // CSRF„Éà„Éº„ÇØ„É≥„ÇíFormData„Å´ËøΩÂä†
    const csrfToken = document.querySelector('meta[name="csrf-token"]');
    if (csrfToken) {
        formData.append('csrf_token', csrfToken.getAttribute('content'));
    }

    try {
        const response = await fetch(url, {
            method: 'POST',
            body: formData,
            credentials: 'include'
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.detail || errorData.message || `HTTP ${response.status}`);
        }

        return await response.json();

    } catch (error) {
        console.error('FormData APIÂëº„Å≥Âá∫„Åó„Ç®„É©„Éº:', error);
        throw error;
    }
}

// === Êó¢Â≠òUIÈñ¢Êï∞ÔºàHTML„Å®Âêå„ÅòÔºâ ===

function switchTab(tabId) {
    document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    document.querySelectorAll('.tab-button').forEach(button => {
        button.classList.remove('active');
    });
    
    document.getElementById(tabId).classList.add('active');
    event.target.classList.add('active');
}

function handleDragOver(event) {
    event.preventDefault();
    event.currentTarget.classList.add('dragover');
}

function handleDragLeave(event) {
    event.currentTarget.classList.remove('dragover');
}

function handleDrop(event) {
    event.preventDefault();
    event.currentTarget.classList.remove('dragover');
    
    const files = event.dataTransfer.files;
    if (files.length > 0) {
        const file = files[0];
        handleFile(file);
    }
}

function handleFileSelect(event) {
    const file = event.target.files[0];
    if (file) {
        handleFile(file);
    }
}

function handleFile(file) {
    // „Éï„Ç°„Ç§„É´ÂΩ¢Âºè„ÉÅ„Çß„ÉÉ„ÇØ
    const allowedTypes = ['text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
    if (!allowedTypes.includes(file.type) && !file.name.endsWith('.csv') && !file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {
        showAlert('„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Éï„Ç°„Ç§„É´ÂΩ¢Âºè„Åß„Åô„ÄÇCSV„ÄÅXLS„ÄÅXLSX„Éï„Ç°„Ç§„É´„ÅÆ„Åø„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„Åß„Åô„ÄÇ', 'error');
        return;
    }

    // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ (10MB)
    if (file.size > 10 * 1024 * 1024) {
        showAlert('„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åô„Åé„Åæ„Åô„ÄÇ10MB‰ª•‰∏ã„ÅÆ„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', 'error');
        return;
    }

    currentFile = file;
    showAlert(`„Éï„Ç°„Ç§„É´ "${file.name}" „ÅåÈÅ∏Êäû„Åï„Çå„Åæ„Åó„Åü„ÄÇÂá¶ÁêÜ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Á∂öË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ`, 'success');
}

// === APIÈÄ£Âãï„É°„Ç§„É≥Âá¶ÁêÜÈñ¢Êï∞ ===

/**
 * CSV„Éï„Ç°„Ç§„É´Âá¶ÁêÜÔºàÂÆüÈöõ„ÅÆAPIÂëº„Å≥Âá∫„ÅóÔºâ
 */
async function processCsvFile() {
    if (!currentFile) {
        showAlert('„Éï„Ç°„Ç§„É´„ÅåÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ', 'error');
        return;
    }

    try {
        showProgress(true);
        updateProgress(0, '„Éï„Ç°„Ç§„É´„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ‰∏≠...');

        // FormData‰ΩúÊàê
        const formData = new FormData();
        formData.append('file', currentFile);
        formData.append('create_products', 'true');

        // „Éï„Ç°„Ç§„É´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
        const response = await apiCallFormData('/upload-csv', formData);

        if (response.status === 'success') {
            currentSessionId = response.session_id;
            updateProgress(10, '„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂÆå‰∫Ü„ÄÅÂá¶ÁêÜÈñãÂßã‰∏≠...');
            
            // ÈÄ≤Êçó„Éù„Éº„É™„É≥„Ç∞ÈñãÂßã
            startProgressPolling();
            
            showAlert(`CSV„Éï„Ç°„Ç§„É´„ÅÆ„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ${response.total_items}‰ª∂„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÂá¶ÁêÜ‰∏≠...`, 'success');
        } else {
            throw new Error(response.message || '„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }

    } catch (error) {
        console.error('CSV„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
        showAlert('CSV„Éï„Ç°„Ç§„É´„ÅÆÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message, 'error');
        showProgress(false);
    }
}

/**
 * ÊâãÂãïÂÖ•ÂäõÂá¶ÁêÜÔºàÂÆüÈöõ„ÅÆAPIÂëº„Å≥Âá∫„ÅóÔºâ
 */
async function processManualInput() {
    const asin = document.getElementById('asinInput').value.trim();
    const url = document.getElementById('urlInput').value.trim();
    const keyword = document.getElementById('keywordInput').value.trim();
    const sku = document.getElementById('skuInput').value.trim();

    if (!asin && !url && !keyword) {
        showAlert('ASIN„ÄÅURL„ÄÅ„Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆ„ÅÑ„Åö„Çå„Åã„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', 'error');
        return;
    }

    try {
        showProgress(true);
        updateProgress(0, 'ÂïÜÂìÅÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...');

        const requestData = {
            asin: asin || null,
            url: url || null,
            keyword: keyword || null,
            sku: sku || null,
            create_product: true
        };

        const response = await apiCall('/add-single', {
            method: 'POST',
            body: JSON.stringify(requestData)
        });

        updateProgress(100, 'Âá¶ÁêÜÂÆå‰∫Ü');
        showProgress(false);

        if (response.status === 'success') {
            processedData = [response.result];
            displayResults();
            clearManualForm();
            showAlert('ÂïÜÂìÅ„ÅÆËøΩÂä†„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ', 'success');
        } else {
            throw new Error(response.message || 'Âá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }

    } catch (error) {
        console.error('ÊâãÂãïÂÖ•ÂäõÂá¶ÁêÜ„Ç®„É©„Éº:', error);
        showAlert('ÂïÜÂìÅ„ÅÆÂá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message, 'error');
        showProgress(false);
    }
}

/**
 * ‰∏ÄÊã¨ÂÖ•ÂäõÂá¶ÁêÜÔºàÂÆüÈöõ„ÅÆAPIÂëº„Å≥Âá∫„ÅóÔºâ
 */
async function processBulkInput() {
    const bulkText = document.getElementById('bulkInput').value.trim();
    if (!bulkText) {
        showAlert('ASIN„ÉªURL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', 'error');
        return;
    }

    try {
        showProgress(true);
        updateProgress(0, '‰∏ÄÊã¨Âá¶ÁêÜ„ÇíÈñãÂßã‰∏≠...');

        const requestData = {
            bulk_text: bulkText,
            create_products: true
        };

        const response = await apiCall('/bulk-paste', {
            method: 'POST',
            body: JSON.stringify(requestData)
        });

        if (response.status === 'success') {
            currentSessionId = response.session_id;
            updateProgress(10, `${response.total_items}‰ª∂„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÂá¶ÁêÜ‰∏≠...`);
            
            // ÈÄ≤Êçó„Éù„Éº„É™„É≥„Ç∞ÈñãÂßã
            startProgressPolling();
            
            showAlert(`‰∏ÄÊã¨Âá¶ÁêÜ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü„ÄÇ${response.total_items}‰ª∂„ÅÆ„Ç¢„Ç§„ÉÜ„É†„ÇíÂá¶ÁêÜ‰∏≠...`, 'success');
        } else {
            throw new Error(response.message || '‰∏ÄÊã¨Âá¶ÁêÜ„ÅÆÈñãÂßã„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }

    } catch (error) {
        console.error('‰∏ÄÊã¨Âá¶ÁêÜ„Ç®„É©„Éº:', error);
        showAlert('‰∏ÄÊã¨Âá¶ÁêÜ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message, 'error');
        showProgress(false);
    }
}

/**
 * ÈÄ≤Êçó„Éù„Éº„É™„É≥„Ç∞ÈñãÂßã
 */
function startProgressPolling() {
    if (!currentSessionId) {
        console.error('„Çª„ÉÉ„Ç∑„Éß„É≥ID„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
        return;
    }

    let pollAttempts = 0;

    progressPollTimer = setInterval(async () => {
        try {
            pollAttempts++;
            
            if (pollAttempts > ASIN_API_CONFIG.maxPollAttempts) {
                clearInterval(progressPollTimer);
                showAlert('Âá¶ÁêÜ„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ', 'error');
                showProgress(false);
                return;
            }

            const progressResponse = await apiCall(`/progress/${currentSessionId}`);
            
            if (progressResponse.status === 'processing') {
                updateProgress(
                    progressResponse.percentage || 0,
                    progressResponse.message || 'Âá¶ÁêÜ‰∏≠...'
                );
            } else if (progressResponse.status === 'completed') {
                clearInterval(progressPollTimer);
                updateProgress(100, 'Âá¶ÁêÜÂÆå‰∫Ü');
                
                // ÁµêÊûúÂèñÂæó
                await loadResults();
                
            } else if (progressResponse.status === 'error') {
                clearInterval(progressPollTimer);
                showAlert('Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + (progressResponse.error_message || '‰∏çÊòé„Å™„Ç®„É©„Éº'), 'error');
                showProgress(false);
            }

        } catch (error) {
            console.error('ÈÄ≤ÊçóÁ¢∫Ë™ç„Ç®„É©„Éº:', error);
            // „Ç®„É©„Éº„ÅåÁ∂ö„ÅèÂ†¥Âêà„ÅØ„Éù„Éº„É™„É≥„Ç∞ÂÅúÊ≠¢
            if (pollAttempts > 10) {
                clearInterval(progressPollTimer);
                showAlert('ÈÄ≤Êçó„ÅÆÁ¢∫Ë™ç„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message, 'error');
                showProgress(false);
            }
        }
    }, ASIN_API_CONFIG.pollInterval);
}

/**
 * ÁµêÊûúË™≠„ÅøËæº„Åø
 */
async function loadResults() {
    try {
        const response = await apiCall(`/results/${currentSessionId}`);
        
        if (response.status === 'completed') {
            processedData = response.results;
            displayResults();
            showProgress(false);
            
            showAlert(
                `Âá¶ÁêÜÂÆå‰∫Ü: ÊàêÂäü ${response.success_count}‰ª∂, „Ç®„É©„Éº ${response.error_count}‰ª∂`,
                response.success_count > 0 ? 'success' : 'error'
            );
        } else {
            throw new Error('ÁµêÊûú„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }

    } catch (error) {
        console.error('ÁµêÊûúË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        showAlert('ÁµêÊûú„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message, 'error');
        showProgress(false);
    }
}

/**
 * ÁµêÊûúË°®Á§∫ÔºàHTML„Å®Âêå„ÅòUI„ÄÅ„Éá„Éº„Çø„ÇΩ„Éº„Çπ„ÅÆ„ÅøAPIÔºâ
 */
function displayResults() {
    const resultSection = document.getElementById('resultSection');
    const tableBody = document.getElementById('resultTableBody');
    
    tableBody.innerHTML = '';

    processedData.forEach(result => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${result.input_value || ''}</td>
            <td>${result.input_type || ''}</td>
            <td><span class="status-badge status-${result.status}">${result.status === 'success' ? 'ÊàêÂäü' : '„Ç®„É©„Éº'}</span></td>
            <td>${result.product_name || ''}</td>
            <td>${result.price_formatted || ''}</td>
            <td>${result.error_message || result.brand || ''}</td>
        `;
        tableBody.appendChild(row);
    });

    resultSection.style.display = 'block';
    resultSection.scrollIntoView({ behavior: 'smooth' });
}

/**
 * ÁµêÊûú„ÉÄ„Ç¶„É≥„É≠„Éº„ÉâÔºàÂÆüÈöõ„ÅÆAPIÂëº„Å≥Âá∫„ÅóÔºâ
 */
async function downloadResults() {
    if (!currentSessionId) {
        showAlert('„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åß„Åç„ÇãÁµêÊûú„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ', 'error');
        return;
    }

    try {
        showAlert('CSV„Éï„Ç°„Ç§„É´„ÇíÊ∫ñÂÇô‰∏≠...', 'info');

        const response = await apiCall(`/export/${currentSessionId}?format=csv`);
        
        // Blob„Å®„Åó„Å¶„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        
        // „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„É™„É≥„ÇØ‰ΩúÊàê
        const link = document.createElement('a');
        link.href = url;
        link.download = `asin_upload_results_${currentSessionId}_${new Date().toISOString().split('T')[0]}.csv`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // „É°„É¢„É™„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        window.URL.revokeObjectURL(url);
        
        showAlert('CSV„Éï„Ç°„Ç§„É´„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÅåÈñãÂßã„Åï„Çå„Åæ„Åó„Åü„ÄÇ', 'success');

    } catch (error) {
        console.error('„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Ç®„É©„Éº:', error);
        showAlert('CSV„Éï„Ç°„Ç§„É´„ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ' + error.message, 'error');
    }
}

/**
 * ÊâãÂãï„Éï„Ç©„Éº„É†„ÇØ„É™„Ç¢
 */
function clearManualForm() {
    document.getElementById('asinInput').value = '';
    document.getElementById('urlInput').value = '';
    document.getElementById('keywordInput').value = '';
    document.getElementById('skuInput').value = '';
}

/**
 * ‰∏ÄÊã¨ÂÖ•Âäõ„Éï„Ç©„Éº„É†„ÇØ„É™„Ç¢
 */
function clearBulkForm() {
    document.getElementById('bulkInput').value = '';
}

/**
 * ÂÖ®ÁµêÊûú„ÇØ„É™„Ç¢
 */
function clearResults() {
    processedData = [];
    currentSessionId = null;
    document.getElementById('resultSection').style.display = 'none';
    document.getElementById('resultTableBody').innerHTML = '';
    showAlert('ÁµêÊûú„Åå„ÇØ„É™„Ç¢„Åï„Çå„Åæ„Åó„Åü„ÄÇ', 'info');
}

/**
 * „Éï„Ç°„Ç§„É´Âá¶ÁêÜ„É™„Çª„ÉÉ„Éà
 */
function resetFileUpload() {
    currentFile = null;
    document.getElementById('fileInput').value = '';
    showAlert('„Éï„Ç°„Ç§„É´ÈÅ∏Êäû„Åå„É™„Çª„ÉÉ„Éà„Åï„Çå„Åæ„Åó„Åü„ÄÇ', 'info');
}

// === UI „Éò„É´„Éë„ÉºÈñ¢Êï∞ ===

/**
 * „Ç¢„É©„Éº„ÉàË°®Á§∫
 */
function showAlert(message, type = 'info') {
    // EmverzeUI„ÅÆshowToast„Çí‰ΩøÁî®Ôºàmain.cssÂØæÂøúÔºâ
    if (typeof EmverzeUI !== 'undefined' && EmverzeUI.showToast) {
        EmverzeUI.showToast(type, type === 'success' ? 'ÊàêÂäü' : type === 'error' ? '„Ç®„É©„Éº' : 'ÊÉÖÂ†±', message);
    } else {
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Âü∫Êú¨„Ç¢„É©„Éº„Éà
        alert(`[${type.toUpperCase()}] ${message}`);
    }
}

/**
 * ÈÄ≤ÊçóË°®Á§∫Âà∂Âæ°
 */
function showProgress(show) {
    const progressSection = document.getElementById('progressSection');
    if (progressSection) {
        progressSection.style.display = show ? 'block' : 'none';
    }
}

/**
 * ÈÄ≤Êçó„Éê„ÉºÊõ¥Êñ∞
 */
function updateProgress(percentage, message) {
    const progressBar = document.getElementById('progressBar');
    const progressText = document.getElementById('progressText');
    
    if (progressBar) {
        progressBar.style.width = `${Math.max(0, Math.min(100, percentage))}%`;
    }
    
    if (progressText) {
        progressText.textContent = message || `${percentage}%`;
    }
}

/**
 * ÂïÜÂìÅÊÉÖÂ†±Ê§úË®ºÔºà„É™„Ç¢„É´„Çø„Ç§„É†„ÉÅ„Çß„ÉÉ„ÇØÔºâ
 */
async function validateProductInfo(input, inputType) {
    try {
        const response = await apiCall('/validate', {
            method: 'POST',
            body: JSON.stringify({
                input_value: input,
                input_type: inputType
            })
        });

        if (response.status === 'success') {
            return {
                valid: true,
                product_name: response.product_name,
                price: response.price,
                availability: response.availability
            };
        } else {
            return {
                valid: false,
                error: response.message || 'Ê§úË®º„Å´Â§±Êïó„Åó„Åæ„Åó„Åü'
            };
        }

    } catch (error) {
        console.error('Ê§úË®º„Ç®„É©„Éº:', error);
        return {
            valid: false,
            error: error.message
        };
    }
}

/**
 * „É™„Ç¢„É´„Çø„Ç§„É†ÂÖ•ÂäõÊ§úË®ºÔºàÊâãÂãïÂÖ•ÂäõÁî®Ôºâ
 */
function setupRealTimeValidation() {
    const asinInput = document.getElementById('asinInput');
    const urlInput = document.getElementById('urlInput');
    const keywordInput = document.getElementById('keywordInput');

    let validationTimer = null;

    // ASINÂÖ•ÂäõÊ§úË®º
    if (asinInput) {
        asinInput.addEventListener('input', (e) => {
            clearTimeout(validationTimer);
            const value = e.target.value.trim();
            
            if (value.length >= 10) { // ASIN„ÅØÈÄöÂ∏∏10ÊñáÂ≠ó
                validationTimer = setTimeout(async () => {
                    const result = await validateProductInfo(value, 'asin');
                    updateValidationUI('asin', result);
                }, 500);
            }
        });
    }

    // URLÂÖ•ÂäõÊ§úË®º
    if (urlInput) {
        urlInput.addEventListener('input', (e) => {
            clearTimeout(validationTimer);
            const value = e.target.value.trim();
            
            if (value.startsWith('http')) {
                validationTimer = setTimeout(async () => {
                    const result = await validateProductInfo(value, 'url');
                    updateValidationUI('url', result);
                }, 1000);
            }
        });
    }
}

/**
 * Ê§úË®ºUIÊõ¥Êñ∞
 */
function updateValidationUI(inputType, result) {
    const inputElement = document.getElementById(`${inputType}Input`);
    if (!inputElement) return;

    // Êó¢Â≠ò„ÅÆÊ§úË®ºË°®Á§∫„ÇíÂâäÈô§
    const existingFeedback = inputElement.parentNode.querySelector('.validation-feedback');
    if (existingFeedback) {
        existingFeedback.remove();
    }

    // Êñ∞„Åó„ÅÑÊ§úË®ºÁµêÊûúË°®Á§∫
    const feedback = document.createElement('div');
    feedback.className = 'validation-feedback';
    
    if (result.valid) {
        feedback.innerHTML = `
            <div class="validation-success">
                <i class="fas fa-check-circle"></i>
                <span>ÂïÜÂìÅÂêç: ${result.product_name}</span>
                ${result.price ? `<span>‰æ°Ê†º: ${result.price}</span>` : ''}
            </div>
        `;
        inputElement.classList.add('valid');
        inputElement.classList.remove('invalid');
    } else {
        feedback.innerHTML = `
            <div class="validation-error">
                <i class="fas fa-exclamation-circle"></i>
                <span>${result.error}</span>
            </div>
        `;
        inputElement.classList.add('invalid');
        inputElement.classList.remove('valid');
    }

    inputElement.parentNode.appendChild(feedback);
}

// === ÂàùÊúüÂåñÂá¶ÁêÜ ===

/**
 * DOMContentË™≠„ÅøËæº„ÅøÂÆå‰∫ÜÊôÇ„ÅÆÂàùÊúüÂåñ
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('ASIN Upload JavaScriptÂàùÊúüÂåñÈñãÂßã');

    // „É™„Ç¢„É´„Çø„Ç§„É†Ê§úË®º„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
    setupRealTimeValidation();

    // WebSocketÊé•Á∂öÔºàÂà©Áî®ÂèØËÉΩ„Å™Â†¥ÂêàÔºâ
    if (typeof EmverzeWebSocket !== 'undefined') {
        EmverzeWebSocket.on('asin_progress', (data) => {
            if (data.session_id === currentSessionId) {
                updateProgress(data.percentage, data.message);
                
                if (data.status === 'completed') {
                    loadResults();
                } else if (data.status === 'error') {
                    showAlert('Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ' + data.error_message, 'error');
                    showProgress(false);
                }
            }
        });
    }

    console.log('ASIN Upload JavaScriptÂàùÊúüÂåñÂÆå‰∫Ü');
});

/**
 * „Éö„Éº„Ç∏Èõ¢ËÑ±ÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
 */
window.addEventListener('beforeunload', function() {
    if (progressPollTimer) {
        clearInterval(progressPollTimer);
    }
});

// === „Éá„Éê„ÉÉ„Ç∞Áî®Èñ¢Êï∞ÔºàÈñãÁô∫Áí∞Â¢É„ÅÆ„ÅøÔºâ ===

/**
 * APIË®≠ÂÆöË°®Á§∫ÔºàÈñãÁô∫Áî®Ôºâ
 */
function showApiConfig() {
    console.log('ASIN APIË®≠ÂÆö:', ASIN_API_CONFIG);
    console.log('ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥ID:', currentSessionId);
    console.log('Âá¶ÁêÜÊ∏à„Åø„Éá„Éº„Çø:', processedData);
}

/**
 * ÈÄ≤Êçó„Éù„Éº„É™„É≥„Ç∞Âº∑Âà∂ÂÅúÊ≠¢ÔºàÈñãÁô∫Áî®Ôºâ
 */
function stopPolling() {
    if (progressPollTimer) {
        clearInterval(progressPollTimer);
        progressPollTimer = null;
        console.log('ÈÄ≤Êçó„Éù„Éº„É™„É≥„Ç∞„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü');
    }
}

// === „Ç∞„É≠„Éº„Éê„É´Èñ¢Êï∞„Ç®„ÇØ„Çπ„Éù„Éº„Éà ===
window.ASIN_Upload = {
    // „É°„Ç§„É≥Âá¶ÁêÜÈñ¢Êï∞
    processCsvFile,
    processManualInput,
    processBulkInput,
    downloadResults,
    
    // UIÂà∂Âæ°Èñ¢Êï∞
    switchTab,
    clearResults,
    resetFileUpload,
    clearManualForm,
    clearBulkForm,
    
    // „Éï„Ç°„Ç§„É´Âá¶ÁêÜÈñ¢Êï∞
    handleFileSelect,
    handleDragOver,
    handleDragLeave,
    handleDrop,
    
    // „Éá„Éê„ÉÉ„Ç∞Èñ¢Êï∞
    showApiConfig,
    stopPolling,
    
    // Ë®≠ÂÆö„ÉªÁä∂ÊÖãÂèñÂæó
    getConfig: () => ASIN_API_CONFIG,
    getCurrentSession: () => currentSessionId,
    getProcessedData: () => processedData
};